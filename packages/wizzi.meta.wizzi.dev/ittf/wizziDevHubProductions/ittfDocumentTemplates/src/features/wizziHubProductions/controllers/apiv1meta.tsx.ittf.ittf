$group
    ${'$'}
        var ctrl = {
            name: 'ApiV1MetaProduction',
            path: '/api/v1/production/meta',
            apiSecured: wzCtx.Build.useAuthentication,
            Production: 'Meta',
            production: 'meta',
        }
    v08/ts/controller${'('} &ctrl )
        ${'$'}append imports
            apiv1_imports${'('} &ctrl )
            import
                @ generateMetaProduction
                from '../api/meta'
            import
                @ artifactApi
                @ productionApi
                from '#/src/features/wizziHubProductions'
            const myname = 'features/production/controllers/apiv1metaproduction'
        v08/ts/route${'('} get, /:owner, this.getMetas)
        v08/ts/route${'('} get, /props/:id, this.getMetaProperties)
        v08/ts/route${'('} get, /checkname/:owner/:name, this.getCheckMetaName)
        v08/ts/route${'('} get, /:owner/:name, this.getMeta)
        v08/ts/route${'('} put, /:id, this.putMeta)
        v08/ts/route${'('} put, /packidiffs/:id, this.putMetaPackiDiffs)
        v08/ts/route${'('} post, '/:owner/:name, this.postMeta)
        v08/ts/route${'('} post, '/generate/:owner/:name, this.generateMetaByName)
        ${'$'}append handlers
            v08/ts/handler${'('} getMetas )
                rest/check-params${'('} )
                    rest/not-empty${'('} params , owner )
                _ getMetaProductionList
                    {
                        { query
                            @ owner owner
                    ._ then
                        =>
                            param result
                                :any
                            if result.ok
                                _ sendSuccess
                                    @ response
                                    @ result
                            v08/ts/else_send_fail${'('} getMetas, result)
                    v08/ts/catch_send_fail${'('} getMetas )
            v08/ts/handler${'('} getMetaProperties )
                rest/check-params${'('} )
                    rest/not-empty${'('} params , id )
                _ productionApi.prepareProductionById
                    @ 'meta'
                    @ id
                    @ ''
                    {
                    ._ then
                        =>
                            param metaProductionSet
                                :any
                            _ wizziProds.generateArtifact
                                @ 'properties/index.json.ittf'
                                @ metaProductionSet.packiFiles
                                @ metaProductionSet.context
                                ._ then
                                    =>
                                        param value
                                        ${'$'}$ loog myname, 'getMetaProperties.generateArtifact.result', value
                                        _ sendSuccess
                                            @ response
                                            {
                                                @ meta JSON.parse(value.artifactContent)
                                v08/ts/catch_send_fail${'('} features.packi.controllers.production.generateArtifact )
                    v08/ts/catch_send_fail${'('} getMetaProperties.prepareProductionById )
            v08/ts/handler${'('} getCheckMetaName )
                check_name${'('} meta )
            v08/ts/handler${'('} getMeta )
                rest/check-params${'('} )
                    rest/not-empty${'('} params , owner )
                    rest/not-empty${'('} params , name )
                _ getMetaProduction
                    @ owner
                    @ name
                    ._ then
                        =>
                            param result
                                :any
                            _ sendSuccess
                                @ response
                                @ result
                    v08/ts/catch_send_fail${'('} getMeta )
            v08/ts/handler${'('} postMeta )
                ${'$'}$ loog 'postMeta.request.params', request.params
                ${'$'}$ loog 'postMeta.request.body', request.body
                rest/check-params${'('} )
                    rest/not-empty${'('} params , owner )
                    rest/not-empty${'('} params , name )
                _ createMetaProduction
                    @ owner
                    @ name
                    @ request.body.description
                    @ JSON.stringify(request.body.packiFiles)
                    ._ then
                        =>
                            param result
                                :any
                            _ sendSuccess
                                @ response
                                @ result
                    v08/ts/catch_send_fail${'('} postMeta )
            v08/ts/handler${'('} putMeta )
                rest/check-params${'('} )
                    rest/not-empty${'('} params , id )
                    rest/not-empty${'('} body , owner )
                    rest/not-empty${'('} body , name )
                    rest/not-empty${'('} body , description )
                    rest/not-empty${'('} body , packiFiles )
                _ updateMetaProduction
                    @ id
                    @ owner
                    @ name
                    @ description
                    @ JSON.stringify(packiFiles)
                    ._ then
                        =>
                            param result
                                :any
                            _ sendSuccess
                                @ response
                                @ result
                    v08/ts/catch_send_fail${'('} putMeta )
            apiv1_put${'('} &ctrl )
            v08/ts/handler${'('} generateMetaByName )
                rest/check-params${'('} )
                    rest/not-empty${'('} params , id )
                    rest/not-empty${'('} params , owner )
                    rest/not-empty${'('} body , metaCtx )
                _ generateMetaProduction
                    @ owner
                    @ name
                    @ metaCtx
                    ._ then
                        =>
                            param result
                                :any
                            _ sendSuccess
                                @ response
                                @ result
                    v08/ts/catch_send_fail${'('} generateMetaByName )
    apiv1_exec_update${'('} &ctrl )