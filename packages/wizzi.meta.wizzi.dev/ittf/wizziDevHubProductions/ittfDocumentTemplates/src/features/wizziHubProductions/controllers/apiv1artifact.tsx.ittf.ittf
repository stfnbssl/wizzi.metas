$group
    ${'$'}
        var ctrl = {
            name: 'ApiV1ArtifactProduction',
            path: '/api/v1/production/artifact',
            apiSecured: wzCtx.Build.useAuthentication,
            Production: 'Artifact',
            production: 'artifact',
        }
    v08/ts/controller${'('} &ctrl )
        ${'$'}append imports
            apiv1_imports${'('} &ctrl )
            const myname = 'features/production/controllers/apiv1artifact'
        v08/ts/route${'('} get, /:owner, this.getArtifacts)
        v08/ts/route${'('} get, /checkname/:owner/:name, this.getCheckArtifactName)
        v08/ts/route${'('} get, /:owner/:name, this.getArtifact)
        v08/ts/route${'('} put, /:id, this.putArtifact)
        v08/ts/route${'('} put, /packidiffs/:id, this.putArtifactPackiDiffs)
        v08/ts/route${'('} post, /:owner/:name, this.postArtifact)
        ${'$'}append handlers
            v08/ts/handler${'('} getArtifacts )
                rest/check-params${'('} )
                    rest/not-empty${'('} params , owner )
                _ getArtifactProductionList
                    {
                        { query
                            @ owner owner
                    ._ then
                        =>
                            param result
                                :any
                            _ sendSuccess
                                @ response
                                @ result
                    v08/ts/catch_send_fail${'('} getArtifacts )
            v08/ts/handler${'('} getCheckArtifactName )
                check_name${'('} artifact )
            v08/ts/handler${'('} getArtifact )
                rest/check-params${'('} )
                    rest/not-empty${'('} params , owner )
                    rest/not-empty${'('} params , name )
                _ getArtifactProduction
                    @ owner
                    @ name
                    ._ then
                        =>
                            param result
                                :any
                            _ sendSuccess
                                @ response
                                @ result
                    v08/ts/catch_send_fail${'('} getArtifact )
            v08/ts/handler${'('} postArtifact )
                rest/check-params${'('} )
                    rest/not-empty${'('} params , owner )
                    rest/not-empty${'('} params , name )
                    rest/not-empty${'('} body , description )
                    rest/not-empty${'('} body , mainIttf )
                    rest/not-empty${'('} body , wizziSchema )
                    rest/not-undefined${'('} body , packiFiles )
                _ createArtifactProduction
                    @ owner
                    @ name
                    @ description
                    @ mainIttf
                    @ wizziSchema
                    @ JSON.stringify(packiFiles)
                    ._ then
                        =>
                            param result
                                :any
                            ${'$'}$ loog 'postArtifact.create.result', result
                            _ invalidateCache
                                @ owner
                                @ name
                            _ sendSuccess
                                @ response
                                @ result
                    v08/ts/catch_send_fail${'('} postArtifact )
            v08/ts/handler${'('} putArtifact )
                log 'putArtifact.request.params', request.params
                log 'putArtifact.request.body', Object.keys(request.body)
                rest/check-params${'('} )
                    rest/not-undefined${'('} body , packiFiles )
                    rest/not-undefined${'('} body , options )
                log 'putArtifact.request.body.packiFiles', Object.keys(packiFiles)
                if options.wizzify
                    _ wizziProds.wizzify
                        @ packiFiles
                        ._ then
                            =>
                                param resultPackiFiles
                                    :any
                                log 'putArtifact.wizzify.resultPackiFiles', Object.keys(resultPackiFiles)
                                return
                                    _ exec_updateArtifactProduction
                                        @ request
                                        @ response
                                        @ resultPackiFiles
                        v08/ts/catch_send_fail${'('} putArtifact.wizzify )
                elif options.merge
                    rest/check-params${'('} )
                        rest/not-undefined${'('} params , id )
                    _ getArtifactProductionObjectById
                        @ id
                        ._ then
                            =>
                                param prevArtifact
                                    :any
                                const resultPackiFiles
                                    _ mergePackiFiles
                                        @ prevArtifact.packiFiles
                                        @ packiFiles
                                log 'putArtifact.merge.resultPackiFiles', Object.keys(resultPackiFiles)
                                return
                                    _ exec_updateArtifactProduction
                                        @ request
                                        @ response
                                        @ resultPackiFiles
                        v08/ts/catch_send_fail${'('} putArtifact.merge.getArtifactProductionById )
                else
                    _ exec_updateArtifactProduction
                        @ request
                        @ response
                        @ packiFiles
            apiv1_put${'('} &ctrl )
    apiv1_exec_update${'('} &ctrl )