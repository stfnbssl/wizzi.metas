$group
    ${'$'}
        var ctrl = {
            name: 'ArtifactProduction',
            path: '/artifact',
            webSecured: wzCtx.Build.useAuthentication,
        }
    v08/ts/controller${'('} &ctrl )
        ${'$'}append imports
            import React
                from 'react'
            import ReactDOMServer
                from 'react-dom/server'
            import PageFormDocument
                from '#/src/pages/PageFormDocument'
            import
                @ CRUDResult
                from '#/src/features/types'
            import
                @ getTemplatePackiFiles
                from '../api/meta'
            import
                @ createArtifactProduction
                @ updateArtifactProduction
                @ deleteArtifactProduction
                @ getArtifactProductionObject
                @ getArtifactProductionObjectById
                from '../api/artifact'
            import
                @ mergePackiFiles
                from '../utils'
            import
                @ packiTypes
                from '#/src/features/packi'
            +
            const myname = 'features/production/controllers/artifact'
            +
            function renderPageForm
                param req
                    :ref Request
                param res
                    :ref Response
                param data
                    :object
                param queryParams
                    :object
                const index
                    op+
                        + '<!DOCTYPE html>'
                        _ ReactDOMServer.renderToStaticMarkup
                            < PageFormDocument
                                @ data {data}
                                @ queryParams {queryParams}
                _ res.set('Content-Type', 'text/html')
                _ res.set('Content-Length', index.length.toString())
                _ res.send(index)
            ${'$'}include defaults/artifact_packifiles
        v08/ts/route${'('} get, /new, this.getNewArtifactForm)
        v08/ts/route${'('} post, /new, this.postArtifact)
        v08/ts/route${'('} get, /update/:id, this.getUpdateArtifactForm)
        v08/ts/route${'('} post, /update, this.putArtifact)
        v08/ts/route${'('} get, /delete/:id, this.getDeleteArtifactForm)
        v08/ts/route${'('} post, /delete, this.deleteArtifact)
        ${'$'}append handlers
            v08/ts/handler${'('} getNewArtifactForm )
                _ renderPageForm
                    @ request
                    @ response
                    {
                        @ type 'success'
                        @ formName 'CreateArtifactProduction'
                        { formData
                            @ owner (request.session as any).user.username
                            @ name request.query.name
                            @ mainIttf request.query.mainIttf
                            @ schema request.query.schema
                    {
            v08/ts/handler${'('} postArtifact )
                ${'$'}$ loog myname + '.postNewArtifact.request.body', JSON.stringify(request.body, null, 2)
                const wizziSchema = request.body.ap_wizzi_schema || 'html'
                const mainIttf = request.body.ap_main_ittf || 'index.' + wizziSchema + '.ittf'
                const contexts = request.body.ap_contexts || '[]'
                const tfolders = request.body.ap_tfolders || '[]'
                _ getTemplatePackiFiles
                    @ request.body.meta_id
                    @ request.body.meta_propsValues ? JSON.parse(request.body.meta_propsValues) : {}
                    @ request.query.context as string
                    @ request.body.context ? JSON.parse(request.body.context) : {}
                    {
                        @ wizziSchema wizziSchema
                        @ mainIttf mainIttf
                    ._ then
                        =>
                            param packiFiles
                                :ref packiTypes.PackiFiles
                            _ createArtifactProduction
                                @ (request.session as any).user.username
                                @ request.body.ap_name
                                @ request.body.ap_description
                                @ mainIttf
                                @ wizziSchema
                                _ JSON.stringify
                                    _ mergePackiFiles
                                        @ packiFiles
                                        _ getPackiConfigFile
                                ._ then
                                    =>
                                        param result
                                            :ref CRUDResult
                                        if result.ok
                                            # _ response.redirect('/packi/productions/artifacts')
                                            _ response.redirect
                                                @ '/~~/a/' + (request.session as any).user.username + '/' + request.body.ap_name
                                        else
                                            _ response.render
                                                @ 'error.html.ittf'
                                                {
                                                    @ message 'creating a new artifact production'
                                                    @ error result
                                ._ catch
                                    =>
                                        param err
                                            :any
                                        _ response.render
                                            @ 'error.html.ittf'
                                            {
                                                @ message 'creating a new artifact production'
                                                @ error err
            v08/ts/handler${'('} getUpdateArtifactForm )
                update_get_form${'('} artifact )
                    @ mainIttf result.mainIttf
                    @ wizziSchema result.wizziSchema
            v08/ts/handler${'('} putArtifact )
                update_put${'('} artifact )
            v08/ts/handler${'('} getDeleteArtifactForm )
                delete_get_form${'('} artifact )
                    @ mainIttf result.mainIttf
                    @ wizziSchema result.wizziSchema
            v08/ts/handler${'('} deleteArtifact )
                delete_delete${'('} artifact )