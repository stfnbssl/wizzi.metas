$group
    ${'$'}
        var md = {
            Name: 'MetaProduction',
            name: 'metaProduction',
            mongoName: 'meta',
            descr: 'meta production',
            prefix: 'mp',
            query: [
                { name: 'owner', type: 'string' },
                { name: 'name', type: 'string' },
            ],
            fields: [
                { name: 'owner', type: 'string' },
                { name: 'name', type: 'string' },
                { name: 'description', type: 'string' },
                { name: 'packiFiles', type: 'string' },
            ],
            created_at: true,
            updated_at: true,
            update_delete_by_id: true
        }
    import
        @ packiApi
        from '#/src/features/packi'
    import
        @ WizziInMemoryMetaRef
        from '../types'
    imports_and_validate_api${'('} &md)
    v08/mongo/crud/get_list_api${'('} &md)
    v08/mongo/crud/get_api${'('} &md)
    get_object_api${'('} &md)
    v08/mongo/crud/create_api${'('} &md)
    v08/mongo/crud/update_api${'('} &md)
    v08/mongo/crud/delete_api${'('} &md)
    merge_files_api${'('} &md)
    ${'$'}include meta/cached_get_save
    ${'$'}include meta/get_templatePackiFiles
    ${'$'}include meta/get_metaGeneration.ts
    +
    export
        async-function getInMemoryMetaPlugins
            param inMemoryMetas
                :[
                    :ref WizziInMemoryMetaRef
            log 'getInMemoryMetaPlugins.inMemoryMetas', JSON.stringify(inMemoryMetas)
            r_promise${'('} )
                const result: any[] = []
                function doBuildInMemoryPlugin
                    param ndx
                        :number
                    const inMemoryRef = inMemoryMetas[ndx]
                    if !inMemoryRef
                        # loog 'getInMemoryMetaPlugins.result', JSON.stringify(result, null, 4)
                        r_resolve${'('} )
                            @ result
                    _ getMetaProduction
                        @ inMemoryRef.owner
                        @ inMemoryRef.name
                        a_then${'('} metaResult )
                            let inMemoryPlugin
                                :any
                                _ packiApi.extractPackiFileContent
                                    @ metaResult.item.packiFiles
                                    @ '.db/meta.provides.json'
                                    {
                                        @ json true
                            set inMemoryPlugin = inMemoryPlugin.json
                            set inMemoryPlugin.metaPackiFiles
                                _ packiApi.packiFilesToObject
                                    @ metaResult.item.packiFiles
                            _ result.push
                                @ inMemoryPlugin
                            _ doBuildInMemoryPlugin
                                @ ndx + 1
                        catch_reject${'('} wizziMeta.executeMetaProductionWithInMemoryPlugins.getMetaProduction )
                _ doBuildInMemoryPlugin
                    @ 0