$group
    +
    export
        async-function generateMetaProduction
            param owner
                :string
            param name
                :string
            param metaCtx
                :any
            :return
                :ref Promise
                    :param
                        :ref packiTypes.PackiFiles
            ${'$'}$ loog myname, 'generateMetaProduction', 'owner', owner, 'name', name
            return
                _ getMetaProduction
                    @ owner
                    @ name
                    ._ then
                        =>
                            param metaProduction
                                :ref CRUDResult
                            ${'$'}$ loog myname, 'generateMetaProduction.gotMetaProductionItem', 'CRUDResult.item.id,keys', metaProduction.item.id, Object.keys(metaProduction.item)
                            return
                                _ generateMetaProductionById
                                    @ metaProduction.item.id
                                    @ metaCtx
    +
    export
        async-function generateMetaProductionById
            param metaId
                :string
            param metaCtx
                :any
            :return
                :ref Promise
                    :param
                        :ref packiTypes.PackiFiles
            ${'$'}$ loog myname, 'generateMetaProductionById', 'metaId', metaId, 'metaCtx', Object.keys(metaCtx)
            return
                new Promise
                    =>
                        param resolve
                        param reject
                        _ productionApi.prepareProductionById
                            @ 'meta'
                            @ metaId
                            @ ""
                            {
                            ._ then
                                =>
                                    param metaProductionSet
                                        :any
                                    log 'generateMetaProductionById.metaProductionSet', 'packiFiles', Object.keys(metaProductionSet.packiFiles), 'context', Object.keys(metaProductionSet.context),
                                    const metaContext
                                        _ Object.assign
                                            {
                                            @ metaProductionSet.context
                                            {
                                                @ metaCtx metaCtx
                                    _ wizziProds.metaGenerate
                                        @ metaProductionSet.packiFiles
                                        @ metaContext
                                        ._ then
                                            =>
                                                param packiFiles
                                                    :ref packiTypes.PackiFiles
                                                ${'$'}$ loog 'generateMetaProductionById.metaGenerate.result', 'packiFiles', Object.keys(packiFiles),
                                                _ resolve
                                                    @ packiFiles
                                        v08/ts/catch_reject${'('} generateMetaProductionById.metaGenerate )
                            v08/ts/catch_reject${'('} generateMetaProductionById.prepareProductionById )