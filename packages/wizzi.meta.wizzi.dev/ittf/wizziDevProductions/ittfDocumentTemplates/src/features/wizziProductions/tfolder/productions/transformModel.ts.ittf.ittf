$group
    export
        async-function loadAndTransformModel
            param filePath
                :string
            param files
                :ref packiTypes.PackiFiles
            param context
                :any
                :optional
            param options
                :ref TransformationOptions
                :optional
            :return
                :ref Promise
                    :param
                        :ref TransformedModel
            return
                new Promise
                    async=>
                        param resolve
                        param reject
                        if !verify.isObject(files)
                            return
                                _ reject
                                    {
                                        @ action 'wizzi.productions.transformModel'
                                        @ message 'files parameter must be an object of type PackiFiles'
                                        @ files
                        const transformer = options && options.transformer ? options.transformer : null
                        let jsonwf
                            :any
                            =
                                {
                        let transformationContext
                            :any
                            =
                                {
                        const ittfDocumentUri
                            _ ensurePackiFilePrefix(filePath)
                                :as
                                    :string
                        const siteDocumentUri
                            _ Object.keys(files).find
                                =>
                                    param k
                                    _ k.endsWith('site.json.ittf')
                        try
                            set jsonwf =
                                await
                                    _ createJsonFsAndFactory(files)
                            set transformationContext =
                                {
                                    @ site
                                        iif siteDocumentUri
                                            then
                                                await
                                                    _ loadModelInternal
                                                        @ jsonwf.wf
                                                        _ ensurePackiFilePrefix(siteDocumentUri)
                                                        {
                                            else null
                                    ...
                                        await
                                            _ inferAndLoadContextJson(jsonwf.wf, files, ittfDocumentUri, 'twin')
                            _ jsonwf.wf.loadAndTransformModel
                                @ ittfDocumentUri
                                {
                                    @ modelRequestContext transformationContext
                                @ transformer
                                =>
                                    param err
                                        :any
                                    param result
                                        :any
                                    if err
                                        return reject(err)
                                    _ resolve
                                        {
                                            @ transformResult result
                                            @ sourcePath filePath
                                            @ modelTransformer transformer
                        catch ex
                            return reject(ex)
    +
    export
        async-function transformModel
            param object
                :any
            param context
                :any
                :optional
            param options
                :ref TransformationOptions
                :optional
            :return
                :ref Promise
                    :param
                        :ref TransformedModel
            const _options
                :ref TransformationOptions
                = options || {}
            return
                new Promise
                    async=>
                        param resolve
                        param reject
                        const transformer = _options.transformer
                        if transformer
                            # TODO catch error
                            const plugins
                                iif _options.pluginsBaseFolder && _options.plugins
                                    then
                                        {
                                            @ pluginsBaseFolder _options.pluginsBaseFolder
                                            @ items _options.plugins
                                    else null
                            const wf
                                await
                                    _ createFilesystemFactory
                                        @ plugins
                                        @ null
                                        {
                            const transformationContext
                                {
                                    @ modelRequestContext
                                        ||
                                            + context
                                            {
                            _ wf.transformModel
                                @ object
                                @ transformer
                                {
                                    @ modelRequestContext transformationContext
                                =>
                                    param err
                                        :any
                                    param result
                                        :any
                                    if err
                                        return reject(err)
                                    _ resolve
                                        {
                                            @ transformResult result
                                            @ sourcePath object
                                            @ modelTransformer transformer
                        else
                            _ reject('No model transformer in options')
    +
    export
        async-function loadAndTransformModelFs
            param filePath
                :string
            param context
                :any
                :optional
            param options
                :ref TransformationOptions
                :optional
            :return
                :ref Promise
                    :param
                        :ref TransformedModel
            const _options
                :ref TransformationOptions
                = options || {}
            return
                new Promise
                    async=>
                        param resolve
                        param reject
                        const transformer = _options.transformer ? _options.transformer : null
                        # TODO catch error
                        const plugins
                            iif _options.pluginsBaseFolder && _options.plugins
                                then
                                    {
                                        @ pluginsBaseFolder _options.pluginsBaseFolder
                                        @ items _options.plugins
                                else null
                        const wf
                            await
                                _ createFilesystemFactory
                                    @ plugins
                                    @ null
                                    {
                        const transformationContext
                            {
                                @ modelRequestContext
                                    ||
                                        + context
                                        {
                        _ wf.loadAndTransformModel
                            @ filePath
                            {
                                @ modelRequestContext transformationContext
                            @ transformer
                            =>
                                param err
                                    :any
                                param result
                                    :any
                                if err
                                    return reject(err)
                                _ resolve
                                    {
                                        @ transformResult result
                                        @ sourcePath filePath
                                        @ modelTransformer transformer