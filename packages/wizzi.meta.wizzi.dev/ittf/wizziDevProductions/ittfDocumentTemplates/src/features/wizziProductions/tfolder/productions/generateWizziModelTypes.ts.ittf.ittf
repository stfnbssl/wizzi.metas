$group
    +
    export
        async-function generateWizziModelTypes
            param request
                :ref WizziModelTypesRequest
            r_promise_async${'('}
                const storeKind = request.storeKind || 'filesystem'
                const mTreeBuildUpContext = Object.assign({}, request.mTreeBuildUpContext)
                const globalContext = Object.assign({}, request.globalContext)
                +
                var plugins
                    [
                if request.plugins
                    foreach item in request.plugins
                        if item
                            if plugins.indexOf(item) < 0
                                _ plugins.push(item)
                else
                    _ plugins.push('@wizzi/plugin.wzschema')
                    _ plugins.push('@wizzi/plugin.html')
                    _ plugins.push('@wizzi/plugin.json')
                    _ plugins.push('@wizzi/plugin.js')
                info 'wizziProds.generateWizziModelTypes.plugins', plugins
                for var k in mTreeBuildUpContext
                    info '- mTreeBuildUpContext property', k, mTreeBuildUpContext[k]
                for var k in globalContext
                    info '- globalContext property', k, globalContext[k]
                +
                try
                    const wf
                        await
                            _ createFilesystemFactoryWithParameters
                                @ request.pluginsBaseFolder
                                @ plugins
                                @ globalContext
                    info 'STARTING WIZZI MODEL TYPES GENERATION FOR SCHEMA ' + request.wfschemaName
                    _ wf.generateModelDoms
                        @ request.wfschemaIttfDocumentUri
                        @ request.wfschemaOutputPackageFolder
                        @ request.wfschemaName
                        @ mTreeBuildUpContext
                        =>
                            param err
                                :any
                            param result
                                :any
                            if err
                                r_reject${'('} )
                                    {
                                        @ message "wizziProds.generateWizziModelTypes.generateModelDoms.error"
                                        { err
                            success 'WIZZI MODEL TYPES GENERATED FOR SCHEMA ' + request.wfschemaName
                            return resolve(request.wfschemaName)
                catch ex
                    error "wizziProds.generateWizziModelTypes.error", ex
                    r_reject${'('} )
                        {
                            @ message "wizziProds.generateWizziModelTypes.error"
                            @ err ex