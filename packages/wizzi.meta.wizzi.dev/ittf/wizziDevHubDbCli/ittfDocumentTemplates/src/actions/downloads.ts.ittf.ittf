$group
    
    import path from 'path'
    import 
        @ fSystem 
        @ verify
        from '@wizzi/utils'
    import
        @ PackiFiles
        from '#/src/features/packi/types'
    import 
        $foreach hp in hubProductions
            @ ${hp.name}Api
        from '#/src/features/wizziProductions'

    $foreach hp in hubProductions
        export
            function download${_.capitalize(hp.name)}
                param owner
                    :string
                param name
                    :string
                param options
                    :any
                :return
                    :ref Promise
                        :param any
                r_promise${'('})
                    _ ${hp.name}Api.get${_.capitalize(hp.name)}ProductionObject
                        @ owner
                        @ name
                        a_then_catch_reject${'('} result, :any, , download.download${_.capitalize(hp.name)}.get${_.capitalize(hp.name)}ProductionObject )
                            # info '${hp.name}Api.get${_.capitalize(hp.name)}ProductionObject.result', Object.keys(result)
                            if options.destFolder
                                _ writePackiToDest
                                    _ filterPackiFiles
                                        @ result.packiFiles
                                        @ options
                                    @ options.destFolder
                            return
                                _ resolve
                                    @ result.item
        +
    
    function filterPackiFiles
        param packiFiles
            :ref PackiFiles
        param options
            :any
        # loog 'filterPackiFiles.filter', options
        if !options || !options.filter
            return packiFiles
        else
            const result
                :ref PackiFiles
                {
            foreach k in Object.keys(packiFiles)
                # loog 'filterPackiFiles', options.name + '/' + k , options.filter(k, packiFiles[k].type, packiFiles[k].contents)
                if options.filter(options.name + '/' + k, packiFiles[k].type, packiFiles[k].contents)
                    set result[k] = packiFiles[k]
            return result
    +

    function writePackiToDest
        param packiFiles
            :ref PackiFiles
        param destFolder
            :string
        param destMetaFolder
            :string
            :optional
        foreach k in Object.keys(packiFiles)
            _ fSystem.vfile().write
                _ path.join
                    @ destFolder
                    @ k
                @ packiFiles[k].contents
            if destMetaFolder
                _ fSystem.vfile().write
                    _ path.join
                        @ destMetaFolder
                        @ k + '.ittf'
                    _ ittfToMeta
                        @ packiFiles[k].contents
    +

