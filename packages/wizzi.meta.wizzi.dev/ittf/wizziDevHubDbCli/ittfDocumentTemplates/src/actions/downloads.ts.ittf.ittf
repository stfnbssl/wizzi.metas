$group
    
    import path from 'path'
    import 
        @ fSystem 
        @ verify
        from '@wizzi/utils'
    import
        @ PackiFiles
        from '#/src/features/packi/types'
    import 
        $foreach hp in hubProductions
            @ ${hp.name}Api
        from '#/src/features/wizziHubProductions'
    :import-type 
        @ DownloadOptions
        from './types'        

    $foreach hp in hubProductions
        export 
            function download${_.capitalize(hp.name)}List
                param owner
                    :string 
                param options
                    :ref DownloadOptions
                :return
                    :ref Promise
                        :param any
                return 
                    new Promise
                        => 
                            param resolve
                            param reject
                            _ ${hp.name}Api.get${_.capitalize(hp.name)}ProductionList
                                { 
                                    @ owner
                                ._ then
                                    => 
                                        param result
                                            :any 
                                        if options.destFolder
                                            _ writeJSONToDest
                                                _ path.join
                                                    @ options.destFolder
                                                    @ '..'
                                                    @ '.packi'
                                                    @ '${_.capitalize(hp.name)}List.json' 
                                                @ result
                                            foreach item in result.item
                                                const packiFiles
                                                    :ref PackiFiles
                                                    = JSON.parse(item.packiFiles)
                                                _ writePackiToDest
                                                    @ packiFiles
                                                    _ path.join
                                                        @ options.destFolder
                                                        _ verify.replaceAll(item.name, '/', '_')
                                        return resolve(result.item)
                                ._ catch
                                    => 
                                        param err
                                            :any 
                                        if typeof err === 'object' && err !== null
                                        _ console.log("[31m%s[0m", 'download.download${_.capitalize(hp.name)}.get${_.capitalize(hp.name)}ProductionList.error', err)
                                        return reject(err)

        export
            function download${_.capitalize(hp.name)}
                param owner
                    :string
                param name
                    :string
                param options
                    :ref DownloadOptions
                :return
                    :ref Promise
                        :param any
                r_promise${'('})
                    _ ${hp.name}Api.get${_.capitalize(hp.name)}ProductionObject
                        @ owner
                        @ name
                        a_then_catch_reject${'('} result, :any, , download.download${_.capitalize(hp.name)}.get${_.capitalize(hp.name)}ProductionObject )
                            # info '${hp.name}Api.get${_.capitalize(hp.name)}ProductionObject.result', Object.keys(result)
                            if options.destFolder
                                _ writePackiToDest
                                    @ result.packiFiles
                                    @ options.destFolder
                            return
                                _ resolve
                                    @ result.item
        +
    
    function writeJSONToDest
        param destPath
            :string 
        param json
            :any 
        _ fSystem.vfile().write(destPath, JSON.stringify(json, null, 2))
    +
    function writePackiToDest
        param packiFiles
            :ref PackiFiles
        param destFolder
            :string
        for var k in packiFiles
            const pf = packiFiles[k]
            if pf
                _ fSystem.vfile().write
                    _ path.join
                        @ destFolder
                        @ k
                    @ pf.contents
    +

