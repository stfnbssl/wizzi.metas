$group
    ${'$'}params &ctrl

    import express from 'express'
    import
        @ Router
        @ Request
        @ Response
        @ NextFunction
        from 'express'
    
    ${'$'}if ctrl.apiSecured || ctrl.webSecured
        import 
            ${'$'}if ctrl.apiSecured
                @ apiSecured
            ${'$'}if ctrl.webSecured
                @ webSecured
            ${'$'}if ctrl.kind == 'site'
                from '../../middlewares/index'
            ${'$'}else
                from '../../../middlewares/index'

    import
        @ sendHtml
        @ sendSuccess
        @ sendPromiseResult
        @ sendFailure
        ${'$'}if ctrl.kind == 'site'
            from '../../utils/sendResponse'
        ${'$'}else
            from '../../../utils/sendResponse'

    import
        @ restParamsCheck
        ${'$'}if ctrl.kind == 'site'
            from '../../utils/rest'
        ${'$'}else
            from '../../../utils/rest'

    import
        @ FcError
        @ SYSTEM_ERROR
        ${'$'}if ctrl.kind == 'site'
            from '../../utils/error'
        ${'$'}else
            from '../../../utils/error'

    import
        @ statusCode
        ${'$'}if ctrl.kind == 'site'
            from '../../utils'
        ${'$'}else
            from '../../../utils'

    ${'$'}hook imports
    +
    function makeHandlerAwareOfAsyncErrors
            param handler
            return 
                async-function 
                    param request
                    param response
                    param next
                    $$ loog 'makeHandlerAwareOfAsyncErrors called'
                    try 
                        await 
                            _ handler(request, response, next)
                        $$ loog 'makeHandlerAwareOfAsyncErrors ok'
                    catch error
                        if error instanceof FcError
                            _ response.status(statusCode.BAD_REQUEST).send
                                { 
                                    @ code error.code
                                    @ message error.message
                                    @ data
                                        || 
                                            + error.data
                                            { 
                        else
                            const fcError = new FcError(SYSTEM_ERROR)
                            _ response.status(statusCode.BAD_REQUEST).send
                                { 
                                    @ code fcError.code
                                    @ message error.message
                                    @ data
                                        || 
                                            + fcError.data
                                            { 
    +
    export
        class ${'$'}{ctrl.name}Controller
            +
            p path = '${'$'}{ctrl.path}'
            +
            p router = Router()
            ${'$'}if ctrl.modelName
                +
                p ${'$'}{ctrl.modelName}Model
            +
            ${'$'}hook properties
            +
            => initialize
                param app
                param initValues
                warn 'Entering ${'$'}{ctrl.name}Controller.initialize'
                ${'$'}if ctrl.modelName
                    set this.${'$'}{ctrl.modelName}Model 
                        _ Get${'$'}{ctrl.modelName}Model
                ${'$'}hook
            
            ${'$'}hook handlers