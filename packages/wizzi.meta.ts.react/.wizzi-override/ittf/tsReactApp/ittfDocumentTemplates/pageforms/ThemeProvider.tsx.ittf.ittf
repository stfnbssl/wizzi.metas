$group
    # taken from https://github.com/expo/snack/blob/main/website/src/client/components/ThemeProvider.tsx
    # modified
    ${'$'}
        var usePreferences = false;
        var md = {
            aphrodite: true,
            name: "ThemeProvider",
            props: [
                { name: "style", type: "any", optional: true },
                { name: "className", type: "string", optional: true },
                { name: "theme", type: "ThemeName", ref: true, optional: true },
                { name: "children", type: "node" }
            ]
        }
    v08/ts/react/function${'('}&md)
        ${'$'}append imports
            import
                @ colors
                @ shadows
                from '@expo/styleguide'
            import mapKeys from 'lodash/mapKeys'
            ${'$'}if usePreferences
                import
                    @ usePreferences
                    from '../features/preferences/index'
            +
            :type Colors
                :typeof lightColors
            +
            :type ColorName
                :keyof
                    :typeof lightColors
            +
            :type Shadows
                :typeof lightShadows
            +
            :type ShadowName
                :keyof
                    :typeof lightShadows
            +
            const lightColors
                {
                    @ primary colors.primary[500]
                    @ secondary colors.black
                    @ error colors.semantic.error
                    @ warning colors.semantic.warning
                    @ success colors.semantic.success
                    @ 'primary-text' colors.black
                    @ 'secondary-text' colors.black
                    @ 'error-text' colors.black
                    @ 'warning-text' colors.black
                    @ 'success-text' colors.black
                    @ text colors.gray[900]
                    @ soft colors.gray[500]
                    @ 'soft-text' colors.black
                    @ background '#F9F9F9'
                        # semantic.background offered too little contrast with content
                        # background: colors.semantic.background,
                    @ content colors.white
                    @ hover colors.gray[100]
                    @ disabled colors.gray[300]
                    @ selected colors.primary[500]
                    @ 'selected-text' colors.black
                    @ border colors.semantic.border
            +
            const lightShadows
                {
                    @ popover shadows.popover
                    @ small shadows.small
                # Use custom colors for dark theme which are not
                # so saturated and blue-ish
                # const darkGray = colors.gray;
            +
            const darkGray
                {
                    @ 100 '#F5F5F5'
                    @ 200 '#EBEBEB'
                    @ 250 '#DDDDDD'
                    @ 300 '#CFCFCF'
                    @ 400 '#B0B0B0'
                    @ 500 '#8F8F8F'
                    @ 600 '#5C5C5C'
                    @ 700 '#3B3B3B'
                    @ 800 '#2F2F2F'
                    @ 900 '#212121'
                # Use custom colors for dark theme which are not
                # so saturated and blue-ish
                # const darkGray = colors.gray;
            +
            const darkColors
                :ref Colors
                =
                    {
                        @ primary colors.primary[400]
                        @ secondary colors.white
                        @ error colors.red[500]
                        @ warning colors.yellow[500]
                        @ success colors.green[600]
                        @ 'primary-text' colors.white
                        @ 'secondary-text' colors.black
                        @ 'error-text' colors.white
                        @ 'warning-text' colors.white
                        @ 'success-text' colors.white
                        @ text darkGray[200]
                        @ soft darkGray[500]
                        @ 'soft-text' colors.black
                        @ background darkGray[900]
                        @ content darkGray[800]
                        @ hover darkGray[700]
                        @ disabled darkGray[600]
                        @ selected colors.white
                        @ 'selected-text' darkGray[800]
                        @ border darkGray[700]
            +
            const darkShadows
                :ref Shadows
                =
                    {
                        @ popover shadows.popover
                        @ small 'none'
            +
            export
                :type ThemeName
                    :union
                        :literal 'light'
                        :literal 'dark'
            +
            export
                function c
                    param color
                        :ref ColorName
                    param theme
                        :ref ThemeName
                        :optional
                    if theme
                        const colors
                            iif theme === 'dark'
                                then darkColors
                                else lightColors
                        return colors[color]
                    else
                        return
                            `lit
                                + var(--color-
                                @ color
                                + )
            +
            export
                function s
                    param shadow
                        :ref ShadowName
                    param theme
                        :ref ThemeName
                        :optional
                    if theme
                        const shadows
                            iif theme === 'dark'
                                then darkShadows
                                else lightShadows
                        return shadows[shadow]
                    else
                        return
                            `lit
                                + var(--shadow-
                                @ shadow
                                + )
        ${'$'}append styles_aphrodite
            { container
                @ height '100%'
                @ width '100%'
            { light
                _ ...mapKeys
                    @ lightColors
                    =>
                        param _
                        param key
                        `lit
                            + --color-
                            @ key
                            +
                _ ...mapKeys
                    @ lightShadows
                    =>
                        param _
                        param key
                        `lit
                            + --shadow-
                            @ key
                            +
            { dark
                _ ...mapKeys
                    @ darkColors
                    =>
                        param _
                        param key
                        `lit
                            + --color-
                            @ key
                            +
                _ ...mapKeys
                    @ darkShadows
                    =>
                        param _
                        param key
                        `lit
                            + --shadow-
                            @ key
                            +
        const [prefs]
            iif theme
                then
                    [
                        {
                            @ theme
                ${'$'}if usePreferences
                    else usePreferences()
                ${'$'}else
                    else
                        [
                            {
                                @ theme 'light'

            # eslint-disable-next-line react-hooks/rules-of-hooks
        return
            div
                @ className
                    _ classnames
                        _ css
                            @ style || styles.container
                            iif prefs.theme === 'dark'
                                then styles.dark
                                else styles.light
                        @ className
                + {children}
