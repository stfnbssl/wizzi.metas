$group
    import 
        as React
        from 'react'
    const 
        { 
            @ useCallback
            @ useRef
            @ useState
            @ useMemo
            @ useEffect
        = React
    import 
        @ Pane
        from './pane'
    import 
        @ Resizer
        from './resizer'
    import 
        @ ClientPosition
        @ useDragState
        @ DragState
        from './util'
    const DEFAULT_MIN_SIZE = 50
    export 
        :interface SplitPaneProps
            :p split
                :optional 
                :union 
                    :literal 'horizontal'
                    :literal 'vertical'
            :p className
                :optional 
                :string 
            :p children
                :[ 
                    :ref React.ReactChild
            :p defaultSizes
                :optional 
                :[ 
                    :number 
            :p minSize
                :optional 
                :union 
                    :number 
                    :[ 
                        :number 
            :p style
                :optional 
                :ref React.CSSProperties
            :p onDragStarted
                :optional 
                :=> 
                    :void 
            :p onChange
                :optional 
                :=> 
                    :void 
                    param sizes
                        :[ 
                            :number 
            :p onDragFinished
                :optional 
                :=> 
                    :void 
                    param sizes
                        :[ 
                            :number 
    export 
        :interface SplitPaneResizeOptions
            :extends SplitPaneProps
            :p split
                :union 
                    :literal 'horizontal'
                    :literal 'vertical'
            :p className
                :string 
    :interface ResizeState
        :p index
            :number 
    function getNodeKey
        param node
            :ref React.ReactChild
        param index
            :number 
        :return
            :string 
        if typeof node === 'object' && node && node.key != null
            return 'key.' + node.key
        return 'index.' + index
    function getMinSize
        param index
            :number 
        param minSizes
            :union 
                :number 
                :[ 
                    :number 
            :optional 
        :return
            :number 
        if typeof minSizes === 'number'
            if minSizes > 0
                return minSizes
        else
            if minSizes instanceof Array
                const value = minSizes[index]
                if value > 0
                    return value
        return DEFAULT_MIN_SIZE
    function getDefaultSize
        param index
            :number 
        param defaultSizes
            :[ 
                :number 
            :optional 
        :return
            :number 
        if defaultSizes
            const value = defaultSizes[index]
            if value >= 0
                return value
        return 1
    function move
        param sizes
            :[ 
                :number 
        param index
            :number 
        param offset
            :number 
        param minSizes
            :union 
                :number 
                :[ 
                    :number 
                :undefined 
        :return
            :number 
        if !offset || index < 0 || index + 1 >= sizes.length
            return 0
        const firstMinSize = getMinSize(index, minSizes)
        const secondMinSize = getMinSize(index + 1, minSizes)
        const firstSize = sizes[index] + offset
        const secondSize = sizes[index + 1] - offset
        if offset < 0 && firstSize < firstMinSize
            const missing = firstSize - firstMinSize
                # offset is negative, so missing and pushed are, too
            const pushed = move(sizes, index - 1, missing, minSizes)
            set offset -= missing - pushed
        else
            if offset > 0 && secondSize < secondMinSize
                const missing = secondMinSize - secondSize
                const pushed = move(sizes, index + 1, missing, minSizes)
                set offset -= missing - pushed
        set sizes[index] += offset
        set sizes[index + 1] -= offset
        return offset
    const defaultProps
        { 
            @ split
                + 'vertical'
                    :as 
                        :ref const
            @ className ''
    function useSplitPaneResize
        param options
            :ref SplitPaneResizeOptions
        :return
            :{ 
                :p childPanes
                    :[ 
                        :{ 
                            :p key
                                :string 
                            :p node
                                :ref React.ReactNode
                            :p ref
                                :ref React.RefObject
                                    :param 
                                        :ref HTMLDivElement
                            :p size
                                :number 
                            :p minSize
                                :number 
                :p resizeState
                    :union 
                        :ref ResizeState
                        :null 
                :p handleDragStart
                    :=> 
                        :void 
                        param index
                            :number 
                        param pos
                            :ref ClientPosition
        const 
            { 
                @ children
                @ split
                @ defaultSizes
                @ minSize minSizes
                @ onDragStarted
                @ onChange
                @ onDragFinished
            = options
        const [sizes, setSizes]
            _ useState
                new Map
                    :param string
                    :param number
        const paneRefs
            _ useRef
                new Map
                    :param string
                    :param 
                        :ref React.RefObject
                            :param 
                                :ref HTMLDivElement
        const getMovedSizes
            _ useCallback
                => 
                    param dragState
                        :union 
                            :ref DragState
                                :param 
                                    :ref ResizeState
                            :null 
                    :return
                        :[ 
                            :number 
                    const collectedSizes
                        _ children.map
                            => 
                                param node
                                param index
                                @expr sizes.get(getNodeKey(node, index)) || getDefaultSize(index, defaultSizes)
                    if dragState
                        const 
                            { 
                                @ offset
                                { extraState
                                    @ index
                            = dragState
                        _ move(collectedSizes, index, offset, minSizes)
                    return collectedSizes
                [ 
                    @ children
                    @ defaultSizes
                    @ minSizes
                    @ sizes
        const handleDragFinished
            _ useCallback
                => 
                    param dragState
                        :ref DragState
                            :param 
                                :ref ResizeState
                    const movedSizes = getMovedSizes(dragState)
                    _ setSizes
                        new Map
                            _ children.map
                                => 
                                    param node
                                    param index
                                    :return
                                        :tuple 
                                            :string 
                                            :number 
                                    [ 
                                        @ getNodeKey(node, index)
                                        @ movedSizes[index]
                    if onDragFinished
                        _ onDragFinished(movedSizes)
                [ 
                    @ children
                    @ getMovedSizes
                    @ onDragFinished
        const [dragState, beginDrag]
            _ useDragState
                :param 
                    :ref ResizeState
                @ split
                @ handleDragFinished
        const movedSizes
            _ useMemo
                => 
                    _ getMovedSizes(dragState)
                [ 
                    @ dragState
                    @ getMovedSizes
        const resizeState
            iif dragState
                then dragState.extraState
                else null
        _ useEffect
            => 
                if onChange && dragState
                    _ onChange(movedSizes)
            [ 
                @ dragState
                @ movedSizes
                @ onChange
        const childPanes
            _ useMemo
                => 
                    const prevPaneRefs = paneRefs.current
                    set paneRefs.current =
                        new Map
                            :param string
                            :param 
                                :ref React.RefObject
                                    :param 
                                        :ref HTMLDivElement
                    return 
                        _ children.map
                            => 
                                param node
                                param index
                                const key = getNodeKey(node, index)
                                const ref = prevPaneRefs.get(key) || React.createRef()
                                _ paneRefs.current.set(key, ref)
                                const minSize = getMinSize(index, minSizes)
                                return 
                                    { 
                                        @ key
                                        @ node
                                        @ ref
                                        @ minSize
                [ 
                    @ children
                    @ minSizes
        const childPanesWithSizes
            _ useMemo
                => 
                    _ childPanes.map
                        => 
                            param child
                            param index
                            const size = movedSizes[index]
                            return 
                                { 
                                    @ ...child
                                    @ size
                [ 
                    @ childPanes
                    @ movedSizes
        const handleDragStart
            _ useCallback
                => 
                    param index
                        :number 
                    param pos
                        :ref ClientPosition
                    :return
                        :void 
                    const sizeAttr
                        iif split === 'vertical'
                            then 'width'
                            else 'height'
                    const clientSizes
                        new Map
                            _ childPanes.map
                                => 
                                    { 
                                        @ key
                                        @ ref
                                    :return
                                        :tuple 
                                            :string 
                                            :number 
                                    const size
                                        iif ref.current
                                            then ref.current.getBoundingClientRect()[sizeAttr]
                                            else 0
                                    return [key, size]

                    if onDragStarted
                        _ onDragStarted()
                    _ beginDrag
                        @ pos
                        { 
                            @ index
                    _ setSizes(clientSizes)
                [ 
                    @ beginDrag
                    @ childPanes
                    @ onDragStarted
                    @ split
        return 
            { 
                @ childPanes childPanesWithSizes
                @ resizeState
                @ handleDragStart
    export 
        const SplitPane
            _ React.memo
                => 
                    param props
                        :ref SplitPaneProps
                    const options
                        { 
                            @ ...defaultProps
                            @ ...props
                    const 
                        { 
                            @ split
                            @ className
                            @ style styleProps
                        = options
                    const 
                        { 
                            @ childPanes
                            @ resizeState
                            @ handleDragStart
                        = useSplitPaneResize(options)
                    const splitStyleProps
                        :ref React.CSSProperties
                        =
                            iif split === 'vertical'
                                then
                                    { 
                                        @ left 0
                                        @ right 0
                                        @ flexDirection 'row'
                                else
                                    { 
                                        @ bottom 0
                                        @ top 0
                                        @ flexDirection 'column'
                                        @ minHeight '100%'
                                        @ width '100%'
                    const style
                        :ref React.CSSProperties
                        =
                            { 
                                @ display 'flex'
                                @ flex 1
                                @ height '100%'
                                @ position 'absolute'
                                @ outline 'none'
                                @ overflow 'hidden'
                                @ ...splitStyleProps
                                @ ...styleProps
                    const classes
                        [ 
                            @ 'SplitPane'
                            @ split
                            @ className
                            ._ join
                                @ ' '
                    const dragLayerStyle
                        :ref React.CSSProperties
                        =
                            { 
                                @ position 'absolute'
                                @ top 0
                                @ right 0
                                @ bottom 0
                                @ left 0
                    const dragLayerClasses
                        [ 
                            @ 'DragLayer'
                            @ split
                            iif resizeState
                                then 'resizing'
                                else ''
                            @ className
                            ._ join
                                @ ' '
                    const entries
                        :[ 
                            :ref React.ReactNode
                        = []
                    _ childPanes.forEach
                        => 
                            { 
                                @ key
                                @ node
                                @ ref
                                @ size
                                @ minSize
                            param index
                            if index !== 0
                                const resizing = resizeState && resizeState.index === index - 1
                                _ entries.push
                                    < Resizer 
                                        @ key {'resizer.' + index}
                                        @ split {split}
                                        @ className
                                            op+ 
                                                + className
                                                ( 
                                                    iif resizing
                                                        then ' resizing'
                                                        else ''
                                        @ index {index - 1}
                                        @ onDragStarted {handleDragStart}
                            _ entries.push
                                < Pane 
                                    @ key {'pane.' + key}
                                    @ forwardRef {ref}
                                    @ size {size}
                                    @ minSize {minSize}
                                    @ split {split}
                                    @ className {className}
                                    + {node}
                    # _ console.log('SplitPane', 'style', style)
                    return 
                        div 
                            @ className {classes}
                            @ style {style}
                            div 
                                @ className {dragLayerClasses}
                                @ style {dragLayerStyle}
                            + {entries}
    set SplitPane.displayName = 'SplitPane'