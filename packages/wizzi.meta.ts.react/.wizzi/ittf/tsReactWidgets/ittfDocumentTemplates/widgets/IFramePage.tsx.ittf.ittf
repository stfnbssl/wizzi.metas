$group

    import React from 'react'
    import 
        @ connect
        from 'react-redux'
    export
        :type IFramePageProps
            :{ 
                :p content
                    :optional 
                    :string 
                :p css
                    :optional 
                    :string 
                :p styleSheets
                    :optional 
                    :[ 
                        :string 
    export
        class IFramePage
            super React.Component
                :param 
                    :ref IFramePageProps
            p ifr
                :any 
            p styleEl
                :any 
            p cssNode
                :any 
            m componentDidMount
                $$ loog 'componentDidMount.this.ifr', this.ifr
                $$ loog '_updateContent.this.ifr.contentWindow', this.ifr.contentWindow
                const prevSS = this.props.styleSheets || []
                _ this._updateStylesheets(prevSS)
                if this.props.css
                    _ this._updateCss(this.props.css)
                if this.props.content
                    _ this._updateContent(this.props.content)
            m componentWillReceiveProps
                param nextProps
                    :ref Props
                const prevSS = this.props.styleSheets || []
                const nextSS = nextProps.styleSheets || []
                if nextSS.join('') !== prevSS.join('')
                    _ this._updateStylesheets(nextSS)
                if nextProps.css !== this.props.css
                    _ this._updateCss(nextProps.css)
                if nextProps.content !== this.props.content
                    _ this._updateContent(nextProps.content)
            m shouldComponentUpdate
                return false
            p _updateContent
                => 
                    param content
                        :string 
                        :optional 
                    $$ loog '_updateContent.this.ifr', this.ifr
                    $$ loog '_updateContent.this.ifr.contentWindow', this.ifr.contentWindow
                    $$ loog '_updateContent.this.ifr.contentDocument', this.ifr.contentDocument
                    _ this.ifr.setAttribute('srcdoc', content)
                        #
                            # 
                            # const document = this.ifr.contentDocument;
                            # const head = document.getElementsByTagName('head')[0];
                            # document.body.innerHTML = this.props.content;
                            # 
            p _updateStylesheets
                => 
                    param styleSheets
                        :any 
                    const document = this.ifr.contentDocument
                    if document
                        const head = document.getElementsByTagName('head')[0]
                        const links = head.querySelectorAll('link')
                        for let i = 0, l = links.length; i < l; i++
                            const link = links[i]
                            _ link.parentNode.removeChild(link)
                        if styleSheets && styleSheets.length
                            _ styleSheets.forEach
                                => 
                                    param href
                                        :string 
                                    const link = document.createElement('link')
                                    _ link.setAttribute('rel', 'stylesheet')
                                    _ link.setAttribute('type', 'text/css')
                                    _ link.setAttribute('href', href)
                                    _ head.appendChild(link)
            p _updateCss
                => 
                    param css
                        :string 
                        :optional 
                    const document = this.ifr.contentDocument
                    if document
                        const head = document.getElementsByTagName('head')[0]
                        if !this.styleEl
                            const el = document.createElement('style')
                            set el.type = 'text/css'
                            _ head.appendChild(el)
                            set this.styleEl = el
                        const el = this.styleEl
                        if el.styleSheet
                            set el.styleSheet.cssText = css
                        else
                            const cssNode = document.createTextNode(css)
                            if this.cssNode
                                _ el.removeChild(this.cssNode)
                            _ el.appendChild(cssNode)
                            set this.cssNode = cssNode
            m render
                return 
                    div 
                        @ style
                            { 
                                @ width '100%'
                                @ height '100%'
                        iframe 
                            @ frameBorder {0}
                            @ sandbox "allow-scripts"
                            @ style
                                { 
                                    @ width '100%'
                                    @ height '100%'
                            @ ref
                                => 
                                    param f
                                    set this.ifr = f
    export-default IFramePage
