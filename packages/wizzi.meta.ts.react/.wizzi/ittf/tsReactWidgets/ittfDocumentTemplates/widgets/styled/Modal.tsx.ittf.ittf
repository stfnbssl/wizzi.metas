$group

    ${'$'}
        var md = {
            styled: true,
            isPure: true,
            name: "Modal",
            props: [
                { name: "visible", type: "boolean" },
                { name: "onDismiss", type: "handler", optional:true },
                { name: "children", type: "node", optional:true }
            ],
            stateProps: [
                { name: "rendered", type: "boolean" },
                { name: "initial", type: "boolean" },
            ]
        }

    v08/ts/react/component${'('}&md)
        +
        m getDerivedStateFromProps
            static
            param props
                :ref ModalProps
            return 
                iif props.visible
                    then
                        { 
                            @ rendered true
                            @ initial false
                    else null
        +
        p state
            { 
                @ rendered this.props.visible
                @ initial !this.props.visible
        +
        m componentDidMount
            _ document.body.appendChild(this._container)
            _ document.addEventListener('keydown', this._handleKeyDown)
        +
        m componentDidUpdate
            param prevProps
                :ref ModalProps
            if this.props.visible !== prevProps.visible
                _ clearTimeout(this._timer)
                if !this.props.visible
                    set this._timer =
                        _ setTimeout
                            => 
                                _ this.setState
                                    { 
                                        @ rendered false
                            @ 300
        +
        m componentWillUnmount
            _ document.body.removeChild(this._container)
            _ document.removeEventListener('keydown', this._handleKeyDown)
        +
        p _container
            _ document.createElement('div')
        +
        p _content
            _ React.createRef
                :param 
                    :ref HTMLDivElement
        +
        p _timer
            :any 
        +
        => _handleDismiss
            param e
                :ref React.MouseEvent
                    :param 
                        :ref HTMLDivElement
            if 
                test
                    && 
                        + this._content.current && this._content.current !== e.target
                        _ this._content.current.contains
                            @expr e.target
                                :as 
                                    :ref Node
                return 
            _ this.props.onDismiss?.()
        +
        => _handleKeyDown
            param e
                :ref KeyboardEvent
            if e.keyCode === 27 && this.props.visible
                _ e.preventDefault()
                    # Esc was pressed
                _ this.props.onDismiss?.()
        +
        m render
            return 
                _ ReactDOM.createPortal
                    < StyledRoot 
                        @ initial {this.state.initial}
                        @ visible {this.props.visible}
                        @ onClick {this._handleDismiss}
                        < StyledContent 
                            @ ref {this._content}
                            { 
                                iif this.state.rendered
                                    then this.props.children
                                    else null
                    @ this._container

        ${'$'}append styles           
            :interface RootStyleProps    
                :p initial
                    :boolean
                :p visible
                    :boolean

            styled StyledRoot .div<RootStyleProps>
                position fixed
                top 0
                left 0
                right 0
                bottom 0
                color #fff
                z-index 999
                transition-property opacity
                transition-duration 200ms
                -webkit-font-smoothing antialiased
                background-color
                    => props.initial ? "rgba(24, 29, 37, 0.8)" : "inherit"
                opacity
                    => props.visible ? "1" : "0"
                pointer-events
                    => props.visible ? "auto" : "none"

            styled StyledContent .div
                width 100%
                height 100%
                display flex
                align-items center
                justify-content center

