$group

    ${'$'}if wzCtx.Build.useWizziJsonFactory
        +
        export
            async-function scanIttfDocument
                param mainIttf
                    :string
                param packiFiles
                    :ref packiTypes.PackiFiles
                param rootFolder
                    :string
                :return
                    :ref Promise
                        :param
                            :ref ittfGraph.IttfDocumentGraph
                throw new Error(myname + '.scanIttfDocument not yet implemented')
    +
    export
        async-function scanIttfDocumentFs
            param filePath
                :string
            param rootFolder
                :string
            :return
                :ref Promise
                    :param
                        :ref ittfGraph.IttfDocumentGraph
            return
                new Promise
                    =>
                        param resolve
                        param reject
                        _ ittfScanner.scanIttfDocument
                            @ filePath
                            {
                                @ rootFolder
                            =>
                                param err
                                param result
                                if err
                                    return reject(err)
                                _ resolve(result)
    +
    export
        async-function scanIttfFolder
            param filePath
                :string
            param rootFolder
                :string
            :return
                :ref Promise
                    :param
                        :ref ittfScanner.FolderBrowseResult
            return
                new Promise
                    =>
                        param resolve
                        param reject
                        _ ittfScanner.browseFolder
                            @ filePath
                            {
                                @ rootFolder
                            =>
                                param err
                                param result
                                if err
                                    return reject(err)
                                _ resolve(result)
    +
    export
        async-function scanIttfDocumentDb
            param owner
                :string
            param name
                :string
            param rootFolder
                :string
            :return
                :ref Promise
                    :param
                        :ref ittfGraph.IttfDocumentGraph
            throw new Error(myname + '.scanIttfDocumentDb not yet implemented')

    +
    export
        async-function folderBrowseToPackiFiles
            param folderBrowse
                :ref ittfScanner.FolderBrowseResult
            :return
                :ref Promise
                    :param 
                        :ref packiTypes.PackiFiles
            return 
                new Promise
                    => 
                        param resolve
                        param reject
                        const packiFiles
                            :ref packiTypes.PackiFiles
                            =
                                { 
                        _ folderBrowse.fsitems.map
                            => 
                                param fsitem
                                if fsitem.isFolder == false
                                    set packiFiles[fsitem.uri] =
                                        { 
                                            @ type "CODE"
                                            @ contents fsitem.content
                        _ resolve(packiFiles)                                    
    +
    export
        async-function folderFsToPackiFiles
            param folderPath
                :string
            :return
                :ref Promise
                    :param 
                        :ref packiTypes.PackiFiles
            r_promise${'('}
                const fsfile = fSystem.vfile()
                const packiFiles
                    :ref packiTypes.PackiFiles
                    =
                        { 
                try
                    _  fsfile.getFiles
                        @ folderPath
                        {
                            @ deep true
                            @ documentContent true
                        =>
                            param err
                                :any
                            param result
                                :ref fSystem.FileDef[]
                            if (err)
                                error "wizzi.productions.folderFsToPackiFiles", err
                                r_reject${'('})
                                    {
                                        @ message "wizzi.productions.folderFsToPackiFiles"
                                        @ err
                            _ result.map
                                =>
                                    param fsitem
                                    set packiFiles[fsitem.relPath]
                                        {
                                            @ type "CODE"
                                            @ contents fsitem.content || ""
                            $$ loog"packiFiles", Object.keys(packiFiles)    
                            r_resolve${'('} packiFiles )
                catch ex
                    r_reject${'('})
                        {
                            @ message "wizzi.productions.folderFsToPackiFiles"
                            @ err ex

    +
    export
        async-function packiFilesToFolderFs
            param folderPath
                :string
            param files
                :ref packiTypes.PackiFiles
            :return
                :ref Promise
                    :param 
                        :any
            r_promise_try_catch${'('} wizzi.productions.packiFilesTofolderFs )
                const fsfile = fSystem.vfile()
                _ fsfile.deleteFolder
                    @ folderPath
                    a_cb_promise${'('} result, :any, , wizzi.productions.packiFilesTofolderFs.fsfile.deleteFolder )
                        for var k in files
                            var contents = files[k].contents
                            _  fsfile.write
                                _ path.join
                                    @ folderPath
                                    @ k
                                @ contents
                                $$ NO a_cb_promise${'('} result, :any, , wizzi.productions.packiFilesTofolderFs.fsfile.write )
                        r_resolve${'('} )
                            {
                                @ message "Folder replaced"