$group

    ${'$'}
        var ctrl = {
            name: 'Production',
            path: '/api/v1/wizzi/production',
            apiSecured: wzCtx.Build.useAuthentication && wzCtx.App.isLocal == false
        }
        var myname = 'features/wizzi/controller/productions';
    
    v08/ts/controller${'('}&ctrl)
        ${'$'}append imports
            import fs
                from 'fs'
            import path
                from 'path'
            import
                @ ArtifactRequest
                @ MetaContext
                from '../types'
            import
                as WizziFactory
                from '../factory'
            import
                as wizziProds
                from '../productions'
            ${'$'}if wzCtx.Build.useWizziJsonFactory
                import
                    @ packiTypes
                    from '../../packi'
            import
                @ config
                from '../../config'
            import
                @ resolveContexts
                from '../api/context'
            import
                @ file
                from '@wizzi/factory'
            const myname = '${'$'}{myname}'

        ${'$'}if wzCtx.Build.useAuthentication
            v08/ts/route_api_secured${'('} post, /artifact, this.artifact)
            v08/ts/route_api_secured${'('} post, /mtree, this.mTree)
            v08/ts/route_api_secured${'('} post, /mtreescript, this.mTreeBuildupScript)
            v08/ts/route_api_secured${'('} post, /mtreescan, this.mTreeScan)
        ${'$'}else
            v08/ts/route${'('} post, /artifact, this.artifact)
            v08/ts/route${'('} post, /mtree, this.mTree)
            v08/ts/route${'('} post, /mtreescript, this.mTreeBuildupScript)
            v08/ts/route${'('} post, /mtreescan, this.mTreeScan)
        
        ${'$'}if wzCtx.Build.useWizziJsonFactory
            ${'$'}if wzCtx.Build.useAuthentication
                v08/ts/route_api_secured${'('} post, /wrapittf, this.wrapIttfText)
            ${'$'}else
                v08/ts/route${'('} post, /wrapittf, this.wrapIttfText)
        
        ${'$'}append handlers
            v08/ts/handler${'('} artifact )
                const artifactRequest
                    :ref ArtifactRequest
                    = request.body
                $$ loogmyname + '.handler.artifact.received request (keys)', Object.keys(artifactRequest)
                _ resolveContexts
                    @ artifactRequest.contextItems
                    ._ then
                        =>
                            param context
                                :any
                            $$ loogmyname, 'handler.artifact.resolvedContext', Object.keys(context)
                            if artifactRequest.ittfDocument.source == 'fs'
                                _ wizziProds.generateArtifactFs
                                    _ path.join
                                        @ config.ittfPath
                                        @ artifactRequest.ittfDocument.path as string
                                    @ context
                                    ._ then
                                        =>
                                            param generatedArtifact
                                            $$ loog myname, 'generateArtifactFs.result', generatedArtifact
                                            _ sendSuccess
                                                @ response
                                                @ generatedArtifact
                                    v08/ts/catch_fail${'('} ${'$'}{myname}.handler.artifact.wizziProds.generateArtifactFs )
                            ${'$'}if wzCtx.Build.useWizziJsonFactory
                                elif artifactRequest.ittfDocument.source == 'packi'
                                    _ wizziProds.generateArtifact
                                        @ artifactRequest.ittfDocument.mainIttf as string 
                                        @ artifactRequest.ittfDocument.packiFiles as packiTypes.PackiFiles
                                        @ context
                                        ._ then
                                            =>
                                                param generatedArtifact
                                                    :any
                                                $$ loog myname, 'generateArtifact.result', generatedArtifact
                                                _ sendSuccess
                                                    @ response
                                                    @ generatedArtifact
                                        v08/ts/catch_fail${'('} ${'$'}{myname}.handler.artifact.wizziProds.generateArtifact )
                            elif artifactRequest.ittfDocument.source == 'db'
                                _ wizziProds.generateArtifactDb
                                    @ artifactRequest.ittfDocument.mainIttf as string 
                                    @ artifactRequest.ittfDocument.path as string
                                    @ context
                                    ._ then
                                        =>
                                            param generatedArtifact
                                                :any
                                            $$ loog myname, 'generateArtifactDb.result', generatedArtifact
                                            _ sendSuccess
                                                @ response
                                                @ generatedArtifact
                                    v08/ts/catch_fail${'('} ${'$'}{myname}.handler.artifact.wizziProds.generateArtifact )
                    v08/ts/catch_fail${'('} ${'$'}{myname}.handler.artifact.resolveContexts )

            v08/ts/handler${'('} mTree )
                const artifactRequest
                    :ref ArtifactRequest
                    = request.body
                $$ loog myname + '.handler.mTree.received request (keys)', Object.keys(artifactRequest)
                _ resolveContexts
                    @ artifactRequest.contextItems
                    ._ then
                        =>
                            param context
                                :any
                            $$ loog myname, 'handler.mTree.resolvedContext', Object.keys(context)
                            if artifactRequest.ittfDocument.source == 'fs'
                                _ wizziProds.mTreeFs
                                    _ path.join
                                        @ config.ittfPath
                                        @ artifactRequest.ittfDocument.path as string
                                    @ context
                                    ._ then
                                        =>
                                            param mTree
                                            $$ loog myname, '.handle.mTreeFs.result', mTree.mTreeIttf
                                            _ sendSuccess
                                                @ response
                                                {
                                                    @ mTree mTree.mTreeIttf
                                    v08/ts/catch_fail${'('} ${'$'}{myname}.handler.mTree.wizziProds.mTreeFs )
                            ${'$'}if wzCtx.Build.useWizziJsonFactory
                                elif artifactRequest.ittfDocument.source == 'packi'
                                    _ wizziProds.mTree
                                        @ artifactRequest.ittfDocument.mainIttf as string 
                                        @ artifactRequest.ittfDocument.packiFiles as packiTypes.PackiFiles
                                        @ context
                                        ._ then
                                            =>
                                                param mTree
                                                    :any
                                                $$ loog myname, '.handle.mTree.result', mTree.mTreeIttf
                                                _ sendSuccess
                                                    @ response
                                                    {
                                                        @ mTree mTree.mTreeIttf
                                        v08/ts/catch_fail${'('} ${'$'}{myname}.handler.mTree.wizziProds.mTree )
                            elif artifactRequest.ittfDocument.source == 'db'
                                _ wizziProds.mTreeDb
                                    @ artifactRequest.ittfDocument.mainIttf as string 
                                    @ artifactRequest.ittfDocument.path as string
                                    @ context
                                    ._ then
                                        =>
                                            param mTree
                                                :any
                                            $$ loog myname, '.handle.mTreeDb.result', mTree.mTreeIttf
                                            _ sendSuccess
                                                @ response
                                                {
                                                    @ mTree mTree.mTreeIttf
                                    v08/ts/catch_fail${'('} ${'$'}{myname}.handler.mTree.wizziProds.mTreeDb )
                    v08/ts/catch_fail${'('}} ${'$'}{myname}.handler.mTree.resolveContexts )

            v08/ts/handler${'('} mTreeBuildupScript )
                const artifactRequest
                    :ref ArtifactRequest
                    = request.body
                $$ loog myname + '.handler.mTreeBuildupScript.received request (keys)', Object.keys(artifactRequest)
                _ resolveContexts
                    @ artifactRequest.contextItems
                    ._ then
                        =>
                            param context
                                :any
                            $$ loog myname, 'handler.mTreeBuildupScript.resolvedContext', Object.keys(context)
                            if artifactRequest.ittfDocument.source == 'fs'
                                _ wizziProds.mTreeBuildupScriptFs
                                    _ path.join
                                        @ config.ittfPath
                                        @ artifactRequest.ittfDocument.path as string
                                    @ context
                                    ._ then
                                        =>
                                            param mTreeBuildupScript
                                            $$ loog myname, '.handle.mTreeBuildupScriptFs.result', mTreeBuildupScript
                                            _ sendSuccess
                                                @ response
                                                @ mTreeBuildupScript
                                    v08/ts/catch_fail${'('} ${'$'}{myname}.handler.mTreeBuildupScript.wizziProds.mTreeBuildupScriptFs )
                            ${'$'}if wzCtx.Build.useWizziJsonFactory
                                elif artifactRequest.ittfDocument.source == 'packi'
                                    _ wizziProds.mTreeBuildupScript
                                        @ artifactRequest.ittfDocument.mainIttf as string 
                                        @ artifactRequest.ittfDocument.packiFiles as packiTypes.PackiFiles
                                        @ context
                                        ._ then
                                            =>
                                                param mTreeBuildupScript
                                                    :any
                                                $$ loog myname, '.handle.mTreeBuildupScript.result', mTreeBuildupScript
                                                _ sendSuccess
                                                    @ response
                                                    @ mTreeBuildupScript
                                        v08/ts/catch_fail${'('} ${'$'}{myname}.handler.mTreeBuildupScript.wizziProds.mTreeBuildupScript )
                            elif artifactRequest.ittfDocument.source == 'db'
                                _ wizziProds.mTreeBuildupScriptDb
                                    @ artifactRequest.ittfDocument.mainIttf as string
                                    @ artifactRequest.ittfDocument.path as string
                                    @ context
                                    ._ then
                                        =>
                                            param mTreeBuildupScript
                                                :any
                                            $$ loog myname, '.handle.mTreeBuildupScriptDb.result', mTreeBuildupScript
                                            _ sendSuccess
                                                @ response
                                                @ mTreeBuildupScript
                                    v08/ts/catch_fail${'('} ${'$'}{myname}.handler.mTreeBuildupScript.wizziProds.mTreeBuildupScriptDb )
                    v08/ts/catch_fail${'('} ${'$'}{myname}.handler.mTreeBuildupScript.resolveContexts )

            v08/ts/handler${'('} mTreeScan )
                const artifactRequest
                    :ref ArtifactRequest
                    = request.body
                $$ loog myname + '.handler.mTreeScan.received request (keys)', Object.keys(artifactRequest)
                var rootFolder = artifactRequest.ittfDocument.rootFolder || ''
                if artifactRequest.ittfDocument.source == 'fs'
                    _ wizziProds.scanIttfDocumentFs
                        _ path.join
                            @ config.ittfPath
                            @ artifactRequest.ittfDocument.path as string
                        @ rootFolder
                        ._ then
                            =>
                                param mTreeScan
                                $$ loog myname, '.handle.mTreeScanFs.result', Object.keys(mTreeScan)
                                _ sendSuccess
                                    @ response
                                    {
                                        @ mTreeScan mTreeScan
                        v08/ts/catch_fail${'('} ${'$'}{myname}.handler.mTreeScan.wizziProds.mTreeScanFs )
                ${'$'}if wzCtx.Build.useWizziJsonFactory
                    elif artifactRequest.ittfDocument.source == 'packi'
                        var rootFolder = artifactRequest.ittfDocument.rootFolder || ''
                        _ wizziProds.scanIttfDocument
                            @ artifactRequest.ittfDocument.mainIttf as string 
                            @ artifactRequest.ittfDocument.packiFiles as packiTypes.PackiFiles
                            @ rootFolder
                            ._ then
                                =>
                                    param mTreeScan
                                        :any
                                    $$ loog myname, '.handle.mTreeScan.result', Object.keys(mTreeScan)
                                    _ sendSuccess
                                        @ response
                                        {
                                            @ mTreeScan mTreeScan
                            v08/ts/catch_fail${'('} ${'$'}{myname}.handler.mTreeScan.wizziProds.mTreeScan )
                elif artifactRequest.ittfDocument.source == 'db'
                    var rootFolder = artifactRequest.ittfDocument.rootFolder || ''
                    _ wizziProds.scanIttfDocumentDb
                        @ artifactRequest.ittfDocument.mainIttf as string 
                        @ artifactRequest.ittfDocument.path as string
                        @ rootFolder
                        ._ then
                            =>
                                param mTreeScan
                                    :any
                                $$ loog myname, '.handle.mTreeScanDb.result', Object.keys(mTreeScan)
                                _ sendSuccess
                                    @ response
                                    {
                                        @ mTreeScan mTreeScan
                        v08/ts/catch_fail${'('} ${'$'}{myname}.handler.mTreeScan.wizziProds.mTreeScanDb )
                else
                    _ sendFailure
                        @ response
                        {
                            { err
                                @ message 'Invalid artifactRequest.ittfDocument.source ' + artifactRequest.ittfDocument.source
                        @ 501                        

            ${'$'}if wzCtx.Build.useWizziJsonFactory
                v08/ts/handler${'('} wrapIttfText )
                    _ wizziProds.wrapIttfText
                        @ request.body.schema
                        @ request.body.ittfText
                        ._ then
                            =>
                                param wrappedIttfText
                                    :string
                                $$ loog myname, '.handle.wrapIttfText.result', wrappedIttfText
                                _ sendSuccess
                                    @ response
                                    {
                                        @ wrappedIttfText wrappedIttfText
                        v08/ts/catch_fail${'('} ${'$'}{myname}.handler.mTreeScan.wizziProds.wrapIttfText )

