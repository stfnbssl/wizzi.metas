$group

    async-function getGist
        param hash
            :string
        r_promise${'('})
			var filePath = crypto.decrypt(hash)
			var kind = gistFs.gistKindFromFilePath(filePath)
			var gist = gistFs.gistInfoByPath(filePath)
			_ wizziFs.readFsItem
				@ filePath
				a_then${'('} result )
					set gist.content = result
					if isGistKind(kind)
						r_resolve${'('})
                            {
                                { data
							        @ gist gist
					else
						r_resolve${'('})
                            {
                                { data
							        @ snippet gist
                catch_reject${'('} gistFs.getGist.wizziFs.getFile )

    async-function executeGist
        param hash
            :string
        r_promise${'('})
			var filePath = crypto.decrypt(hash)
			var kind = gistFs.gistKindFromFilePath(filePath)
			var fileInfo
				_ gistFs.gistInfoByPath
					@ filePath
			if fileInfo.isIttfDocument && fileInfo.schema === 'js'
				var sessionData = {}
				var modelContext = {}
				var artifactContext = {}
				var that = this
				_ wizziProds.generateArtifactFs
					@ filePath
					@ modelContext
                    {
                        @ generator 'js/module'
                        @ artifactContext
					a_then${'('} result )
                        log 'wizziProds.generateArtifactFs.result', result
                        _ gistFs.putGistExecutable
                            @ kind
                            @ filePath
                            @ result.artifactContent
                            a_then${'('} result )
                                _ executeNodeJsGist
                                    @ hash
                                    @ result.executablePath
                                    a_then${'('} result )
                                        r_resolve${'('})
                                            @ result
                                    catch_reject${'('} gistFs.executeGist.executeNodeJsGist )
                            catch_reject${'('} gistFs.executeGist.gistFs.putGistExecutable )
                    catch_reject${'('} gistFs.executeGist.wizziProds.generateArtifactFs )
			elif fileInfo.mime === 'js'
				_ executeNodeJsGist
					@ hash
					@ filePath
                    a_then${'('} result )
					    r_resolve${'('})
                            @ result
                    catch_reject${'('} gistFs.executeGist.executeNodeJsGist )
			else
                r_reject${'('})
                    {
                        @ message 'Mime not managed ' + fileInfo.mime

    async-function executeNodeJsGist
        param hash
            :string
        param executablePath
            :string
        param response
            :any
            :optional
        r_promise${'('})
			if response
                try
                    log 'execute nodeJsExecToEventStream'
                    _ scriptManager.nodeJsExecToEventStream
                        {
                            @ scriptPath executablePath
                            [ args
                        @ response
                        a_then${'('} result )
                            r_resolve${'('})
                                @ result
                        catch_reject${'('} gistFs.executeNodeJsGist.scriptManager.nodeJsExecToEventStream )
                catch ex
                    r_reject${'('})
                        @ ex               
			else
				log 'execute nodeJsExec'
				try
                    _ scriptManager.nodeJsExec
                        {
                            @ scriptPath executablePath
                            [ args
                        a_then${'('}result)
                            r_resolve${'('})
                                {
                                    @ data result
                                    @ message 'NodeJs script executed'
                        catch_reject${'('} gistFs.executeNodeJsGist.scriptManager.nodeJsExec )
                catch ex
                    r_reject${'('})
                        @ ex