$group
    
    $
        var routeApiFragment = metaCtx.isLocal ? 'route' : 'route_api_secured';

    ${'$'}
        var ctrl = {
            name: 'ApiV1PluginProduction',
            path: '/api/v1/production/plugin',
            apiSecured: wzCtx.App.isLocal == false,
            Production: 'Plugin',
            production: 'plugin',
        }
    
    v08/ts/controller${'('} &ctrl )
            
        ${'$'}append imports
            apiv1_imports${'('} &ctrl )
            +
            const myname = 'features/production/controllers/apiv1plugin'

        v08/ts/${routeApiFragment}${'('} get, /:owner, this.getPluginProductions)
        v08/ts/${routeApiFragment}${'('} get, /checkname/:owner/:name, this.getCheckPluginName)
        v08/ts/${routeApiFragment}${'('} get, /:owner/:name, this.getPluginProduction)
        v08/ts/${routeApiFragment}${'('} put, /:id, this.putPluginProduction)
        v08/ts/${routeApiFragment}${'('} put, /packidiffs/:id, this.putPluginProductionPackiDiffs)
        v08/ts/${routeApiFragment}${'('} post, /:post, this.postPluginProduction)
        
        ${'$'}append handlers

            v08/ts/handler${'('}  getPluginProductions )

                $$ loog 'getPluginProductions.request.params', request.params
                _ getPluginProductionList
                    {
                        { query
                            @ owner request.params.owner
                    ._ then
                        =>
                            param result
                                :any
                            $$ loog 'getPluginProductions.result', result
                            _ sendSuccess
                                @ response
                                @ result
                    v08/ts/catch_send_fail${'('}  getPluginProductions )
            
            v08/ts/handler${'('}  getCheckPluginName )
                check_name${'('} plugin )

            v08/ts/handler${'('}  getPluginProduction )

                $$ loog 'getPluginProduction.request.params', request.params
                _ getPluginProduction
                    @ request.params.owner
                    @ request.params.name
                    ._ then
                        =>
                            param result
                                :any
                            $$ loog 'getPluginProduction.result', result
                            _ sendSuccess
                                @ response
                                @ result
                    v08/ts/catch_send_fail${'('}  getPluginProduction )

            v08/ts/handler${'('}  postPluginProduction )

                $$ loog 'postPluginProduction.request.params', request.params
                $$ loog 'postPluginProduction.request.body', request.body
                _ createPluginProduction
                    @ request.params.owner
                    @ request.params.name
                    @ request.body.description
                    @ JSON.stringify(request.body.packiFiles)
                    ._ then
                        =>
                            param result
                                :any
                            $$ loog 'postPluginProduction.result', result
                            _ sendSuccess
                                @ response
                                @ result
                    v08/ts/catch_send_fail${'('}  postPluginProduction )

            v08/ts/handler${'('}  putPluginProduction )

                $$ loog 'putPluginProduction.request.params', request.params
                $$ loog 'putPluginProduction.request.body', request.body
                _ updatePluginProduction
                    @ request.params.id
                    @ request.body.owner
                    @ request.body.name
                    @ request.body.description
                    @ JSON.stringify(request.body.packiFiles)
                    ._ then
                        =>
                            param result
                                :any
                            $$ loog 'putPluginProduction.result', result
                            _ sendSuccess
                                @ response
                                @ result
                    v08/ts/catch_send_fail${'('}  putPluginProduction )

            apiv1_put${'('} &ctrl )      

    apiv1_exec_update${'('} &ctrl )                          

