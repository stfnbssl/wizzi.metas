$group

    import fetch from 'node-fetch'
    import path from 'path'
    import git from 'isomorphic-git'
    import http from 'isomorphic-git/http/node'
    import
        @ createFsFromVolume
        @ Volume
        from 'memfs'
    import
        @ fSystem
        from 'wizzi-utils'
    import
        @ PackiFiles
        from '../../packi/types'
    import
        @ GithubRepoOptions
        @ CreateGithubRepoOptions
        @ CreateGithubBranchOptions
        @ ClonedGitRepository
        @ GithubApiRepository
        @ FileDiff
        @ FileDiffItem
        from '../types'
    +
    const volume = new Volume()
    +
    const fs = createFsFromVolume(volume)
    +
    set (fs as any).kind = 'filesystem'
    const wizzifs
        _ fSystem.vfile
            + fs
                :as
                    :ref fSystem.FsImpl
    +
    :type cb
        :< T
        :=>
            :void
            param err
                :any
            param result
                :ref T
        # const dir = fs.mkdtempSync(path.join(os.tmpdir(), 'test-'));
    +
    export
        async-function getRepositories
            param accessToken
                :string
            :return
                :ref Promise
                    :param
                        :[
                            :ref GithubApiRepository
            r_promise${'('})
                _ fetch
                    `lit
                        + https://api.github.com/user/repos
                    _ getOptions(accessToken)
                    ._ then
                        =>
                            param response
                            if !response.ok
                                throw new Error(response.status.toString())
                            return response.json()
                    ._ then
                        =>
                            param responseData
                                :any
                            _ resolve
                                @ responseData
                    ._ catch
                        =>
                            param err
                            _ reject
                                @ err
        # const dir = fs.mkdtempSync(path.join(os.tmpdir(), 'test-'));
    +
    export
        async-function getRepository
            param owner
                :string
            param repo
                :string
            param accessToken
                :string
            :return
                :ref Promise
                    :param any
            r_promise${'('})
                _ fetch
                    `lit
                        + https://api.github.com/repos/
                        @ owner
                        + /
                        @ repo
                        +
                    _ getOptions(accessToken)
                    ._ then
                        =>
                            param response
                            if !response.ok
                                throw new Error(response.status.toString())
                            return response.json()
                    ._ then
                        async=>
                            param responseData
                                :any
                            set responseData._revisions =
                                await
                                    _ getRevisions(owner, repo, accessToken)
                            set responseData._commits =
                                await
                                    _ getCommits(owner, repo, accessToken)
                            set responseData._contents =
                                await
                                    _ getContents(owner, repo, accessToken)
                            _ resolve
                                @ responseData
                    ._ catch
                        =>
                            param err
                            _ reject
                                @ err
    +
    export
        async-function getPackiTemplateRepositories
            :return
                :ref Promise
                    :param any
            r_promise${'('})
                _ fetch
                    `lit
                        + https://api.github.com/users/stfnbssl/repos
                    _ getOptions()
                    ._ then
                        =>
                            param response
                            if !response.ok
                                throw new Error(response.status.toString())
                            return response.json()
                    ._ then
                        =>
                            param responseData
                                :[
                                    :ref GithubApiRepository
                            return
                                _ resolve
                                    _ responseData.filter
                                        =>
                                            param value
                                            _ value.name.startsWith('packi-template-')
                    ._ catch
                        =>
                            param err
                            _ reject
                                @ err
    +
    export
        async-function createRepository
            param accessToken
                :string
            param options
                :ref CreateGithubRepoOptions
            :return
                :ref Promise
                    :param any
            r_promise${'('})
                _ fetch
                    `lit
                        + https://api.github.com/user/repos
                    _ postOptions(accessToken, options)
                    ._ then
                        =>
                            param response
                            if !response.ok
                                throw new Error(response.status.toString())
                            return response.json()
                    ._ then
                        =>
                            param responseData
                                :any
                            _ resolve
                                @ responseData
                    ._ catch
                        =>
                            param err
                            _ reject
                                @ err
    +
    export
        async-function getRevisions
            param owner
                :string
            param repo
                :string
            param accessToken
                :string
            :return
                :ref Promise
                    :param any
            r_promise${'('})
                _ fetch
                    `lit
                        + https://api.github.com/repos/
                        @ owner
                        + /
                        @ repo
                        + /git/refs/heads
                    _ getOptions(accessToken)
                    ._ then
                        =>
                            param response
                            if !response.ok
                                throw new Error(response.status.toString())
                            return response.json()
                    ._ then
                        =>
                            param responseData
                                :any
                            return responseData
                    ._ catch
                        =>
                            param err
                            _ reject
                                @ err
    +
    export
        async-function getBranches
            param owner
                :string
            param repo
                :string
            param accessToken
                :string
            :return
                :ref Promise
                    :param any
            r_promise${'('})
                _ fetch
                    `lit
                        + https://api.github.com/repos/
                        @ owner
                        + /
                        @ repo
                        + /branches
                    _ getOptions(accessToken)
                    ._ then
                        =>
                            param response
                            if !response.ok
                                throw new Error(response.status.toString())
                            return response.json()
                    ._ then
                        =>
                            param responseData
                                :any
                            _ resolve
                                @ responseData
                    ._ catch
                        =>
                            param err
                            _ reject
                                @ err
    +
    export
        async-function createBranch
            param accessToken
                :string
            param owner
                :string
            param repo
                :string
            param options
                :ref CreateGithubBranchOptions
            :return
                :ref Promise
                    :param any
            r_promise${'('})
                _ fetch
                    `lit
                        + https://api.github.com/repos/
                        @ owner
                        + /
                        @ repo
                        + /git/refs
                    _ postOptions
                        @ accessToken
                        {
                            @ ref
                                `lit
                                    + refs/heads/
                                    @ options.name
                                    + >
                            @ sha options.revisionFromHash
                    ._ then
                        =>
                            param response
                            if !response.ok
                                throw new Error(response.status.toString())
                            _ response.json()
                    ._ then
                        =>
                            param responseData
                                :any
                            return
                                _ resolve
                                    @ responseData
                    ._ catch
                        =>
                            param err
                            _ reject
                                @ err
    +
    export
        async-function cloneBranch
            param repo
                :ref GithubRepoOptions
            param branch
                :string
                = 'master'
            param kind
                :string
                = 'all'
            :return
                :ref Promise
                    :param
                        :ref ClonedGitRepository
            _ volume.reset()
            const dir = '/' + repo.name
            r_promise${'('})
                _ fs.mkdir
                    @ dir
                    async=>
                        param err
                        if err
                            return reject(err)
                        try
                            await
                                _ git.clone
                                    {
                                        @ fs
                                        @ http
                                        @ dir
                                        @ url
                                            `lit
                                                + https://github.com/
                                                @ repo.owner
                                                + /
                                                @ repo.name
                                                +
                                        @ ref
                                            `lit
                                                +
                                                @ branch
                                                +
                                        @ singleBranch true
                                        @ depth 10
                                        @ onAuth
                                            =>
                                                param url
                                                    :string
                                                return
                                                    {
                                                        @ password repo.token
                                                        # oauth2format 'github'
                            let files
                                _ wizzifs.getFiles
                                    @ dir
                                    {
                                        @ deep true
                                        @ documentContent true
                            const packies
                                :ref PackiFiles
                                =
                                    {
                            _ files.forEach
                                =>
                                    param file
                                    if file.relPath.startsWith('.git/') == false
                                        if kind === 'all' || kind === 'ittf' && file.relPath.endsWith('.ittf') == true
                                            set packies[file.relPath] =
                                                {
                                                    @ type "CODE"
                                                    @ contents
                                                        @expr file.content
                                                            :as
                                                                :string
                            const log
                                await
                                    _ git.log
                                        {
                                            @ fs
                                            @ dir
                            return
                                _ resolve
                                    {
                                        @ owner repo.owner
                                        @ name repo.name
                                        @ description ''
                                        @ branch
                                        @ files packies
                                        @ commitHistory log
                        catch ex
                            return
                                _ reject
                                    @ ex
    +
    export
        async-function updateBranch
            param packiFiles
                :ref PackiFiles
            param repo
                :ref GithubRepoOptions
            param branch
                :string
                = 'master'
            _ volume.reset()
            const dir = '/' + repo.name
            r_promise${'('})
                _ fs.mkdir
                    @ dir
                    async=>
                        param err
                        if err
                            return reject(err)
                        try
                            await
                                _ git.clone
                                    {
                                        @ fs
                                        @ http
                                        @ dir
                                        @ url
                                            `lit
                                                + https://github.com/
                                                @ repo.owner
                                                + /
                                                @ repo.name
                                                +
                                        @ ref
                                            `lit
                                                +
                                                @ branch
                                                +
                                        @ singleBranch true
                                        @ depth 10
                            let files = fs.readdirSync(dir)
                                #
                                    #
                                    # Object.keys(packiFiles).forEach(filePath=> {
                                    # if (packiFiles[filePath].type === "CODE") {
                                    # fs.writeFileSync(path.join(dir, filePath), packiFiles[filePath].contents);
                                    # }
                                    # })
                                    #
                                # let msg = await git.log({fs, dir});
                                # console.log(msg);
                            _ filesDiff
                                @ dir
                                @ packiFiles
                                async=>
                                    param err
                                    param result
                                    try
                                        _ Object.keys(result).forEach
                                            =>
                                                param entryName
                                                if result[entryName].kind === '+' || result[entryName].kind === '<>'
                                                    _ wizzifs.write
                                                        _ path.join(dir, entryName)
                                                        @expr
                                                            (
                                                                @expr result[entryName].b
                                                                    :as
                                                                        :ref FileDiffItem
                                                            . content
                                                        # fs.writeFileSync(path.join(dir, entryName), (result[entryName].b as FileDiffItem).content);
                                                else
                                                    if
                                                        test
                                                            op<
                                                                [
                                                                    @ '.gitignore'
                                                                    @ 'LICENSE'
                                                                    @ 'README.md'
                                                                    ._ indexOf
                                                                        @ entryName
                                                                + 0
                                                        _ fs.unlinkSync(path.join(dir, entryName))
                                        await
                                            _ printStatus(dir)
                                        _ Object.keys(result).forEach
                                            async=>
                                                param entryName
                                                if result[entryName].kind === '+' || result[entryName].kind === '<>'
                                                    await
                                                        _ git.add
                                                            {
                                                                @ fs
                                                                @ dir
                                                                @ filepath entryName
                                                else
                                                    if
                                                        test
                                                            op<
                                                                [
                                                                    @ '.gitignore'
                                                                    @ 'LICENSE'
                                                                    @ 'README.md'
                                                                    ._ indexOf
                                                                        @ entryName
                                                                + 0
                                                        await
                                                            _ git.remove
                                                                {
                                                                    @ fs
                                                                    @ dir
                                                                    @ filepath entryName
                                        await
                                            _ printStatus(dir)
                                        let msg
                                            await
                                                _ git.commit
                                                    {
                                                        @ fs
                                                        @ dir
                                                        @ message 'Packi git export ' + new Date().toDateString()
                                                        { author
                                                            @ name 'packi'
                                                            @ email 'packi@gmail.com'
                                        await
                                            _ printStatus(dir)
                                            # let msg = await git.listFiles({fs, dir});
                                            # let msg = await git.listFiles({fs, dir});
                                        let pushResponse
                                            await
                                                _ git.push
                                                    {
                                                        @ fs
                                                        @ http
                                                        @ dir
                                                        @ remote 'origin'
                                                        @ ref
                                                            `lit
                                                                +
                                                                @ branch
                                                        @ onAuth
                                                            =>
                                                                param url
                                                                    :string
                                                                return
                                                                    {
                                                                        @ password repo.token
                                                                        # oauth2format 'github'
                                                                        # username: repo.owner,
                                                                        # password: repo.password,
                                                                        # username: 'stfnbssl',
                                                                        # password: 'gi++++01',
                                    catch ex
                                        error 'updateBranch.push. err', ex
                                #
                                    #
                                    # Object.keys(packiFiles).forEach(filePath=> {
                                    # if (packiFiles[filePath].type === "CODE") {
                                    # fs.writeFileSync(path.join(dir, filePath), packiFiles[filePath].contents);
                                    # }
                                    # })
                                    #
                                # let msg = await git.log({fs, dir});
                                # console.log(msg);
                        catch ex
                            _ reject
                                @ ex
    +
    export
        async-function getCommits
            param owner
                :string
            param repo
                :string
            param accessToken
                :string
            :return
                :ref Promise
                    :param any
            r_promise${'('})
                _ fetch
                    `lit
                        + https://api.github.com/repos/
                        @ owner
                        + /
                        @ repo
                        + /commits
                    _ getOptions(accessToken)
                    ._ then
                        =>
                            param response
                            if !response.ok
                                throw new Error(response.status.toString())
                            _ response.json()
                    ._ then
                        =>
                            param responseData
                                :any
                            return
                                _ resolve
                                    @ responseData
                    ._ catch
                        =>
                            param err
                            _ reject
                                @ err
    +
    export
        async-function getContents
            param owner
                :string
            param repo
                :string
            param accessToken
                :string
            :return
                :ref Promise
                    :param any
            r_promise${'('})
                _ fetch
                    `lit
                        + https://api.github.com/repos/
                        @ owner
                        + /
                        @ repo
                        + /contents
                    _ getOptions(accessToken)
                    ._ then
                        =>
                            param response
                            if !response.ok
                                throw new Error(response.status.toString())
                            _ response.json()
                    ._ then
                        =>
                            param responseData
                                :any
                            return
                                _ resolve
                                    @ responseData
                    ._ catch
                        =>
                            param err
                            _ reject
                                @ err
    +
    function filesDiff
        param dir
            :string
        param packiFiles
            :ref PackiFiles
        param callback
            :ref cb
                :param
                    :{
                        :index
                            :ref FileDiff
                            param k
                                :string
        :return
            :void
        _ wizzifs.getFiles
            @ dir
            {
                @ deep true
                @ documentContent true
            =>
                param err
                param result
                const diff
                    :{
                        :index
                            :ref FileDiff
                            param k
                                :string
                    =
                        {
                _ result.forEach
                    =>
                        param entry
                        if entry.relPath.startsWith('.git/') == false
                            set diff[entry.relPath] =
                                {
                                    @ kind '-'
                                    { a
                                        @ path entry.relPath
                                        @ content
                                            @expr entry.content
                                                :as
                                                    :string
                _ Object.keys(packiFiles).forEach
                    =>
                        param entryName
                        if diff[entryName]
                            if
                                test
                                    &&
                                        + diff[entryName].a
                                        ===
                                            @expr
                                                (
                                                    @expr diff[entryName].a
                                                        :as
                                                            :ref FileDiffItem
                                                . content
                                            + packiFiles[entryName].contents
                                delete diff[entryName]
                            else
                                set diff[entryName].kind = '<>'
                                set diff[entryName].b =
                                    {
                                        @ path entryName
                                        @ content packiFiles[entryName].contents as string
                        else
                            set diff[entryName] =
                                {
                                    @ kind '+'
                                    { b
                                        @ path entryName
                                        @ content packiFiles[entryName].contents as string
                _ callback(null, diff)
    +
    async-function printStatus
        param dir
            :string
        :return
            :ref Promise
                :param void
        return
            new Promise
                =>
                    param resolve
                    param reject
                    _ wizzifs.getFiles
                        @ dir
                        {
                            @ deep true
                            @ documentContent false
                        async=>
                            param err
                            param files
                            if err
                                return reject(err)
                            for
                                left
                                    let file
                                of files
                                if file.relPath.startsWith('.git/') == false
                                    let msg
                                        await
                                            _ git.status
                                                {
                                                    @ fs
                                                    @ dir
                                                    @ filepath file.relPath
                            _ resolve()
    +
    function getOptions
        param accessToken
            :string
            :optional
        return
            {
                @ method 'GET'
                @ headers headers(accessToken)
    +
    function postOptions
        param accessToken
            :string
        param body
            :any
        return
            {
                @ method 'POST'
                @ headers headers(accessToken)
                @ body JSON.stringify(body)
    +
    function headers
        param accessToken
            :string
            :optional
        :return
            :{
                :index
                    :string
                    param k
                        :string
        const ret
            :{
                :index
                    :string
                    param k
                        :string
            =
                {
                    @ 'Accept' 'application/vnd.github.v3+json'
                    @ 'Content-Type' 'application/json'
        if accessToken
            set ret['Authorization'] = 'token ' + (accessToken as string)
        return ret
