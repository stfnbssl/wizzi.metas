$group

    ${'$'}if wzCtx.Build.usePackiStatic
        import util from 'util'
        import path from 'path'
        import stringify from 'json-stringify-safe'
        import parseUrl from 'parseurl'
        import axios
            from 'axios'
        import 
            @ Application
            @ RequestHandler
            @ Request
            @ Response
            from 'express'
        import 
            @ MiddlewareType
            from '../features/app/types'
        import 
            @ config
            from '../features/config'
        const myname = 'express.middleware.packiStatic'


        export 
            const PackiStaticMiddleware
                :ref MiddlewareType
                =
                    => 
                        param app
                            :ref Application
                        success 'PackiStaticMiddleware. Folder served from ', 
                            \b path.resolve(${'$'}{wzCtx.Build.express.staticFiles.basePath}, 'ittf')
                        _ app.use('/packi', 
                            \b ittfMiddleware(path.resolve(${'$'}{wzCtx.Build.express.staticFiles.basePath}, 'ittf'), '/ittf'))

        function ittfMiddleware
            param basePath
                :string 
            param routePath
                :string 
            :return
                :ref RequestHandler
            return 
                async=> 
                    param request
                        :ref Request
                    param response
                        :ref Response
                    param next
                        :ref Function
                    
                    if request.method !== 'GET' && request.method !== 'HEAD'
                        return next()

                    const parsedUrl = parseUrl(request)
                    if !parsedUrl || !parsedUrl.pathname
                        return next()

                    $$ loog 'packiStatic parsedUrl', parsedUrl
                    $$ loog 'packiStatic request.path', request.path
                    
                    const reqpath = parsedUrl && parsedUrl.path

                    if false
                        return response.redirect(307, '${'$'}{wzCtx.App.baseUrl}/packi' + reqpath);
                    else
                        $$ loog 'packiStatic parsedUrl.path', reqpath
                        _ axios.get
                            @ '${'$'}{wzCtx.App.baseUrl}/packi' + reqpath
                            ._ then
                                =>
                                    param res
                                        :any
                                    $$ loogmyname + '. res', typeof res, Object.keys(res)
                                    $$ loogmyname + '. res.headers', res.headers
                                    $$ loogmyname + '. res.data.length', res.data.length
                                    _ response.status(200)
                                    _ response.set('Content-Type', res.headers['content-type'])
                                    _ response.set('Content-Length', res.data.length)
                                    _ response.set('Cache-Control', res.headers['cache-control'])
                                    _ response.set('Expires', res.headers['expires'])
                                    _ response.set('Pragma', res.headers['pragma'])
                                    _ response.send(res.data)
                            ._ catch
                                =>
                                    param err
                                        :any
                                    $$ loogmyname + '.packiItem.err', err
                                    _ sendError
                                        @ response
                                        @ err
                                        { 
                                            @ format 'json'
        
        +
        function sendError
            param response
                :ref Response
            param err
                :any 
            param options
                :any 
            set options =
                || 
                    + options
                    { 
            const code = options.code || 999
            let errEmit
                :any 
                = err
            delete errEmit.__is_error
            if options.format === 'string'
                if typeof err !== 'string'
                    set err =
                        _ util.inspect
                            @ err
                            { 
                                @ depth null
                set errEmit = err.replace(RegExp('\n', 'g'), '<br>')
            else
                if err.stack && err.stack.split
                    const stackArray
                        :[ 
                            :string 
                        = []
                    _ 
                        ( 
                            @expr err.stack
                                :as 
                                    :string 
                        ._ split
                            @ '\n'
                        ._ forEach
                            => 
                                param element
                                _ stackArray.push('    ' + element)
                    set errEmit.stack = stackArray
            _ response.setHeader('Content-Type', 'application/json')
            _ response.send
                _ stringify
                    { 
                        @ code
                        @ error errEmit
                    @ null
                    @ 4
    ${'$'}else
        # <--wizzi!file!exclude-->                