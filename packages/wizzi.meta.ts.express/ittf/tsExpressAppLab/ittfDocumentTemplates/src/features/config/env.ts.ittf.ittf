$group

    ${'$'}include set-ctx-functions
    ${'$'}
        setCtxDep ('dotenv', '^16.0.1');
        setCtxDep ('envalid', '^7.0.0');
    
    import path from 'path'
    $if metaCtx.App.moduleType == 'module'
        import { dirname } from 'path'
        import { fileURLToPath } from 'url'
        const __dirname = dirname(fileURLToPath(import.meta.url))

    import dotenv from 'dotenv'
    import 
        @ cleanEnv
        @ str
        @ bool
        @ port
        from 'envalid'
    
    import 
        @ ConfigType
        from './types'

    function validateEnv
        _ dotenv.config
        let checkedEnv
            _ cleanEnv
                @ process.env
                { 
                    ${'$'}if $.getCtx('env.values')
                        ${'$'}foreach item in Object.values($.getCtx('env.values'))
                            @ ${'$'}{item.name} ${'$'}{item.checker}()
        return checkedEnv
    
    let config
        :ref ConfigType
    
    export-default 
        function create
            :return
                :ref ConfigType
            if config == null
                const checkedEnv = validateEnv()
                set config =
                    { 
                        ${'$'}if $.getCtx('env.values')
                            ${'$'}foreach item in Object.values($.getCtx('env.values'))
                                @ ${'$'}{item.property} checkedEnv.${'$'}{item.name}
                        $if metaCtx.tsExpressAppLab.useMongoDb
                            @ mongoConnectUrl ""

                        $if metaCtx.App.useUserInfo
                            @ userUserName "stfnbssl" 
                            @ userDisplayName "Stefano Bassoli" 
                            @ userAvatarUrl "https://avatars.githubusercontent.com/u/728956?v=4"

                        $if _.isArray(metaCtx.App.configValues)
                            $foreach item in metaCtx.App.configValues
                                $if item.type == 'string'
                                    @ ${item.name} "${item.value}"
                                $else
                                    @ ${item.name} ${item.value}

                $if metaCtx.tsExpressAppLab.useMongoDb
                    const { mongoHost, mongoUser, mongoPassword, mongoPath } = config;
                    if mongoUser && mongoUser.length > 0 && mongoPassword && mongoPassword.length > 0 && mongoHost && mongoHost.length > 0
                        set config.mongoConnectUrl = `${mongoHost}://${mongoUser}:${mongoPassword}${mongoPath}`
                    else
                        # example 'mongodb://localhost/test'
                        set config.mongoConnectUrl = `${mongoPath}`

                _ Object.keys(config).forEach
                    => 
                        param element
                        if element.indexOf("Pass") < 0 && element.indexOf("Secr") < 0
                            _ console.log
                                @ 'Created config'
                                @ element
                                @expr 
                                    ( 
                                        + config
                                            :as 
                                                :any 
                                    .[ element
            return config