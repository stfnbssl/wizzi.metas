$group

    $
        var routeApiFragment = metaCtx.isLocal ? 'route' : 'route_api_secured';

    ${'$'}
        var ctrl = {
            name: 'ApiV1MetaProduction',
            path: '/api/v1/production/meta',
            apiSecured: wzCtx.App.isLocal == false,
            Production: 'Meta',
            production: 'meta',
        }
    
    v08/ts/controller${'('} &ctrl )
            
        ${'$'}append imports
            apiv1_imports${'('} &ctrl )
            import
                @ generateMetaProduction
                from '../api/meta'
            import
                @ artifactApi
                @ productionApi
                from '#/src/features/wizziHubProductions'
            const myname = 'features/production/controllers/apiv1metaproduction'

        v08/ts/${routeApiFragment}${'('} get, /:owner, this.getMetaProductions)
        v08/ts/${routeApiFragment}${'('} get, /props/:id, this.getMetaProperties)
        v08/ts/${routeApiFragment}${'('} get, /checkname/:owner/:name, this.getCheckMetaName)
        v08/ts/${routeApiFragment}${'('} get, /:owner/:name, this.getMetaProduction)
        v08/ts/${routeApiFragment}${'('} put, /:id, this.putMetaProduction)
        v08/ts/${routeApiFragment}${'('} put, /packidiffs/:id, this.putMetaProductionPackiDiffs)
        v08/ts/${routeApiFragment}${'('} post, '/:owner/:name, this.postMetaProduction)
        v08/ts/${routeApiFragment}${'('} post, '/generate/:owner/:name, this.generateMetaProductionByName)
        
        ${'$'}append handlers
            
            v08/ts/handler${'('}  getMetaProductions )

                $$ loog 'getMetaProductionList.request.params', request.params
                $$ loog 'getMetaProductionList.request.session.user.username', (request.session as any).user.username
                _ getMetaProductionList
                    {
                        { query
                            @ owner request.params.owner
                    ._ then
                        =>
                            param result
                                :any
                            $$ loog 'getMetaProductions.result', result
                            if result.ok
                                _ sendSuccess
                                    @ response
                                    @ result
                            v08/ts/else_send_fail${'('} getMetaProductions, result)
                    v08/ts/catch_send_fail${'('}  getMetaProductions )

            v08/ts/handler${'('}  getMetaProperties )

                $$ loog 'getMetaProperties.request.params', request.params
                $$ loog 'getMetaProperties.request.session.user.username', (request.session as any).user.username
                _ productionApi.prepareProductionById
                    @ 'meta'
                    @ request.params.id
                    @ ''
                    {
                    ._ then
                        =>
                            param metaProductionSet
                                :any
                            _ wizziProds.generateArtifact
                                @ 'properties/index.json.ittf'
                                @ metaProductionSet.packiFiles
                                @ metaProductionSet.context
                                ._ then
                                    =>
                                        param value
                                        # loog myname, 'getMetaProperties.generateArtifact.result', value
                                        _ sendSuccess
                                            @ response
                                            {
                                                @ meta JSON.parse(value.artifactContent)
                                v08/ts/catch_send_fail${'('}  features.packi.controllers.production.generateArtifact )
                    v08/ts/catch_send_fail${'('}  getMetaProperties.prepareProductionById )
            
            v08/ts/handler${'('}  getCheckMetaName )
                check_name${'('} meta )

            v08/ts/handler${'('}  getMetaProduction )

                $$ loog 'getMetaProduction.request.params', request.params
                _ getMetaProduction
                    @ request.params.owner
                    @ request.params.name
                    ._ then
                        =>
                            param result
                                :any
                            $$ loog 'getMetaProduction.result', result
                            _ sendSuccess
                                @ response
                                @ result
                    v08/ts/catch_send_fail${'('}  getMetaProduction )

            v08/ts/handler${'('}  postMetaProduction )

                # loog 'postMetaProduction.request.params', request.params
                # loog 'postMetaProduction.request.body', request.body
                _ createMetaProduction
                    @ request.params.owner
                    @ request.params.name
                    @ request.body.description
                    @ JSON.stringify(request.body.packiFiles)
                    ._ then
                        =>
                            param result
                                :any
                            $$ loog 'postMetaProduction.result', result
                            _ sendSuccess
                                @ response
                                @ result
                    v08/ts/catch_send_fail${'('}  postMetaProduction )

            v08/ts/handler${'('}  putMetaProduction )

                $$ loog 'putMetaProduction.request.params', request.params
                $$ loog 'putMetaProduction.request.body', request.body
                _ updateMetaProduction
                    @ request.params.id
                    @ request.body.owner
                    @ request.body.name
                    @ request.body.description
                    @ JSON.stringify(request.body.packiFiles)
                    ._ then
                        =>
                            param result
                                :any
                            $$ loog 'putMetaProduction.result', result
                            _ sendSuccess
                                @ response
                                @ result
                    v08/ts/catch_send_fail${'('}  putMetaProduction )                    

            apiv1_put${'('} &ctrl )

            v08/ts/handler${'('}  generateMetaProductionByName )

                $$ loog 'generateMetaProduction.request.params', request.params
                $$ loog 'generateMetaProduction.request.body', request.body
                _ generateMetaProduction
                    @ request.params.owner
                    @ request.params.name
                    @ request.body.metaCtx
                    ._ then
                        =>
                            param result
                                :any
                            $$ loog 'generateMetaProduction.result', result
                            _ sendSuccess
                                @ response
                                @ result
                    v08/ts/catch_send_fail${'('}  generateMetaProductionByName )         

    apiv1_exec_update${'('} &ctrl )                                                   