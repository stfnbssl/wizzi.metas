$group

    ${'$'}
        var myname = 'features/wizzi/productions';

    import path from 'path'
    import fs from 'fs'
    import stringify from 'json-stringify-safe'
    import wizzi from '@wizzi/factory'
    import
        @ fSystem
        @ ittfScanner
        @ ittfGraph
        @ verify
        from '@wizzi/utils'
    ${'$'}if wzCtx.Build.useWizziJsonFactory
        import
            @ packiFilePrefix
            @ packiFilePrefixExtract
            from '../config/env'
    import
        @ packiTypes
        from '../packi'
    import
        @ config
        from '../config'
    import
        as wizziMaps
        from './maps'
    import
        ${'$'}if wzCtx.Build.useWizziJsonFactory
            @ createJsonFsAndFactory
            @ ensurePackiFilePrefix
        @ createFilesystemFactory
        @ createFilesystemFactoryWithParameters
        from './factory'
    import
        @ LoadModelOptions
        @ GenerationOptions
        @ GeneratedArtifact
        @ WizziModelTypesRequest
        @ WizziJobTypesRequest
        @ TransformationOptions
        @ TransformedModel
        from './types'
    import
        @ JsonFs
        $if metaCtx.useWizziV08
            from '@wizzi/repo'
        $else
            from 'wizzi-repo'

    const myname = '${'$'}{myname}'

    ${'$'}include productions/loadModel
    ${'$'}include productions/mTreeBuildUpScript
    ${'$'}include productions/mTree
    ${'$'}include productions/generateArtifact
    ${'$'}include productions/generateFolderArtifacts
    ${'$'}include productions/generateWizziModelTypes
    ${'$'}include productions/transformModel
    ${'$'}include productions/metaGenerate
    ${'$'}include productions/executeJob
    ${'$'}include productions/inferAndLoadContext
    ${'$'}include productions/scanIttfDocument
    ${'$'}include productions/wizzify
    ${'$'}include productions/getCodeAST
    ${'$'}include productions/loadSiteJsonModel

    ${'$'}if wzCtx.Build.useWizziJsonFactory
        function jsonFsToPackiFiles
            param jsonFs
                :ref JsonFs
            param folder
                :string
            :return
                :ref Promise
                    :param
                        :ref packiTypes.PackiFiles
            r_promise${'('})
                const packiFiles
                    :ref packiTypes.PackiFiles
                    {
                _ jsonFs.toFiles
                    {
                        @ removeRoot packiFilePrefixExtract
                    a_reject${'('}files, :ref, fSystem.FileDef[])
                        _ files.forEach
                            =>
                                param file
                                if file.relPath.startsWith(folder + '/')
                                    set packiFiles[file.relPath] =
                                        {
                                            @ type 'CODE'
                                            @ contents file.content
                                            @ generated true
                        _ resolve
                            @ packiFiles

