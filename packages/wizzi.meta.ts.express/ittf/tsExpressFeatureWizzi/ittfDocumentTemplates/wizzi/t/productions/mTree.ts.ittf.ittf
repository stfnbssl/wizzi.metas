$group
    $
        var op = '(';

    ${'$'}if wzCtx.Build.useWizziJsonFactory
        +
        export
            async-function mTree
                param filePath
                    :string
                param files
                    :ref packiTypes.PackiFiles
                param context
                    :any
                :return
                    :ref Promise
                        :param
                            :any
                return
                    new Promise
                        async=>
                            param resolve
                            param reject
                            if !verify.isObject(files)
                                return
                                    _ reject
                                        {
                                            @ action 'wizzi.productions.mTree'
                                            @ message 'files parameter must be an object of type PackiFiles'
                                            @ files
                            const ittfDocumentUri
                                _ ensurePackiFilePrefix(filePath)
                                    :as
                                        :string
                            let jsonwf
                                :any
                                =
                                    {
                            # TODO catch error
                            set jsonwf =
                                await
                                    _ createJsonFsAndFactory(files)
                            _ jsonwf.wf.loadMTree
                                @ ittfDocumentUri
                                @ context
                                =>
                                    param err
                                        :any
                                    param mTree
                                        :any
                                    if err
                                        return reject(err)
                                    _ resolve
                                        {
                                            @ mTree mTree
                                            @ mTreeIttf
                                                _ mTree.toIttf
    +
    export
        async-function mTreeFs
            param ittfDocumentUri
                :string
            param context
                :any
            :return
                :ref Promise
                    :param
                        :any
            set context = context || {}
            return
                new Promise
                    async=>
                        param resolve
                        param reject
                        const wf
                            await
                                _ createFilesystemFactory()
                        _ wf.loadMTree
                            @ ittfDocumentUri
                            @ context
                            =>
                                param err
                                    :any
                                param mTree
                                    :any
                                if err
                                    return reject(err)
                                _ resolve
                                    {
                                        @ mTree mTree
                                        @ mTreeIttf
                                            _ mTree.toIttf
    +
    export 
        async-function mTreeDb
            param owner
                :string 
            param name
                :string 
            param context
                :any 
                :optional 
            :return
                :ref Promise
                    :param 
                        :ref GeneratedArtifact
            throw new Error(myname + '.mTreeDb not yet implemented')

    +
    ${'$'}if wzCtx.Build.useWizziJsonFactory
        export
            async-function wrapIttfText
                param schema
                    :string
                param ittftext
                    :string
                param context
                    :any
                    :optional
                :return
                    :ref Promise
                        :param
                            :any
                set context = context || {}
                return
                    new Promise
                        async=>
                            param resolve
                            param reject
                            const mainIttf = 'index.' + schema + '.ittf'
                            const packiFiles
                                :ref packiTypes.PackiFiles
                                {
                                    { [ mainIttf ]
                                        @ type 'CODE'
                                        @ contents ittftext
                            $$ loogmyname, 'wrapIttfText', 'mainIttf',mainIttf
                            _ mTree
                                @ mainIttf
                                @ packiFiles
                                @ context
                                ._ then
                                    =>
                                        param result
                                        const requiredRoot = wizziMaps.ittfRootFromSchema(schema)
                                        $$ loogmyname, 'wrapIttfText', 'root node', result.mTree.nodes[0].n, 'requiredRoot', requiredRoot
                                        if requiredRoot == 'any' || result.mTree.nodes[0].n == requiredRoot 
                                            _ resolve
                                                @ ittftext
                                        else
                                            const wrapperNode
                                                _ wizziMaps.wrapperForSchema
                                                    @ schema
                                            _ wrapperNode.children.push
                                                @ result.mTree.nodes[0]
                                            _ resolve
                                                _ result.mTree.toIttf(wrapperNode)
                                v08/ts/catch_reject${'('} features.wizzi.productions.wrapIttfText.mTree )
