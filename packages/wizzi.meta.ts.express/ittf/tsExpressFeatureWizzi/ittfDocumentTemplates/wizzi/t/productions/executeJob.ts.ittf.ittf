$group
    ${'$'}if wzCtx.Build.useWizziJsonFactory
        +
        export
            async-function executeJob
                param wfjobFilePath
                    :string
                param packiFiles
                    :ref packiTypes.PackiFiles
                param context
                    :any
                :return
                    :ref Promise
                        :param
                            :ref JsonFs
                return
                    new Promise
                        async=>
                            param resolve
                            param reject
                            if !verify.isObject(packiFiles)
                                return
                                    _ reject
                                        {
                                            @ action 'wizzi.productions.executeJob'
                                            @ message 'packiFiles parameter must be an object of type PackiFiles'
                                            @ packiFiles
                            set wfjobFilePath = ensurePackiFilePrefix(wfjobFilePath)
                            const jsonwf
                                await
                                    _ createJsonFsAndFactory(packiFiles)
                            _ jsonwf.wf.executeJob
                                {
                                    @ name ''
                                    @ path wfjobFilePath
                                    { productionOptions
                                    @ globalContext context || {}
                                =>
                                    param err
                                    param result
                                    if err
                                        return reject(err)
                                    $$ loog 'Job executed. result', result
                                    _ resolve(jsonwf.jsonFs)
        +
        export
            async-function executeJobs
                param packiFiles
                    :ref packiTypes.PackiFiles
                param context
                    :any
                :return
                    :ref Promise
                        :param
                            :ref JsonFs
                return
                    new Promise
                        async=>
                            param resolve
                            param reject
                            const wfjobFilePaths
                                _ Object.keys(packiFiles).filter
                                    =>
                                        param k
                                        _ k.endsWith('.wfjob.ittf')
                            $$ loog 'Executing jobs', wfjobFilePaths, 'packiFiles', Object.keys(packiFiles)
                            # TODO catch error
                            const jsonwf
                                await
                                    _ createJsonFsAndFactory(packiFiles)
                            const execJob
                                =>
                                    param index
                                        :number
                                    :return
                                        :void
                                    if index == wfjobFilePaths.length
                                        $$ loog 'Jobs executed.'
                                        return resolve(jsonwf.jsonFs)
                                    const wfjobFilePath = ensurePackiFilePrefix(wfjobFilePaths[index])
                                    $$ loog 'Executing job', wfjobFilePath
                                    _ jsonwf.wf.executeJob
                                        {
                                            @ name ''
                                            @ path wfjobFilePath
                                            { productionOptions
                                            @ globalContext context || {}
                                        =>
                                            param err
                                            param result
                                            if err
                                                return reject(err)
                                            $$ loog 'Job executed. result', result
                                            _ execJob(index + 1)
                            _ execJob(0)

    +
    export
        async-function executeJobFs
            param request
                :ref WizziJobTypesRequest
            :return
                :ref Promise
                    :param
                        :any
            r_promise_async${'('})
                try 
                    const globalContext = Object.assign({}, request.globalContext)
                    +
                    var plugins 
                        [
                    if request.plugins
                        foreach item in request.plugins
                            if plugins.indexOf(item) < 0
                                _ plugins.push(item)
                    else
                        _ plugins.push('wizzi-core')
                    const wf
                        await 
                            _ createFilesystemFactoryWithParameters
                                @ request.pluginsBaseFolder
                                @ plugins
                                @ globalContext
                    info 'STARTING WIZZI JOB', request.wfjobIttfDocumentUri
                    _ wf.executeJob
                        {
                            @ name request.wfjobName || path.basename(request.wfjobIttfDocumentUri)
                            @ path request.wfjobIttfDocumentUri
                            { productionOptions
                            @ globalContext globalContext
                        =>
                            param err
                                :any
                            param result
                                :any
                            if err
                                r_reject${'('})
                                    {
                                        @ message "wizziProds.executeJobFs.wf.executeJob.error"
                                        { err
                            success 'WIZZI JOB Executed', request.wfjobIttfDocumentUri
                            return resolve(result)
                catch ex
                    error "wizziProds.executeJobFs.error", ex
                    r_reject${'('})
                        {
                            @ message "wizziProds.executeJobFs.error"
                            @ err ex    

