$group

    async-function createGist
        param kind
            :ref GistKind
        param name
            :string
        param schema
            :string
        r_promise${'('})
			var fullName = name
			var content = ''
			if schema
				if isGistKind(kind)
					set fullName = name + '.' + schema + '.ittf'
				else
					set fullName = name + '.' + schema
				if schema === 'js' 
					if isGistKind(kind)
						if kind === 'gist' || kind === 'context'
							set content
								[
									@ 'module'
									@ '\tkind jsfile'
									@ '\t_ go'
									@ '\t\t@ "stefi"'
									@ '\tfunction go'
									@ '\t\tparam p1'
									@ '\t\tlog "Hello " + p1'
									._ join('\n')
						else
							set content
								[
									@ '$group'
									@ '\t$params p1, p2|@@null'
									@ '\t'
									._ join('\n')
					else
						set content
							[
								@ 'go("stefi")'
								@ 'function go(p1) {'
								@ '\tconsole.log("Hello " + p1);'
								@ '}'
								._ join('\n')

			_ gistFs.gistFileExists
				@ kind
				@ fullName
                a_then${'('} result, :boolean )
                    if result
                        return
                            _ reject
                                @ kind + ' ' + fullName + ' already exists'
                    _ gistFs.putGistFile
                        @ kind
                        @ fullName
                        @ content
                        a_then${'('} putResult )
                            _ getGistList
                                @ kind
                                a_then${'('} result )
                                    if isGistKind(kind)
                                        r_resolve${'('})
                                            {
                                                @ message kind + ' created'
                                                { data
                                                    @ gists result.data.gists
                                                    @ gist putResult.data.gist
                                    else
                                        # BEWARE! putGistFile result.data contains 'gist' property
                                        r_resolve${'('})
                                            {
                                                @ message 'Snippet created'
                                                { data
                                                    @ snippets result.data.snippets
                                                    @ snippet putResult.data.gist
                                catch_reject${'('} wizziGist.createGist.getGistList )
                        catch_reject${'('} wizziGist.createGist.putGistFile )
                catch_reject${'('} wizziGist.createGist.gistFileExists )

    async-function updateGist
        param hash
            :string
        param content
            :string
        r_promise${'('})
			var filePath = crypto.decrypt(hash)
            var name = path.basename(filePath)
			var kind = gistFs.gistKindFromFilePath(filePath)
			log 'updateGist.kind', kind, 'name', name, 'filePath', filePath
			_ gistFs.putGistFile
                @ kind
				@ name
				@ content
				a_then${'('} result )
                    r_resolve${'('})
                        {
                            @ message kind + ' updated' 
                            { data
                                @ gist result
                catch_reject${'('} wizziGist.updateGist.gistFs.putFile )

    async-function deleteGist
        param hash
            :string
        r_promise${'('})
			var filePath = crypto.decrypt(hash)
			var kind = gistFs.gistKindFromFilePath(filePath)
			
			_ wizziFs.deleteFsItem
				@ filePath
				a_then${'('} result )
					_ getGistList
						@ kind
						a_then${'('} result )
							if isGistKind(kind)
								r_resolve${'('})
                                    {
                                        @ message kind + ' deleted'
                                        { data
                                            @ gists result.data.gists
							else
								r_resolve${'('})
                                    {
                                        @ message 'Snippet deleted'
                                        { data
                                            @ gists result.data.snippets
                        catch_reject${'('} wizziGist.deleteGist.getGistList )
                catch_reject${'('} wizziGist.deleteGist.gistFs.deleteFile )