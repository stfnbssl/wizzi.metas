$group
    import path from 'path'
    import
        @ verify
        @ fSystem
        from 'wizzi-utils'
    import
        @ config
        from '../../config'
    import
        @ GistKind
        from '../types'
    import * as wizziFs from '../../../utils/wizziFs'
    +
    var GIST_KINDS = ['gist', 'fragment', 'context']
    +
    function isGistKind
        param kind
        return GIST_KINDS.indexOf(kind) > -1
    +
    function normalize
        param filepath
        return verify.replaceAll(filepath, '\\', '/')
    +
    const gistFolderNameFromKind
        function
            param kind
                :ref GistKind
            if kind === 'gist'
                return 'gists'
            elif kind === 'fragment'
                return 'gists'
            elif kind === 'context'
                return 'contexts'
            else
                return 'snippets'

    const gistKindFromFolderPath
		function
			param folderParts
                :[
                    :string
            :return
                :ref GistKind
			log 'gistKindFromFolderPath.folderParts', folderParts
			if folderParts.length == 3
				return 'fragment'
			else
				if folderParts[0] === 'gists'
					return 'gist'
				elif folderParts[0] === 'contexts'
					return 'context'
				else
					return 'snippet'

    const gistKindFromFilePath
        function
			param filePath
                :string
            :return
                :ref GistKind
			var dirname = path.dirname(filePath)
			var relFolder
				_ normalize
					_ dirname.substr(config.jobsBasePath.length + 1)
			log 'gistKindFromFilePath.relFolder', relFolder
			return
				_ gistKindFromFolderPath
					_ relFolder.split('/')

    const gistsFolderPath
        function
            param kind
                :ref GistKind
            return
                _ path.join
                    @ config.jobsBasePath
                    @ gistFolderNameFromKind(kind)

	const gistExecutablesFolderPath
		function
            param kind
                :ref GistKind
            return
                _ path.join
                    @ config.jobsBasePath
                    @ gistFolderNameFromKind(kind) + '_executables'

	const gistFilePath
		function
            param kind
                :ref GistKind
			param name
			return
				_ path.join
					_ gistsFolderPath
						@ kind
					@ name

	const gistExecutableFilePath
		function
            param kind
                :ref GistKind
			param name
			return
				_ path.join
					_ gistExecutablesFolderPath
						@ kind
					@ name

	const gistInfoByPath
		function
			param filePath
			return
				_ wizziFs.fileInfoByPath
					@ filePath
					_ gistsFolderPath
                        @ "gist"

    async-function getGistFiles
        param kind
            :ref GistKind
        if kind === 'snippet'
            r_promise${'('})
                _ wizziFs.getFolderFiles
                    _ gistsFolderPath
                        @ kind
                    _ gistsFolderPath
                        @ kind
                    @ '/wizzi/' + kind + 's'
                    a_then${'('} snippets )
                        r_resolve${'('})
                            {
                                { data
                                    @ snippets snippets
                    catch_reject${'('} gistFs.getGistFiles.getFolderFiles.snippets )
        else
            r_promise${'('})
                var that = this
                _ wizziFs.getFolderFiles
                    _ gistsFolderPath
                        @ 'gist'
                    _ gistsFolderPath
                        @ 'gist'
                    @ '/wizzi/gists'
                    a_then${'('} gists )
                        _ wizziFs.getFolderFiles
                            _ gistsFolderPath
                                @ 'fragment'
                            _ gistsFolderPath
                                @ 'fragment'
                            @ '/wizzi/fragments'
                            a_then${'('} fragments )
                                _ wizziFs.getFolderFiles
                                    _ gistsFolderPath
                                        @ 'context'
                                    _ gistsFolderPath
                                        @ 'context'
                                    @ '/wizzi/contexts'
                                    a_then${'('} contexts )
                                        r_resolve${'('})
                                            {
                                                { data
                                                    @ gists gists.data.items
                                                    @ fragments fragments.data.items
                                                    @ contexts contexts.data.items
                                    catch_reject${'('} gistFs.getGistFiles.getFolderFiles.context )
                            catch_reject${'('} gistFs.getGistFiles.getFolderFiles.fragments )
                    catch_reject${'('} gistFs.getGistFiles.getFolderFiles.gists )

    async-function gistFileExists
        param kind
            :ref GistKind
        param name
            :string
        return
            _ wizziFs.fsItemExists
                _ gistFilePath
                    @ kind
                    @ name

    async-function getGistFile
        param kind
            :ref GistKind
        param name
            :string
        return
            _ wizziFs.readFsItem
                _ gistFilePath
                    @ kind
                    @ name

    async-function putGistFile
        param kind
            :ref GistKind
        param name
            :string
        param content
            :string
        r_promise${'('})
            var filePath 
                _ gistFilePath
                    @ kind
                    @ name
            _ wizziFs.writeFsItem
                @ filePath
                @ content
                ._ then
                    =>
                        var gist
                            _ gistInfoByPath
                                @ filePath
                        set gist.content = content
                        return
                            _ resolve
                                {
                                    { data
                                        @ gist gist
                catch_reject${'('} gistFs.putGistFile.wizziFs.writeFsItem )

    async-function putGistExecutable
        param kind
            :ref GistKind
        param filePath
            :string
        param content
            :string
        r_promise${'('})
            var name = path.basename(filePath)
            var executablePath
                _ gistExecutableFilePath
                    @ kind
                    @ name
            _ wizziFs.writeFsItem
                @ executablePath
                @ content
                a_then${'('} notUsed )
                    return
                        _ resolve
                            {
                                @ executablePath executablePath
                catch_reject${'('} gistFs.putGistExecutable.wizziFs.writeFsItem )
    +
    export
        @ gistKindFromFilePath
        @ gistInfoByPath
        @ getGistFiles
        @ gistFileExists
        @ getGistFile
        @ putGistFile
        @ putGistExecutable