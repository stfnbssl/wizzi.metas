$group

    import path from 'path'
    import wizzi from '@wizzi/factory'
    import
        @ verify
        @ fSystem
        from 'wizzi-utils'
    import
        @ packiTypes
        from '../packi'
    import
        ${'$'}if wzCtx.Build.useWizziJsonFactory
            @ createJsonFsAndFactory
            @ ensurePackiFilePrefix
        @ createFilesystemFactory
        @ createFilesystemFactoryWithParameters
        from './factory'
    const mdDisplayName = 'features.wizzi-meta.api.metaTemplator'
    const file = fSystem.vfile()
    +
    async-function metaTemplator
        param folderTemplatesFiles
            :ref packiTypes.PackiFiles
        param folderTemplatesIndexFile
            :string
        param destinationIttfTempFolder
            :string
        param destinationPackiFiles
            :ref packiTypes.PackiFiles
        param metaCtx
            :any
        r_promise${'('})
            if !verify.isObject(folderTemplatesFiles)
                return
                    _ reject
                        {
                            @ action mdDisplayName + '.metaTemplator'
                            @ message 'the folderTemplatesFiles parameter must be an object of type PackiFiles'
                            @ folderTemplatesFiles
            let jsonwf
                :any
                =
                    {
            
            const ittfDocumentUri
                _ ensurePackiFilePrefix(folderTemplatesIndexFile)
                    :as
                        :string
            # TODO catch error
            set jsonwf =
                await
                    _ createJsonFsAndFactory(folderTemplatesFiles)
            _ jsonwf.wf.loadModel
                @ ittfDocumentUri
                {
                    @ mTreeBuildupContext
                        {
                            @ metaCtx metaCtx
                =>
                    param err
                        :any
                    param packageTemplateModel
                        :any
                    if err
                        error mdDisplayName + '.metaTemplator.wizzi.model', err
                        r_reject${'('})
                            {
                                @ message 'wizziMeta.metaTemplator.loadModel'
                                @ err
                    try
                        foreach child in packageTemplateModel.children
                            if child.name == '$file'
                                _ processFile
                                    @ child
                                    @ destinationIttfTempFolder
                                    @ destinationPackiFiles
                        r_resolve${'('})
                            {
                                @ message 'Package generated'
                    catch ex
                        r_reject${'('})
                            {
                                @ message mdDisplayName + '.metaTemplator. Error writing package files'
                                @ ex

    +
    async-function metaTemplatorFs
        param folderTemplatesIndexFile
            :string
        param destinationIttfTempFolder
            :string
        param metaCtx
            :any
        r_promise${'('})
            _ wizzi.model
                @ folderTemplatesIndexFile
                {
                    @ metaCtx metaCtx
                =>
                    param err
                        :any
                    param packageTemplate
                        :any
                    if err
                        error 'wizziMeta.metaTemplator.wizzi.model', err
                        r_reject${'('})
                            {
                                @ message 'wizziMeta.metaTemplator.wizzi.model'
                                @ err
                    try
                        foreach child in packageTemplate.children
                            if child.name == '$file'
                                _ processFileFs
                                    @ child
                                    @ destinationIttfTempFolder
                        r_resolve${'('})
                            {
                                @ message 'Package generated'
                    catch ex
                        r_reject${'('})
                            {
                                @ message 'wizziMeta.metaTemplator. Error writing package files'
                                @ ex

    function processFile
        param node
            :any
        param destinationIttfTempFolder
            :string
        param destinationPackiFiles
            :ref packiTypes.PackiFiles
        var outputPath = destinationIttfTempFolder + '/' + node.value
        log 'wizziMeta.metaTemplator.writing', node.value, 'to', outputPath
        var sb = []
        foreach child in node.children
            _ processContent
                @ sb
                @ child
                @ 0
        set destinationPackiFiles[outputPath]
            {
                @ type "CODE"
                @ contents 
                    _ sb.join
                        @ '\n'

    function processFileFs
        param node
            :any
        param destinationIttfTempFolder
            :string
        $$ loog 'wizziMeta.metaTemplator.writing', node.value, 'to', destinationIttfTempFolder
        var outputPath
            _ path.join
                @ destinationIttfTempFolder
                @ node.value
        var sb = []
        foreach child in node.children
            _ processContent
                @ sb
                @ child
                @ 0
        _ file.write
            @ outputPath
            _ sb.join
                @ '\n'


    function processContent
        param sb
            :any
        param node
            :any
        param indent
            :number
        $$ loog new Array(indent).join(' ') + node.name + ' ' + node.value
        _ sb.push
            @ new Array(indent).join(' ') + decode(node.name) + ' ' + decode(node.value)
        foreach child in node.children
            _ processContent
                @ sb
                @ child
                @ indent + 4

    function decode
        param text
            :string
        set text = verify.replaceAll(text, "${'$'}", "$")
        return verify.replaceAll(text, "£'('£", "(")

    +
    export
        @ metaTemplator
