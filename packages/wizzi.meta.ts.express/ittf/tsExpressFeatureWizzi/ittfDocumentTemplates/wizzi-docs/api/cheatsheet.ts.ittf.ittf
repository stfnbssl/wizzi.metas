$group

    import path from 'path'
    import
        @ pretty
        @ verify
        from 'wizzi-utils'
    import
        @ wizziMaps
        @ wizziProds
        from '../../wizzi'
    import stringify from 'json-stringify-safe'        
    +
    async-function getCheatsheet
        param name
            :string
        return
            new Promise
                =>
                    param resolve
                    param reject
                    var csPath
                        _ path.join 
                            @ __dirname
                            @ '..' $$ docs
                            @ '..' $$ features
                            @ '..' $$ src
                            @ '..' $$ dist
                            @ 'ittf'
                            @ 'models'
                            @ 'cheatsheets'
                            @ name
                            @ 'index.ittf.ittf'

                    _ wizziProds.mTreeFs
                        @ csPath
                        {
                        ._ then
                            =>
                                param result
                                    :any
                                const mTree = result.mTree
                                # items are ittf fragments that will be ittf/prettified and generated
                                var _all_items = []
                                # the resulting cheatsheet context object that will be returned when built
                                var result
                                    :any
                                    {
                                        @ name name
                                        [ elements
                            
                                foreach itemTop in mTree.nodes[0].children
                                    if itemTop.n !== 'element'
                                        # set properties of result
                                        set result[itemTop.n] = itemTop.v
                                
                                foreach itemTop in mTree.nodes[0].children
                                    $$ loog itemTop.n, itemTop.v
                                    if itemTop.n === 'element'
                                        var elementResult
                                            :any
                                            {
                                                @ name itemTop.v
                                                [ items
                                        foreach itemEl in itemTop.children
                                            if itemEl.n === 'item'
                                                # ittf fragment
                                                var itemResult
                                                    :any
                                                    {
                                                        @ schema result.schema
                                                        @ render 'artifact'
                                                foreach item in itemEl.children
                                                    if item.n === 'ittf'
                                                        $$ loog item.n, mTree.toIttf(item.children[0])
                                                        if item.children.length == 1
                                                            if (result.schema === 'json' && (item.children[0].n === '{' || item.children[0].n === '[')) ||
                                                                \b item.children[0].n === wizziMaps.ittfRootFromSchema(result.schema) ||
                                                                \b wizziMaps.ittfRootFromSchema(result.schema) === 'any'
                                                                # is already ok, has the correct root
                                                                set itemResult[item.n] = mTree.toIttf(item.children[0])
                                                                set itemResult[item.n + 'Wrapped'] = itemResult[item.n]
                                                            else
                                                                # wrap it
                                                                var ittfNode
                                                                    _ wrapperForSchema
                                                                        @ result.schema
                                                                foreach node in item.children
                                                                    _ ittfNode.children.push
                                                                        @ node
                                                                set itemResult[item.n] = mTree.toIttf(item.children[0])
                                                                set itemResult[item.n + 'Wrapped'] = mTree.toIttf(ittfNode)
                                                        else
                                                            # wrap them
                                                            var ittfNode
                                                                _ wrapperForSchema
                                                                    @ result.schema
                                                            foreach node in item.children
                                                                _ ittfNode.children.push
                                                                    @ node
                                                            set itemResult[item.n] = mTree.toIttf(item.children[0])
                                                            set itemResult[item.n + 'Wrapped'] = mTree.toIttf(ittfNode)
                                                    elif item.n === 'expected'
                                                        set itemResult[item.n]
                                                            _ buildExpected
                                                                @ item
                                                                ._ trim
                                                    else
                                                        set itemResult[item.n] = item.v
                                                        $$ loog item.n, item.v
                                                _ elementResult.items.push
                                                    @ itemResult
                                                _ _all_items.push
                                                    @ itemResult
                                            else
                                                set elementResult[itemEl.n] = itemEl.v
                                        _ result.elements.push
                                            @ elementResult
                                
                                var item_count = 0
                                iife next
                                    var item = _all_items[item_count++]
                                    if !item
                                        return
                                            _ resolve
                                                @ result
                                    $$ loog 'contextLoader.prettify', JSON.stringify(item.ittf, null, 2)
                                    _ pretty.prettifyIttfHtmlFromString
                                        @ item.ittf
                                        a_cb_no_throw${'('} pretty )
                                            if err
                                                set item.ittfPretty = JSON.stringify(err, null, 4)
                                            else
                                                set item.ittfPretty = pretty
                                            if item.render === 'script'
                                                _ wizziProds.mTreeBuildUpScript
                                                    @ 'index.ittf.ittf'
                                                    {
                                                        { ['index.ittf.ittf']
                                                            @ type 'CODE' 
                                                            @ contents item.ittfWrapped
                                                    {
                                                    ._ then
                                                        => 
                                                            param mTreeBuildUpScript
                                                                :any
                                                            if mTreeBuildUpScript.__is_error
                                                                set item.generated = verify.htmlEscape(JSON.stringify(mTreeBuildUpScript, null, 2))
                                                            else
                                                                set item.generated = verify.htmlEscape(mTreeBuildUpScript)
                                                            set item.generated = item.generated ? item.generated.trim() : 'No result. Something went wrong!'
                                                            _ next
                                                    ._ catch
                                                        =>
                                                            param err
                                                                :any
                                                            set item.generated
                                                                _ stringify
                                                                    @ err
                                                                    @ null
                                                                    @ 2
                                                            _ next
                                            else
                                                const mainIttf = 'index.' + item.schema + '.ittf'
                                                _ wizziProds.generateArtifact
                                                    @ mainIttf
                                                    {
                                                        { [mainIttf]
                                                            @ type 'CODE' 
                                                            @ contents item.ittfWrapped
                                                    {
                                                        { artifactContext
                                                            @ noUseStrict true
                                                            @ noGeneratorComments true
                                                    ._ then
                                                        => 
                                                            param result
                                                            const artifactText = verify.htmlEscape(result.artifactContent)
                                                            set item.generated = artifactText ? artifactText.trim() : 'No result. Something went wrong!'
                                                            _ next
                                                    ._ catch
                                                        =>
                                                            param err
                                                                :any
                                                            set item.generated
                                                                _ stringify
                                                                    @ err
                                                                    @ null
                                                                    @ 2
                                                            _ next
                        v08/ts/catch_reject${'('} cheatsheetApi.getCheatsheet )

	function wrapperForSchema
		param schema
            :string
		if schema === 'js' || schema === 'jsx'
			return
				{
					@ n 'module'
					[ children
						{
							@ n 'kind'
							@ v 'react'
							[ children
		elif schema === 'ts'
			return
				{
					@ n 'module'
					[ children
		else
			return
				{
					@ n schema
					[ children

    function buildExpected
		param ittf
            :any
		param sb
            :optional
            :any
		param indent
            :optional
            :number
		if typeof sb === 'undefined'
			set sb = []
			foreach item in ittf.children
				_ buildExpected
					@ item
					@ sb
					@ 0
			return
				_ verify.htmlEscape
					_ sb.join('')
		else
			_ sb.push
				@ new Array(indent).join(' ') 
			_ sb.push
				@ ittf.v + '\n'
			foreach item in ittf.children
				_ buildExpected
					@ item
					@ sb
					@ (indent || 0) + 4
            # to avoid ts error
            return ''

    export
        @ getCheatsheet

