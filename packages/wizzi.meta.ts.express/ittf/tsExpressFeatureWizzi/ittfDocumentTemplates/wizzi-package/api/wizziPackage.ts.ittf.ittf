$group

    import path from 'path'
    import wizzi from '@wizzi/factory'
    import
        @ verify
        @ fSystem
        from 'wizzi-utils'
    import
        @ searchConfigFile
        from './packageFs'
    import 
        @ wizziProds
        from '../../wizzi'
    const file = fSystem.vfile()
    +
    let moduleName = "wizziPackage.packageGenerator"

    +
    async-function generateFromConfigFile
        param packageFolderPath
            :string
        param configName
            :string
            :optional
        set moduleName += '.generateFromConfigFile'
        r_promise${'('})
            _ searchConfigFile
                @ packageFolderPath
                @ configName
                a_then_async${'('} configPath)
                    if !configPath
                        error moduleName + ' config file "wizzi.config.' + (configName ? configName + '.' : '') + 'js" not found'
                        r_reject${'('})
                            {
                                @ message moduleName + ' config file "wizzi.config.' + (configName ? configName + '.' : '') + 'js" not found'
                        return
                    const configInstance = await import(configPath)
                    $$ loogmoduleName + '.configInstance', configInstance
                    const x_pluginsBaseFolder = configInstance.pluginsBaseFolder || __dirname
                    if !configInstance.pluginsBaseFolder
                        error moduleName + ' - pluginsBaseFolder not set'
                        error moduleName + ' - pluginsBaseFolder defaulted to ' + x_pluginsBaseFolder
                    var x_pluginsItems = []
                    if configInstance.plugins && configInstance.plugins.length > 0
                        set x_pluginsItems = configInstance.plugins
                    else
                        _ x_pluginsItems.push('wizzi-core')
                        _ x_pluginsItems.push('wizzi-js')
                        _ x_pluginsItems.push('wizzi-web')
                        error moduleName + ' - plugins not found in wizzi.config'
                        error moduleName + ' - using default plugins: "wizzi-core", "wizzi-js", "wizzi-web"'
                    _ wizziProds.executeJobFs
                        { 
                            @ storeKind 'filesystem'
                            @ wfjobName configInstance.wfjobName
                            @ wfjobIttfDocumentUri configInstance.wfjobPath
                            @ plugins x_pluginsItems
                            @ pluginsBaseFolder x_pluginsBaseFolder
                            @ globalContext configInstance.globalContext
                            @ productionOptions
                                { 
                                    @ indentSpaces 4
                                    @ basedir __dirname
                                    @ verbose 2
                                    { dumps
                                        @ dumpsBaseFolder path.join(__dirname, '_dumps')
                                        { mTreeBuildupJsWizziScript
                                            @ dump false
                            ${'$'}*
                            { config
                                @ wfBaseFolder __dirname
                                @ plugins x_pluginsItems
                                @ pluginsBaseFolder x_pluginsBaseFolder
                            { job
                                @ name configInstance.wfjobName
                                @ ittfDocumentUri configInstance.wfjobPath
                                @ productionOptions
                                    _ wizzi.productionOptions
                                        { 
                                            @ indentSpaces 4
                                            @ basedir __dirname
                                            @ verbose 2
                                            { dumps
                                                @ dumpsBaseFolder path.join(__dirname, '_dumps')
                                                { mTreeBuildupJsWizziScript
                                                    @ dump false
                                @ globalContext configInstance.globalContext
                            *${'$'}
                        a_then_catch_reject${'('} resultWizziJob, :any, , wizziPackage.packageGenerator.generateFromConfigFile.wizziProds.executeJobFs)
                            if configInstance.schemas && configInstance.schemas.length > 0
                                _ generateSchemas
                                    @ configInstance.schemas
                                    _ path.dirname
                                        @ configInstance.wfjobPath
                                    @ configInstance.destPath
                                    { 
                                        @ items x_pluginsItems
                                        @ baseFolder x_pluginsBaseFolder
                                    a_then${'('} resultSchemaGen )
                                        r_resolve${'('})
                                            {
                                                @ resultWizziJob
                                                @ resultSchemaGen
                                    catch_reject${'('} err )
                                        r_reject${'('})
                                            {
                                                @ message "wizziPackage.packageGenerator.generateFromConfigFile error"
                                                @ err wizzi.printWizziJobError(configInstance.wfjobName, err)
                            r_resolve${'('})
                                {
                                    @ resultWizziJob
                catch_reject${'('} err )
                    r_reject${'('})
                        {
                            @ message "wizziPackage.packageGenerator.searchConfigFile error"
                            @ err 


    function generateSchemas
        param schemasToGen
            :[
                :string
		param packageIttfSourceFolder
            :string
		param destPath
            :string
        param plugins
            :any
        r_promise${'('})
            _ Promise.all
                _ schemasToGen.map
                    async=> 
                        param schemaName
                            :string
                        return 
                            await 
                                _ generateSchema
                                    @ schemaName
                                    @ packageIttfSourceFolder
                                    @ destPath
                                    @ plugins
                a_then${'('} values )
                    r_resolve${'('})
                        @ values
                catch_reject${'('} err )
                    r_reject${'('})
                        {
                            @ message "wizziPackage.packageGenerator.generateSchemas error"
                            @ err 

    +
    async-function generateSchema
        param schemaName
            :string
        param packageIttfSourceFolder
            :string
        param destPath
            :string
        param globalContext
            :any
            :optional
        param plugins
            :any
            :optional
        param pluginsBaseFolder
            :string
            :optional
        r_promise${'('})
            $$ loog 'wizziPackage.packageGenerator.generateSchema', schemaName
            var options = {}
            if plugins
                set options
                    {
                        @ plugins plugins.items
                        @ pluginsBaseFolder plugins.baseFolder
            _ wizziProds.generateWizziModelTypes
                { 
                    @ storeKind "filesystem"
                    @ wfschemaName schemaName
                    @ wfschemaIttfDocumentUri path.join(packageIttfSourceFolder, 'lib', 'wizzi', 'schemas', schemaName + '.wfschema.ittf')
                    @ wfschemaOutputPackageFolder destPath
                    @ globalContext globalContext
                    @ plugins plugins
                    @ pluginsBaseFolder pluginsBaseFolder
                a_then${'('} result )
                    $$ loog 'wizziPackage.packageGenerator.generateSchema.result', result
                    r_resolve${'('} result )
                catch_reject${'('} wizziPackage.packageGenerator.generateSchema.wizziProds.generateWizziModelTypes )
    +
    export
        @ generateFromConfigFile
        @ generateSchemas
        @ generateSchema