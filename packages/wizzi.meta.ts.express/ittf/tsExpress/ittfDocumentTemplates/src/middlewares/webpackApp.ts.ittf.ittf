$group

    import path from 'path'
    import 
        @ Application
        from 'express'
    import express from 'express'
    import webpack from 'webpack'
    import {Configuration} from 'webpack'
    import webpackDevMiddleware from 'webpack-dev-middleware'
    ${'$'}if wzCtx.Build.useWebpackApp
        ${'$'}foreach item in wzCtx.Build.webpackApp.items
            import
                @ config
                    as config_${'$'}{item.name}
                from '../site/webpacks/${'$'}{item.name}/webpack.config'
        ${'$'}foreach item in wzCtx.Build.webpackApp.items
            $*
            const config_${'$'}{item.name}_typed
                :ref webpack.Configuration
                = config_${'$'}{item.name}         
            *$
            log 'WebpackAppMiddleware config_${'$'}{item.name}', config_${'$'}{item.name}
    +
    export 
        const WebpackAppMiddleware
            => 
                param app
                    :ref Application
                ${'$'}if wzCtx.Build.useWebpackApp
                    ${'$'}foreach item in wzCtx.Build.webpackApp.items
                        const outputPublicPath
                            ( 
                                + config_${'$'}{item.name}
                                    :as 
                                        :ref webpack.Configuration
                            . output
                            . publicPath
                            :as 
                                :string 
                        if process.env.NODE_ENV === 'production' || process.env.NODE_ENV === 'test'
                            _ app.use
                                @ '/webpacks/${'$'}{item.name}/dist'
                                _ express.static(outputPublicPath)
                        else
                            const compiler 
                                :ref webpack.Compiler
                                = webpack(config_${'$'}{item.name} as webpack.Configuration)
                            _ app.use
                                _ webpackDevMiddleware
                                    @ compiler
                                    { 
                                        @ writeToDisk !!${'$'}{item.writeToDisk}
                                        @ publicPath outputPublicPath
                            log 'WebpackAppMiddleware.pack ${'$'}{item.name} on path', outputPublicPath, 'writeToDisk',  !!${'$'}{item.writeToDisk}