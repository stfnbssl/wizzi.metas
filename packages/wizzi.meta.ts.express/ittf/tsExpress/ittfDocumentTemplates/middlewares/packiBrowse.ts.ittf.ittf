$group
    
    import util from 'util'
    import path from 'path'
    import stringify from 'json-stringify-safe'
    import parseUrl from 'parseurl'
    import
        @ Application
        @ RequestHandler
        @ Request
        @ Response
        from 'express'
    import
        @ artifactApi
        @ pluginApi
        @ packageApi
        from '../features/packiProductions'
    import
        @ MiddlewareType
        from '../features/app/types'
    import
        @ config
        from '../features/config'
    import
        @ sendFailure
        @ sendHtml
        from '../utils/sendResponse'
    +
    const myname = 'express.middleware.packiBrowse'
    const packiSiteBrowsePackageItemPath = '/~p'
    const packiSiteBrowsePluginItemPath = '/~l'
    const packiSiteBrowsePath = '/~-'
    const packiUserBrowsePath = '/~'
    +
    export
        const PackiBrowseMiddleware
            :ref MiddlewareType
            =
                =>
                    param app
                        :ref Application
                    _ app.use(packiSiteBrowsePackageItemPath, packiBrowseMiddleware('package', false))
                    _ app.use(packiSiteBrowsePluginItemPath, packiBrowseMiddleware('plugin', false))
                    _ app.use(packiSiteBrowsePath, packiBrowseMiddleware('artifact', true))
                    _ app.use(packiUserBrowsePath, packiBrowseMiddleware('artifact', false))
    
    function getPackiBrowseContext
        param request
            :ref Request
        return
            _ Object.assign
                {
                @ request.query 
                {
                    @ isWizziStudio ${'$'}{wzConfigIsDevelopment}
                    { locals
                        @ user (request.session as any).user                    

    function packiBrowseMiddleware
        param packiProduction
            :string
        param isSiteLevel
            :boolean
        :return
            :ref RequestHandler
        return
            async=>
                param request
                    :ref Request
                param response
                    :ref Response
                param next
                    :ref Function
                if request.method !== 'GET' && request.method !== 'HEAD'
                    return next()
                const parsedUrl = parseUrl(request)
                if !parsedUrl || !parsedUrl.pathname
                    return next()
                ${'$'}${'$'} loog myname + '.parsedUrl', parsedUrl
                const pathname = decodeURIComponent(parsedUrl.pathname)
                const parts = pathname.split('/')
                let owner, productionName
                if isSiteLevel 
                    set owner = "stfnbssl"
                    set productionName = parts.slice(1).join('/')
                else
                    set owner = parts[1] 
                    set productionName = parts.slice(2).join('/')
                ${'$'}${'$'} loog myname + '.owner', owner, 'productionName', productionName, 'context', request.query.context
                +
                _ _executeBrowse
                    @ packiProduction
                    @ owner
                    @ productionName
                    @ request
                    @ response
    
    ${'$'}*
    function packiUserBrowseMiddleware
        :return
            :ref RequestHandler
        return
            async=>
                param request
                    :ref Request
                param response
                    :ref Response
                param next
                    :ref Function
                if request.method !== 'GET' && request.method !== 'HEAD'
                    return next()
                const parsedUrl = parseUrl(request)
                if !parsedUrl || !parsedUrl.pathname
                    return next()
                log myname + '.parsedUrl', parsedUrl
                const pathname = decodeURIComponent(parsedUrl.pathname)

                const parts = pathname.split('/')
                const owner = parts[1] 
                const productionName = parts.slice(2).join('/')
                log myname + '.owner', owner, 'productionName', productionName, 'context', request.query.context
                +
                _ _executeBrowse
                    @ 'artifact'
                    @ owner
                    @ productionName
                    @ request
                    @ response
    
    function packiSiteBrowseMiddleware
        :return
            :ref RequestHandler
        return
            async=>
                param request
                    :ref Request
                param response
                    :ref Response
                param next
                    :ref Function
                if request.method !== 'GET' && request.method !== 'HEAD'
                    return next()
                const parsedUrl = parseUrl(request)
                if !parsedUrl || !parsedUrl.pathname
                    return next()
                log myname + '.parsedUrl', parsedUrl
                const pathname = decodeURIComponent(parsedUrl.pathname)

                const parts = pathname.split('/')
                const owner = "stfnbssl"
                const productionName = parts.slice(1).join('/')
                log myname + '.owner', owner, 'productionName', productionName, 'context', request.query.context
                +
                _ _executeBrowse
                    @ 'artifact'
                    @ owner
                    @ productionName
                    @ request
                    @ response
    
    *${'$'}

    function _executeBrowse
        param packiProduction
            :string
        param owner
            :string
        param productionName
            :string
        param request
            :ref Request
        param response
            :ref Response
        +
        let productionApi
        if packiProduction == 'package'
            set productionApi = packageApi
        elif packiProduction == 'plugin'
            set productionApi = pluginApi
        else
            set productionApi = artifactApi
        +
        if request.query.meta && (request.query.meta as string).toLowerCase() == 'mtree'
            _ productionApi.getArtifactMTree_withPrepare
                @ owner
                @ productionName
                @ request.query.context as string
                _ getPackiBrowseContext
                    @ request
                ._ then
                    => 
                        param result
                            :any
                        ${'$'}${'$'} loog myname + 'getArtifactMTree_withPrepare.result.length:', result.length
                        _ response.status(200)
                        _ response.set('Content-Type', result.contentType)
                        _ response.set('Content-Length', result.contentLength.toString())
                        _ response.set('Cache-Control', 'private, no-cache, no-store, must-revalidate')
                        _ response.set('Expires', '-1')
                        _ response.set('Pragma', 'no-cache')
                        _ response.send(result.content)
                v08/ts/catch_fail_html${'('}' + myname + '_executeBrowse.artifactApi.getArtifactMTree )
        elif request.query.meta && (request.query.meta as string).toLowerCase() == 'script'
            _ productionApi.getArtifactMTreeBuildUpScript_withPrepare
                @ owner
                @ productionName
                @ request.query.context as string
                _ getPackiBrowseContext
                    @ request
                ._ then
                    => 
                        param result
                            :any
                        ${'$'}${'$'} loog myname + 'getArtifactMTreeBuildUpScript_withPrepare.result.length:', result.length
                        _ response.status(200)
                        _ response.set('Content-Type', result.contentType)
                        _ response.set('Content-Length', result.contentLength.toString())
                        _ response.set('Cache-Control', 'private, no-cache, no-store, must-revalidate')
                        _ response.set('Expires', '-1')
                        _ response.set('Pragma', 'no-cache')
                        _ response.send(result.content)
                v08/ts/catch_fail_html${'('} ' + myname + '_executeBrowse.artifactApi.getArtifactMTree )
        elif request.query.meta && (request.query.meta as string).toLowerCase() == 'raw'
            _ productionApi.getArtifactGeneration_withPrepare
                @ owner
                @ productionName
                @ request.query.filepath as string 
                @ request.query.context as string
                _ getPackiBrowseContext
                    @ request
                ._ then
                    => 
                        param result
                            :any
                        ${'$'}${'$'} loog myname + 'getArtifactGeneration_withPrepare.result.length:', result.length
                        _ response.status(200)
                        _ response.set('Content-Type', 'text/plain')
                        _ response.set('Content-Length', result.contentLength.toString())
                        _ response.set('Cache-Control', 'private, no-cache, no-store, must-revalidate')
                        _ response.set('Expires', '-1')
                        _ response.set('Pragma', 'no-cache')
                        _ response.send(result.content)
                v08/ts/catch_fail_html${'('} ' + myname + '_executeBrowse.artifactApi.getArtifactGeneration )
        else
            _ productionApi.getArtifactGeneration_withPrepare
                @ owner
                @ productionName
                @ request.query.filepath as string 
                @ request.query.context as string
                _ getPackiBrowseContext
                    @ request
                ._ then
                    => 
                        param result
                            :any
                        ${'$'}${'$'} loog myname + 'getArtifactGeneration_withPrepare.result.length:', result.length
                        _ response.status(200)
                        _ response.set('Content-Type', result.contentType)
                        _ response.set('Content-Length', result.contentLength.toString())
                        _ response.set('Cache-Control', 'private, no-cache, no-store, must-revalidate')
                        _ response.set('Expires', '-1')
                        _ response.set('Pragma', 'no-cache')
                        _ response.send(result.content)
                v08/ts/catch_fail_html${'('} ' + myname + '_executeBrowse.artifactApi.getArtifactGeneration )