$group

    ${'$'}
        var schema = md.schema;

    # see https://mongoosejs.com/docs/schematypes.html

    import mongoose 
        from "mongoose"
    import 
        @ ModelBuilderType
        from "../../app/types"
    +
    export 
        :interface I${'$'}{schema.Name}
            :extends mongoose.Document
            ${'$'}foreach field in schema.fields            
                ${'$'}if field.type != 'oid'
                    :p ${'$'}{field.name}
                        ${'$'}if field.type == 'string'
                            :string
                        ${'$'}elif field.type == 'number' || field.type == 'integer' || field.type == 'float'
                            :number
                        ${'$'}elif field.type == 'date'
                            :ref Date
                        ${'$'}elif field.type == 'buffer'
                            :ref Buffer
                        ${'$'}elif field.type == 'boolean'
                            :boolean
                        $*
                        ${'$'}elif field.type == 'mixed'
                            :@ type Mixed
                        *$
                        ${'$'}elif field.type == 'id'
                            :{
                        ${'$'}elif field.type == 'array'
                            :[
                        ${'$'}elif field.type == 'decimal'
                            :number
                        $*
                        ${'$'}elif field.type == 'map'
                            @ type Map
                        ${'$'}elif field.type == 'schema'
                            @ type Schema                            
                        *$
    +    
    const ${'$'}{schema.Name}
        new mongoose.Schema
            { 
                ${'$'}foreach field in schema.fields
                    ${'$'}if field.type != 'oid'
                        { ${'$'}{field.name}
                            ${'$'}if field.type == 'string'
                                @ type String
                            ${'$'}elif field.type == 'number' || field.type == 'integer' || field.type == 'float'
                                @ type Number
                            ${'$'}elif field.type == 'date'
                                @ type Date
                            ${'$'}elif field.type == 'buffer'
                                @ type Buffer
                            ${'$'}elif field.type == 'boolean'
                                @ type Boolean
                            ${'$'}elif field.type == 'mixed'
                                @ type Mixed
                            ${'$'}elif field.type == 'id'
                                @ type ObjectId
                            ${'$'}elif field.type == 'array'
                                @ type Array
                            ${'$'}elif field.type == 'decimal'
                                @ type Decimal128
                            ${'$'}elif field.type == 'map'
                                @ type Map
                            ${'$'}elif field.type == 'schema'
                                @ type Schema                            
            { 
                @ collection '${'$'}{schema.collectionName}'
    +
    let ${'$'}{schema.name}Model
        :ref mongoose.Model
            :param 
                :ref I${'$'}{schema.Name}
    +    
    export
        function Get${'$'}{schema.Name}Model
            return ${'$'}{schema.name}Model
    +    
    export
        const ${'$'}{schema.Name}ModelBuilder
            :ref ModelBuilderType
            { 
                @ buildModel
                    => 
                        param options
                            :any
                            :optional
                        set ${'$'}{schema.name}Model
                            _ mongoose.model
                                :param 
                                    :ref I${'$'}{schema.Name}
                                @ '${'$'}{schema.Name}'
                                @ ${'$'}{schema.Name}
                        return ${'$'}{schema.name}Model
                @ applyExtraSetup
                    =>
                        param options
                            :any
                            :optional