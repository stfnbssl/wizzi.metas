$group

    const path = require('path')

    var md = module.exports = {}

    +
    set md.parseFilePath
        function
            param filePath
            const nameParts = path.basename(filePath).split('.')
            if nameParts[nameParts.length - 1] === 'ittf'
                return
                    {
                        @ isIttfDocument true
                        @ schema nameParts[nameParts.length - 2]
                        @ seedname nameParts.slice(0, -2).join('.')
            else
                return
                    {
                        @ isIttfDocument false
                        @ schema nameParts[nameParts.length - 1]
                        @ seedname nameParts.slice(0, -1).join('.')
    +
    
    +
	const schemaArtifactMap
		{
            @ css 'css/document'
            @ html 'html/document'
            @ ittf 'ittf/tojson'
			@ js 'js/module'
            @ json 'json/document'
            @ jsx 'js/module'
            @ md 'md/tohtml'
			@ scss 'scss/document'
			@ svg 'svg/document'
            @ text 'text/document'
			@ ts 'ts/module'
            @ tsx 'ts/module'
			@ vtt 'vtt/document'
            @ xml 'xml/document'
            @ yaml 'yaml/document'
            @ yml 'yaml/document'
			
	set md.artifactNameFromFileSchema
        function 
            param schema
            $$ loog 'artifactNameFromFileSchema', schema, schemaArtifactMap[schema]
            return schemaArtifactMap[schema]
    +
	const schemaIttfRootMap
		{
            @ css 'css'
            @ html 'html'
            @ ittf 'any'
			@ js 'module'
            @ json '{'
            @ jsx 'module'
            @ md 'md'
			@ scss 'scss'
			@ svg 'svg'
            @ text 'text'
			@ ts 'module'
            @ tsx 'module'
			@ vtt 'vtt'
            @ xml 'xml'
            @ yaml 'yaml'
			
    set md.ittfRootFromSchema
        function 
            param schema
            $$ loog 'ittfRootFromSchema', schema, schemaIttfRootMap[schema]
            return schemaIttfRootMap[schema]   

    +
    const schemaPluginMap
        {
            [ css
                @ 'wizzi-web'
            [ graphql
                @ 'wizzi-web'
            [ html
                @ 'wizzi-web'
                @ 'wizzi-js'
                @ 'wizzi-core'
            [ ittf
                @ 'wizzi-core'
            [ js
                @ 'wizzi-js'
            [ json
                @ 'wizzi-core'
            [ scss
                @ 'wizzi-web'
            [ text
                @ 'wizzi-core'
            [ ts
                @ 'wizzi-js'
            [ vtt
                @ 'wizzi-web'
            [ vue
                @ 'wizzi-web'
            [ wfjob
                @ 'wizzi-core'
            [ wfschema
                @ 'wizzi-core'
            [ xml
                @ 'wizzi-core'
            [ yaml
                @ 'wizzi-core'
    
    set md.pluginsFor
        function 
            param file
            const nameParts = path.basename(file).split('.')
            if nameParts[nameParts.length - 1] === 'ittf'
                return schemaPluginMap[nameParts[nameParts.length - 2]] || []
            return []
    +
    set md.generatorFor
        function 
            param filePath
            const pf = md.parseFilePath(filePath)
            if pf.isIttfDocument
                return md.artifactNameFromFileSchema(pf.schema)
            return undefined
    +
    const extSchemaMap
        {
            @ '.css' 'css'
            @ '.graphql' 'graphql'
            @ '.html' 'html'
            @ '.ittf' 'ittf'
            @ '.js' 'js'
            @ '.json' 'json'
            @ '.jsx' 'js'
            @ '.md' 'md'
            @ '.svg' 'svg'
            @ '.text' 'text'
            @ '.ts' 'ts'
            @ '.tsx' 'ts'
            @ '.vtt' 'vtt'
            @ '.xml' 'xml'
            @ '.yaml' 'yaml'
            @ '.yml' 'yaml'
    +
    set md.schemaFromExtension
        function 
            param extension
            return extSchemaMap[extension]
    +
    const schemaTransformerMap
        {
            @ meta 'ittf/cheatsheet'
    +
    set md.transformerFor
        function 
            param filePath
            const pf = md.parseFilePath(filePath)
            if pf.isIttfDocument
                return schemaTransformerMap[pf.schema]
            return undefined
    +
    set md.schemaFromFilePath
        function 
            param filePath
            const pf = md.parseFilePath(filePath)
            if pf.isIttfDocument
                return pf.schema
            return undefined
    +
    set md.wrapperForSchema
        function 
            param schema
            if schema === 'js' || schema === 'jsx'
                return
                    {
                        @ n 'module'
                        [ children
                            {
                                @ n 'kind'
                                @ v 'react'
                                [ children
            elif schema === 'ts'
                return
                    {
                        @ n 'module'
                        [ children
            else
                return
                    {
                        @ n schema
                        [ children

    const extContentTypeMap
        {
            @ '.css' 'text/css'
            @ '.gif' 'image/gif'
            @ '.html' 'text/html'
            @ '.ittf' 'text/plain'
            @ '.jpeg' 'image/jpeg'
            @ '.jpg' 'image/jpg'
            @ '.js' 'text/javascript'
            @ '.jsx' 'text/javascript'
            @ '.json' 'application/json'
            @ '.md' 'text/html'
            @ '.png' 'image/png'
            @ '.scss' 'text/scss'
            @ '.svg' 'image/svg+xml'
            @ '.ts' 'text/typescript'
            @ '.tsx' 'text/typescript'
            @ '.ttf' 'application/x-font-ttf'
            @ '.txt' 'text/plain'
            @ '.vtt' 'text/vtt'
            @ '.woff' 'application/x-font-woff'
            @ '.xml' 'text/xml'
            @ '.yaml' 'text/yanl'
            @ '.yml' 'text/yanl'
                
    +
    set md.contentTypeFor
        function 
            param filePath
            const ittfSchema = md.schemaFromFilePath(filePath)
            if ittfSchema
                return extContentTypeMap['.' + ittfSchema]
            return undefined