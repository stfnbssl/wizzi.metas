$group
    
    ${'$'}if wzCtx.Build.useWizziJsonFactory    
        +
        set module.exports.inferAndLoadContextJson
            async-function 
                param wf
                param files
                param filePath
                param exportName
                return
                    new Promise
                        =>
                            param resolve
                            param reject
                            if !verify.isObject(files)
                                return
                                    _ reject
                                        {
                                            @ action 'wizzi.productions.inferAndLoadContextJson'
                                            @ message 'files parameter must be an object of type PackiFiles'
                                            @ files
                            const pf = wizziMaps.parseFilePath(filePath)
                            if pf.isIttfDocument && pf.schema !== 'json'
                                var twinJsonBaseName = pf.seedname + '.json.ittf'
                                $$ loog 'features.wizzi.productions.inferAndLoadContextJson.twinJsonBaseName', twinJsonBaseName
                                const twinDocumentUri
                                    _ Object.keys(files).find
                                        =>
                                            param k
                                            _ k.endsWith('/' + twinJsonBaseName)
                                $$ loog 'features.wizzi.productions.inferAndLoadContextJson.twinDocumentUri', twinDocumentUri, Object.keys(files)
                                if twinDocumentUri
                                    _ loadModelInternal
                                        @ wf
                                        _ ensurePackiFilePrefix(twinDocumentUri)
                                        {
                                        ._ then
                                            =>
                                                param model
                                                _ resolve
                                                    {
                                                        @ [exportName] model
                                        ._ catch
                                            =>
                                                param err
                                                _ reject(err)
                                else
                                    _ resolve
                                        {
                            else
                                _ resolve
                                    {
    +
    set module.exports.inferAndLoadContextFs
        async-function 
            param filePath
            param exportName
            return
                new Promise
                    =>
                        param resolve
                        param reject
                        const pf = wizziMaps.parseFilePath(filePath)
                        if pf.isIttfDocument && pf.schema !== 'json'
                            var twinJsonPath = path.join(path.dirname(filePath), pf.seedname + '.json.ittf')
                            if fs.existsSync(twinJsonPath)
                                _ loadModelFs
                                    @ twinJsonPath
                                    {
                                    ._ then
                                        =>
                                            param model
                                            _ resolve
                                                {
                                                    @ [exportName] model
                                    ._ catch
                                        =>
                                            param err
                                            _ reject(err)
                            else
                                _ resolve
                                    {
                        else
                            _ resolve
                                {