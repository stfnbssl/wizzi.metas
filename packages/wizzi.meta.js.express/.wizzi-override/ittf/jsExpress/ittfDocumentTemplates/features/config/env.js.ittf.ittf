$group

    ${'$'}if wzCtx.Build.useConfig
        import path from 'path'
        ${'$'}if wzCtx.type == 'module'
            import { dirname } from 'path'
            import { fileURLToPath } from 'url'
            const __dirname = dirname(fileURLToPath(import.meta.url))

        ${'$'}if wzCtx.Build.config.useEnvalid
            import dotenv from 'dotenv'
            import 
                @ cleanEnv
                @ str
                @ bool
                @ port
                from 'envalid'
        
        let config = null

        function validateEnv
            ${'$'}if wzCtx.Build.config.useEnvalid
                _ dotenv.config
                let checkedEnv
                    _ cleanEnv
                        @ process.env
                        { 
                            @ PORT port()
                            @ SESSION_SECRET str()
                            ${'$'}if wzCtx.Build.useMongoDb
                                @ MONGO_PASSWORD str()
                                @ MONGO_PATH str()
                                @ MONGO_USER str()
                            ${'$'}if wzCtx.Build.useAuthentication
                                ${'$'}if wzCtx.Build.authentication.useGithub
                                    @ GITHUB_CLIENT_ID str()
                                    @ GITHUB_CLIENT_SECRET str()
                                    @ GITHUB_CALLBACK_URL str()
                            ${'$'}if wzCtx.Build.useCors
                                @ CORS_CLIENT_ORIGIN str()
                return checkedEnv
            ${'$'}else
                return
                    {
                        @ PORT ${'$'}{wzCtx.App.port}
                        @ SESSION_SECRET "axr45hngmuoil9********0ofgt*kjj6767648%$Â£3f5&/4bnsa-----qq4)$35670qq4q"
                        ${'$'}if wzCtx.Build.useMongoDb
                            @ MONGO_USER "${'$'}{wzCtx.Build.mongoDb.user}"
                            @ MONGO_PASSWORD "${'$'}{wzCtx.Build.mongoDb.paddword}"
                            @ MONGO_PATH "${'$'}{wzCtx.Build.mongoDb.dbPath}/${'$'}{wzCtx.Build.mongoDb.dbName}"
                        ${'$'}if wzCtx.Build.useAuthentication
                            ${'$'}if wzCtx.Build.authentication.useGithub
                                @ GITHUB_CLIENT_ID "${'$'}{wzCtx.Build.authentication.github.clientID}"
                                @ GITHUB_CLIENT_SECRET "${'$'}{wzCtx.Build.authentication.github.clientSecret}"
                                @ GITHUB_CALLBACK_URL "${'$'}{wzCtx.Build.authentication.github.callbackURL}"
                        ${'$'}if wzCtx.Build.useCors
                            @ CORS_CLIENT_ORIGIN "${'$'}{wzCtx.Build.cors.clientOrigin}"

        export default
            function create
                if config == null
                    const __ittfPath = path.join(__dirname, '..', '..', '..', '..', 'ittf');
                    const checkedEnv
                        _ validateEnv
                    set config =
                        { 
                            @ port checkedEnv.PORT
                            @ sessionSecret checkedEnv.SESSION_SECRET
                            ${'$'}if wzCtx.Build.useMongoDb
                                @ mongoPath checkedEnv.MONGO_PATH
                                @ mongoUser checkedEnv.MONGO_USER
                                @ mongoPassword checkedEnv.MONGO_PASSWORD
                            ${'$'}if wzCtx.Build.useAuthentication
                                ${'$'}if wzCtx.Build.authentication.useGithub
                                    @ githubClientId checkedEnv.GITHUB_CLIENT_ID
                                    @ githubClientSecret checkedEnv.GITHUB_CLIENT_SECRET
                                    @ githubCallbackURL checkedEnv.GITHUB_CALLBACK_URL
                            ${'$'}if wzCtx.Build.useCors
                                @ corsClientOrigin checkedEnv.CORS_CLIENT_ORIGIN
                            @ metaHtmlIttfPath path.join(__ittfPath, 'meta', 'html', 'index.html.ittf')
                            @ metaFolderIttfPath path.join(__ittfPath, 'meta', 'folder', 'index.html.ittf')
                            @ metaHtmlTextPath path.join(__ittfPath, 'meta', 'text', 'index.html.ittf')

                    _ Object.keys(config).forEach
                        => 
                            param element
                            if element.indexOf("Pass") < 0 && element.indexOf("Secr") < 0
                                success 'Created config', element, config[element]
                return config