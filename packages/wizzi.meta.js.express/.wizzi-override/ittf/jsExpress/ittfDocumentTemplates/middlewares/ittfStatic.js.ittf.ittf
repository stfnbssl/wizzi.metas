$group

    ${'$'}if wzCtx.type == 'module'
        import { dirname } from 'path'
        import { fileURLToPath } from 'url'
        const __dirname = dirname(fileURLToPath(import.meta.url))
    
    import stringify from 'json-stringify-safe'
    import util from 'util'
    import path from 'path'
    import fs from 'fs'
    import parseUrl from 'parseurl'
    import 
        @ config
        from '../features/config/index.js'
    import 
        @ wizziProds
        from '../features/wizzi/index.js'
    
    export 
        const IttfStaticMiddleware
            => 
                param app
                success 'IttfStaticMiddleware. Folder served from ', path.resolve(__dirname, '..', '..', 'ittf')
                _ app.use('/ittf', ittfMiddleware(path.resolve(__dirname, '..', '..', 'ittf'), '/ittf'))
    
    const extContentTypeMap
        { 
            @ '.css' 'text/css'
            @ '.gif' 'image/gif'
            @ '.html' 'text/html'
            @ '.jpeg' 'image/jpeg'
            @ '.jpg' 'image/jpg'
            @ '.js' 'text/javascript'
            @ '.json' 'application/json'
            @ '.md' 'text/html'
            @ '.png' 'image/png'
            @ '.scss' 'text/scss'
            @ '.svg' 'image/svg+xml'
            @ '.ttf' 'application/x-font-ttf'
            @ '.txt' 'text/plain'
            @ '.vtt' 'text/vtt'
            @ '.woff' 'application/x-font-woff'
            @ '.yaml' 'text/yanl'
            @ '.yml' 'text/yanl'
            @ '.xml' 'text/xml'
    
    function contentTypeFor
        param file
        const nameParts = path.basename(file).split('.')
        if nameParts[nameParts.length - 1] === 'ittf'
            return extContentTypeMap['.' + nameParts[nameParts.length - 2]]
        return undefined
    
    function ittfMiddleware
        param basePath
        param routePath
        return 
            async=> 
                param req
                param res
                param next
                if req.method !== 'GET' && req.method !== 'HEAD'
                    return 
                        _ next
                const parsedUrl = parseUrl(req)
                if !parsedUrl || !parsedUrl.pathname
                    return 
                        _ next
                const urlPathName = decodeURIComponent(parsedUrl.pathname)
                const pathname = urlPathName
                # ??? urlPathName.substr(routePath.length);
                const filePath = path.join(basePath, pathname)
                const extname = path.extname(filePath)
                $$ loog 'IttfStaticMiddleware. ittf.pathname, pathname, filePath', urlPathName, pathname, filePath, path.extname(filePath)
                if fs.existsSync(filePath) === false
                    $$ loog 'IttfStaticMiddleware. filePath do not exists', filePath
                    return 
                        _ next
                if 
                    test
                        _ fs.statSync(filePath).isDirectory
                    return sendFolderScan(filePath, basePath, req.query.meta, res)
                let contentType = contentTypeFor(filePath)
                $$ loog 'IttfStaticMiddleware. contentType', contentType
                if contentType
                    if req.query.meta && req.query.meta === 'html'
                        try 
                            const documentState
                                await 
                                    _ wizziProds.scanIttfDocument(filePath, path.dirname(basePath))
                            const generated
                                await 
                                    _ wizziProds.generateArtifactFs
                                        @ config.metaHtmlIttfPath
                                        { 
                                            @ wizzischema 'html'
                                            @ path filePath
                                            @ req
                                            @ ds documentState
                            $$ loog 'generated.meta.document', generated.artifactContent
                            _ res.writeHead
                                @ 200
                                { 
                                    @ 'Content-Type' 'text/html'
                                    @ 'Content-Length' generated.artifactContent.length
                            _ res.end(generated.artifactContent)
                        catch ex
                            _ sendError
                                @ res
                                @ ex
                                { 
                                    @ format 'json'
                    return 
                        _ contextLoader
                            @ filePath
                            @ req
                            function 
                                param err
                                param modelContext
                                if err
                                    _ res.writeHead
                                        @ 200
                                        { 
                                            @ 'Content-Type' 'application/json'
                                    return res.end(err)
                                _ wizziProds.generateArtifactFs(filePath, modelContext).then
                                    => 
                                        param generated
                                        $$ loog 'IttfStaticMiddleware. generated.artifactContent', generated.artifactContent
                                        _ res.writeHead
                                            @ 200
                                            { 
                                                @ 'Content-Type' contentType
                                                @ 'Content-Length' generated.artifactContent.length
                                        _ res.end(generated.artifactContent)
                                    ._ catch
                                        => 
                                            param err
                                            _ res.writeHead
                                                @ 200
                                                { 
                                                    @ 'Content-Type' 'application/json'
                                            _ res.end(err)
                _ next
                #
                    # 
                    # contentType = extContentTypeMap[extname];
                    # console.log('contentType', contentType);
                    # if (contentType) {
                    # var stat = fs.statSync(filePath);
                    # res.writeHead(200, {
                    # 'Content-Type': contentType,
                    # 'Content-Length': stat.size
                    # });
                    # const readStream = fs.createReadStream(filePath);
                    # return readStream.pipe(res);
                    # }
                    # next();
                    # 
    #
        #
        # req.query._context contains a semicolon separated list of context models export names.
        # For each <export-name> must exists a req.query._<export-name> parameter
        # with a "type;path" value pair.
        # The type is the model wizzi schema, the path is the
        # relative path of the ittf document of the model, relative to the
        # filepath of the requested resource.
        # 
        # Example (two context models, export names: cs and info)
        # req.query._context = 'cs;info'
        # req.query._cs = 'cheatsheet;html'
        # req.query._info = 'json;../cslayout.json.ittf'
        # 
        # If the path value is missing it defaults to ./index.<type>.ittf
        # 
        # 
    async-function contextLoader
        param resourceFilePath
        param req
        param callback
        const contextRequest = req.query._context
        if contextRequest && contextRequest.length > 0
            const ss = contextRequest.split(';')
            const requests
                [ 
            _ ss.forEach
                => 
                    param element
                    const request
                        { 
                            @ exportName element
                            @ fullPath undefined
                            @ relPath undefined
                    const type_path = req.query['_' + element]
                    $$ loog 'IttfStaticMiddleware.contextLoader exportName, type_path', element, type_path
                    if !type_path
                        return 
                            (
                                _ callback
                                    { 
                                        @ requestedResource resourceFilePath
                                        @ message 'Missing query param for requested context model: ' + element
                    const tp = type_path.split(';')
                    set request.type = tp[0]
                    if tp.length < 2
                        set request.relPath = './index.' + tp[0] + '.ittf'
                    else
                        set request.relPath = tp[1]
                    $$ loog 'IttfStaticMiddleware.contextLoader exportName, type_path, relPath', element, type_path, request.relPath
                    if request.type === 'cheatsheet'
                        set request.name = request.relPath
                        _ requests.push(request)
                    else
                        set request.fullPath = path.join(path.dirname(resourceFilePath), request.relPath)
                        _ requests.push(request)
                    $$ loog 'IttfStaticMiddleware.contextLoader request', request
            $$ loog 'IttfStaticMiddleware.contextLoader.requests', requests
            const resultContext
                { 
            const repeatCount = requests.length
            const repeat
                => 
                    param index
                    if index == repeatCount
                        return callback(null, resultContext)
                    const request = requests[index]
                    _ wizziProds.loadModelFs(request.fullPath, {}).then
                        => 
                            param model
                            set resultContext[request.exportName] = model
                            _ repeat(index + 1)
                        ._ catch
                            => 
                                param err
                                _ callback(err)
            _ repeat(0)
        else
            try 
                const twinJsonContext
                    await 
                        _ wizziProds.inferAndLoadContextFs(resourceFilePath, 'wzCtx')
                return (callback(null, twinJsonContext))
            catch ex
                return callback(ex)
    
    async-function sendFolderScan
        param folderPath
        param root
        param meta
        param res
        try 
            const folderState
                await 
                    _ wizziProds.scanIttfFolder(folderPath, path.dirname(root))
            if meta === 'json'
                return sendJSONStringified(res, folderState)
            else
                const generated
                    await 
                        _ wizziProds.generateArtifactFs
                            @ config.metaFolderIttfPath
                            { 
                                @ wizzischema 'html'
                                @ path folderPath
                                @ fs folderState
                $$ loog 'IttfStaticMiddleware.generated.meta.document', generated.artifactContent
                _ res.writeHead
                    @ 200
                    { 
                        @ 'Content-Type' 'text/html'
                        @ 'Content-Length' generated.artifactContent.length
                _ res.end(generated.artifactContent)
        catch ex
            _ sendError
                @ res
                @ ex
                { 
                    @ format 'json'
    
    function sendJSONStringified
        param res
        param wizziModelInstance
        _ res.send('<pre>' + stringify(cleanCircular(wizziModelInstance, []), null, 2) + '</pre>')
    
    function cleanCircular
        param obj
        param stock
        if !obj
            return 
        if stock.indexOf(obj) >= 0
            return 
        else
            _ stock.push(obj)
        if typeof obj === 'object'
            if obj.length
                _ obj.forEach
                    => 
                        param element
                        _ cleanCircular(element, stock)
                return 
            if obj.parent
                delete obj.parent
            if obj.wzParent
                delete obj.wzParent
            if obj.nodes
                delete obj.nodes
            if obj.evalContext
                delete obj.evalContext
            if obj.loadContext && obj.sourceKey
                delete obj.loadContext
            for k in obj
                var item = obj[k]
                if !item
                    delete obj[k]
                else
                    if typeof item === 'object' && item.length && item.length == 0
                        delete obj[k]
                    else
                        _ cleanCircular(item, stock)
        return obj
    
    function sendError
        param res
        param err
        param options
        set options = options || {}
        const code = options.code || 999
        let errEmit = err
        delete errEmit.__is_error
        if options.format === 'string'
            if typeof err !== 'string'
                set err
                    _ util.inspect
                        @ err
                        { 
                            @ depth null
            set errEmit = err.replace(new RegExp('\n', 'g'), '<br>')
        else
            if err.stack && err.stack.split
                const stackArray
                    [ 
                _ err.stack.split
                    @ '\n'
                    ._ forEach
                        => 
                            param element
                            _ stackArray.push('    ' + element)
                set errEmit.stack = stackArray
        _ res.setHeader('Content-Type', 'application/json')
        _ res.send
            _ stringify
                { 
                    @ code
                    @ error errEmit
                @ null
                @ 4