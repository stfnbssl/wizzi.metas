$group

    ${'$'}if wzCtx.type == 'module'
        import { dirname } from 'path'
        import { fileURLToPath } from 'url'
        const __dirname = dirname(fileURLToPath(import.meta.url))

    const path = require('path')
    const stringify = require('json-stringify-safe')
    const wizziProds = require('../features/wizzi/index.js').wizziProds
    
    ${'$'}hook imports
    
    set module.exports = {}
    set module.exports.WizziViewEngineMiddleware
        => 
            param app
            _ app.engine
                @ 'ittf'
                async-function 
                    param filePath
                    param options
                    param callback
                    # define the template engine
                    const twinJsonContext
                        await 
                            _ wizziProds.inferAndLoadContextFs(filePath, 'wzCtx')
                    const context
                        { 
                            @ ...options
                            @ locals options._locals
                            @ ...twinJsonContext
                    $$ loog 'WizziViewEngineMiddleware.context', stringify(context, null, 2)
                    _ wizziProds.generateArtifactFs(filePath, context).then
                        => 
                            param generated
                            _ callback(null, generated.artifactContent)
                        ._ catch
                            => 
                                param err
                                _ callback(err)
            const viewsFolder = path.resolve(__dirname, '..', 'site', 'views')
            success 'WizziViewEngineMiddleware.views folder', viewsFolder
            # specify the views directory
            _ app.set('views', viewsFolder)
            # register the template engine
            _ app.set('view engine', 'ittf')