$group

    ${'$'}if wzCtx.type == 'module'
        import { dirname } from 'path'
        import { fileURLToPath } from 'url'
        import { createRequire } from 'module'
        const requireEx = createRequire(import.meta.url)
        const __dirname = dirname(fileURLToPath(import.meta.url))
    
    const path = require('path')
    const express = require('express')
    ${'$'}if wzCtx.Build.useWebpackApp
        ${'$'}foreach item in wzCtx.Build.webpackApp.items
            const config_${'$'}{item.name} = require('../site/webpacks/${'$'}{item.name}/webpack.config.js').config

        ${'$'}foreach item in wzCtx.Build.webpackApp.items
            info 'WebpackAppMiddleware config_${'$'}{item.name}', config_${'$'}{item.name}

    set module.exports = {}
    set module.exports.WebpackAppMiddleware
        => 
            param app
            ${'$'}if wzCtx.Build.useWebpackApp
                let webpack = null
                let webpackDevMiddleware = null
                ${'$'}foreach item in wzCtx.Build.webpackApp.items
                    if process.env.NODE_ENV === 'production' || process.env.NODE_ENV === 'test'
                        _ app.use
                            @ '/webpacks/${'$'}{item.name}/dist'
                            $$ _ express.static(path.resolve(__dirname, '..', '..', 'pack', 'dist')))
                            _ express.static(config_${'$'}{item.name}.output.publicPath)
                    else
                        if !webpack
                            ${'$'}if wzCtx.type == 'module'
                                set webpack = requireEx('webpack')
                            ${'$'}else
                                set webpack = require('webpack')
                        if !webpackDevMiddleware
                            ${'$'}if wzCtx.type == 'module'
                                set webpackDevMiddleware = requireEx('webpack-dev-middleware')
                            ${'$'}else
                                set webpackDevMiddleware = require('webpack-dev-middleware')
                        const compiler = webpack(config_${'$'}{item.name})
                        _ app.use
                            _ webpackDevMiddleware
                                @ compiler
                                { 
                                    @ writeToDisk !!${'$'}{item.writeToDisk}
                                    @ publicPath config_${'$'}{item.name}.output.publicPath
                        success 'WebpackAppMiddleware.pack ${'$'}{item.name} on path', config_${'$'}{item.name}.output.publicPath, 'writeToDisk',  !!${'$'}{item.writeToDisk}