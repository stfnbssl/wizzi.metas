$group
    const path = require('path')
    const verify = require('wizzi-utils').verify
    const fSystem = require('wizzi-utils').fSystem
    const crypto = require('wizzi-utils').crypto
    const promisify = require('./functionWrappers').promisify
    +
    set module.exports = {}
    +
    set module.exports.normalize
        =>
            param filepath
            return verify.replaceAll(filepath, '\\', '/')
    +
    const file = fSystem.vfile()
    const promiseFileExists = promisify(file.exists, file)
    const promiseFileRead = promisify(file.read, file)
    const promiseFileWrite = promisify(file.write, file)
    # TODO const promiseFileRename = promisify(file.rename, file)
    const promiseFileDelete = promisify(file.unlink, file)
    const promiseFileDuplicate = promisify(file.copyFile, file)
    +
    set module.exports.joinPathFromArray
        =>
            param segments
            var ret = segments[0]
            for var i=1; i<segments.length; i++
                set ret
                    _ path.join
                        @ ret
                        @ segments[i]
            return ret
    +
    set module.exports.fileInfoByPath
        =>
            param filePath
            param baseFolder
            param baseUri
            set filePath = normalize(filePath)
            set baseFolder = normalize(baseFolder)
            var basename = path.basename(filePath)
            var dirname = path.dirname(filePath)
            var relFolder = path.dirname(filePath).length > baseFolder.length ? path.dirname(filePath).substr(baseFolder.length + 1) : ''
            var fileUri
                _ filePath.substr
                    @ baseFolder.length
            var ss = basename.split('.')
            if ss[ss.length-1] === 'ittf'
                return
                    {
                        @ uri (baseUri || '') + fileUri
                        @ name ss.slice(0, ss.length-2).join('.')
                        @ basename basename
                        @ displayName (relFolder.length > 0 ? relFolder + '/' + basename : basename)
                        @ isIttfDocument true
                        @ isFragment filePath.indexOf('/t/') > -1
                        @ schema ss[ss.length-2]
                        @ mime ss[ss.length-2]
                        @ relFolder relFolder
                        @ fullPath filePath
                        @ hash crypto.encrypt(filePath)
                        @ content undefined
            else
                return
                    {
                        @ uri fileUri
                        @ name ss.slice(0, ss.length-1).join('.')
                        @ basename basename
                        @ displayName (relFolder.length > 0 ? relFolder + '/' + basename : basename)
                        @ isIttfDocument false
                        @ schema null
                        @ mime ss[ss.length-1]
                        @ relFolder relFolder
                        @ fullPath filePath
                        @ hash crypto.encrypt(filePath)
                        @ content undefined
    +
    set module.exports.getFolderFiles
        async-function 
            param folderPath
            param baseFolderPath
            param baseUri
            r_promise${'('})
                if typeof baseUri === 'undefined'
                    set baseUri = ''
                var glob = normalize(folderPath) + '/*.*'
                var files
                    _ file.glob
                        @ glob
                # loog 'wizzi-studio.apis.gists.getFolderFiles', glob, files
                var ret = []
                foreach item in files
                    _ ret.push
                        _ fileInfoByPath
                            @ item
                            @ baseFolderPath
                            @ baseUri
                return
                    _ resolve
                        {
                            { data
                                @ items ret
                            @ message "Got folder files"
    +
    set module.exports.getIttfFilesOfSchema
        async-function 
            param folderPath
            param schemaName
            r_promise${'('})
                var suffix = '.' + schemaName + '.ittf'
                var glob = normalize(folderPath) + '/*.' + schemaName + '.ittf'
                var files
                    _ file.glob
                        @ glob
                # loog 'getFolderIttfFiles', glob, schemaName, files
                var ret = []
                foreach item in files
                    var dirName = path.dirname(item)
                    var baseName = path.basename(item)
                    var name = baseName.substring(0, baseName.length - suffix.length)
                    _ ret.push
                        {
                            @ name name
                            @ baseName baseName
                            @ dirName dirName
                            @ fullPath
                                _ normalize
                                    _ path.join
                                        @ dirName
                                        @ path.basename(item)
                return
                    _ resolve
                        @ ret
    +
    set module.exports.fsItemExists
        async-function 
            param filePath
            return
                _ promiseFileExists
                    @ filePath
    +
    set module.exports.readFsItem
        async-function 
            param filePath
            return
                _ promiseFileRead
                    @ filePath
    +
    set module.exports.readJsonObject
        async-function 
            param filePath
            r_promise${'('})
                _ promiseFileRead
                    @ filePath
                    ._ then
                        => 
                            param content
                            return
                                _ resolve
                                    _ JSON.parse
                                        @ content
    +
    set module.exports.writeFsItem
        async-function 
            param filePath
            param content
            return
                _ promiseFileWrite
                    @ filePath
                    @ content
    +
    set module.exports.writeJsonObject
        async-function 
            param filePath
            param content
            return
                _ promiseFileWrite
                    @ filePath
                    _ JSON.stringify
                        @ content
                        @ null
                        @ 2
    +
    set module.exports.deleteFsItem
        async-function 
            param filePath
            return
                _ promiseFileDelete
                    @ filePath
    +
    set module.exports.duplicateFsItem
        async-function 
            param itemPath
            param newPath
            return
                _ promiseFileDuplicate
                    @ itemPath
                    @ newPath
    +
    set module.exports.renameFsItem
        async-function 
            param oldPath
            param newPath
            throw new Error("wizziFs.renameFsItem not implemented")
