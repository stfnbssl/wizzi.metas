$group
    
    ${'$'}if wzCtx.Build.useConfig
        import path from 'path'
        ${'$'}if wzCtx.type == 'module'
            import { dirname } from 'path'
            import { fileURLToPath } from 'url'
            const __dirname = dirname(fileURLToPath(import.meta.url))

        ${'$'}if wzCtx.Build.config.useEnvalid
            import dotenv from 'dotenv'
            import 
                @ cleanEnv
                @ str
                @ bool
                @ port
                from 'envalid'
        
        import 
            @ ConfigType
            from './types'

        ${'$'}if wzCtx.Build.useHeroku
            # see https://devcenter.heroku.com/articles/node-best-practices#be-environmentally-aware
        
        function validateEnv
            _ dotenv.config
            let checkedEnv
                ${'$'}if wzCtx.Build.config.useEnvalid                            
                    _ cleanEnv
                        @expr process.env
                        { 
                            ${'$'}if wzCtx.Build.useExpress                        
                                @ PORT port()
                                ${'$'}if wzCtx.Build.useSession
                                    @ SESSION_SECRET str()
                                @ NO_CACHE bool()
                            ${'$'}if wzCtx.Build.useCors
                                @ CORS_CLIENT_ORIGIN str()
                            ${'$'}if wzCtx.Build.useMongoDb
                                @ MONGO_HOST str()
                                @ MONGO_USER str()
                                @ MONGO_PASSWORD str()
                                @ MONGO_PATH str()
                            ${'$'}if wzCtx.Build.useRedis
                                @ REDIS_CA str()
                                @ REDIS_URL str()
                                @ REDIS_PASSWORD str()
                            ${'$'}if wzCtx.Build.useSequelize
                                @ SEQUELIZE_DATABASE_URL str()
                                @ SEQUELIZE_DATABASE str()
                                @ SEQUELIZE_DIALECT str()
                                @ SEQUELIZE_USER str()
                                @ SEQUELIZE_PASSWORD str()
                            ${'$'}if wzCtx.Build.useAuthentication
                                ${'$'}if wzCtx.Build.authentication.useGithub
                                    @ GITHUB_CLIENT_ID str()
                                    @ GITHUB_CLIENT_SECRET str()
                                    @ GITHUB_CALLBACK_URL str()
                                ${'$'}if wzCtx.Build.authentication.useGoogle
                                    @ GOOGLE_CLIENT_ID str()
                                    @ GOOGLE_CLIENT_SECRET str()
                                    @ GOOGLE_CALLBACK_URL str()
                            ${'$'}if wzCtx.Build.useFeatureGithub
                                @ GITHUB_ACCESS_TOKEN str()
                            ${'$'}if wzCtx.Build.useWizzi
                                @ IS_WIZZI_DEV bool()
                                @ WIZZI_BASE_PATH str()
                ${'$'}else 
                    {
                        ${'$'}if wzCtx.Build.useExpress
                            @ PORT ${'$'}{wzCtx.App.port}
                            ${'$'}if wzCtx.Build.useSession
                                @ SESSION_SECRET "axr45hngmuoil9********0ofgt*kjj6767648%$Â£3f5&/4bnsa-----qq4)$35670qq4q"
                            @ NO_CACHE ${'$'}{wzCtx.Build.noCache}
                        ${'$'}if wzCtx.Build.useCors
                            @ CORS_CLIENT_ORIGIN "${'$'}{wzCtx.Build.cors.clientOrigin}"
                        ${'$'}if wzCtx.Build.useMongoDb
                            @ MONGO_HOST "${'$'}{wzCtx.Build.mongoDb.host}"
                            @ MONGO_USER "${'$'}{wzCtx.Build.mongoDb.user}"
                            @ MONGO_PASSWORD "${'$'}{wzCtx.Build.mongoDb.paddword}"
                            @ MONGO_PATH "${'$'}{wzCtx.Build.mongoDb.dbPath}/${'$'}{wzCtx.Build.mongoDb.dbName}"
                        ${'$'}if wzCtx.Build.useRedis
                            @ REDIS_CA "${'$'}{wzCtx.Build.redis.ca}"
                            @ REDIS_URL "${'$'}{wzCtx.Build.redis.url}"
                            @ REDIS_PASSWORD "${'$'}{wzCtx.Build.redis.password}"
                        ${'$'}if wzCtx.Build.useSequelize
                            @ SEQUELIZE_DATABASE_URL "${'$'}{wzCtx.Build.sequelize.databaseUrl}"
                            @ SEQUELIZE_DATABASE "${'$'}{wzCtx.Build.sequelize.database}"
                            @ SEQUELIZE_DIALECT "${'$'}{wzCtx.Build.sequelize.dialect}"
                            @ SEQUELIZE_USER "${'$'}{wzCtx.Build.sequelize.user}"
                            @ SEQUELIZE_PASSWORD "${'$'}{wzCtx.Build.sequelize.password}"
                        ${'$'}if wzCtx.Build.useAuthentication
                            ${'$'}if wzCtx.Build.authentication.useGithub
                                @ GITHUB_CLIENT_ID "${'$'}{wzCtx.Build.authentication.github.clientId}"
                                @ GITHUB_CLIENT_SECRET "${'$'}{wzCtx.Build.authentication.github.clientSecret}"
                                @ GITHUB_CALLBACK_URL "${'$'}{wzCtx.Build.authentication.github.callbackURL}"
                            ${'$'}if wzCtx.Build.authentication.useGoogle
                                @ GOOGLE_CLIENT_ID "${'$'}{wzCtx.Build.authentication.google.clientId}"
                                @ GOOGLE_CLIENT_SECRET "${'$'}{wzCtx.Build.authentication.google.clientSecret}"
                                @ GOOGLE_CALLBACK_URL "${'$'}{wzCtx.Build.authentication.google.callbackURL}"
                        ${'$'}if wzCtx.Build.useFeatureGithub
                            @ GITHUB_ACCESS_TOKEN "${'$'}{wzCtx.Build.featureGithub.accessToken}"
                        ${'$'}if wzCtx.Build.useWizzi
                            @ IS_WIZZI_DEV bool()
                            @ WIZZI_BASE_PATH "${'$'}{wzCtx.Build.wizzi.wizziBasePath}"

            return checkedEnv
        
        ${'$'}if wzCtx.Build.usePacki || wzCtx.Build.useWizzi || wzCtx.Build.useWizziJsonFactory
            export 
                const packiFilePrefix = 'json:/'
            export 
                const packiFilePrefixExtract = 'json:/'
            export 
                const packiConfigPath = '.packi/config.json.ittf'
        
        let config
        
        export-default 
            function create
                if config == null
                    const checkedEnv = validateEnv()
                    ${'$'}if wzCtx.Build.isClientServer
                        const __rootPath = path.join(__dirname, '..', '..', '..', '..')
                    ${'$'}else
                        const __rootPath = path.join(__dirname, '..', '..', '..')
                    const __ittfPath = path.join(__rootPath, 'ittf')
                    const __dataPath = path.join(__rootPath, 'data')
                    set config =
                        { 
                            ${'$'}if wzCtx.Build.useExpress
                                @ port checkedEnv.PORT
                                ${'$'}if wzCtx.Build.useSession
                                    @ sessionSecret checkedEnv.SESSION_SECRET
                                @ noCache checkedEnv.NO_CACHE
                            ${'$'}if wzCtx.Build.useCors
                                @ corsClientOrigin checkedEnv.CORS_CLIENT_ORIGIN
                            ${'$'}if wzCtx.Build.useMongoDb
                                @ mongoHost checkedEnv.MONGO_HOST
                                @ mongoUser checkedEnv.MONGO_USER
                                @ mongoPassword checkedEnv.MONGO_PASSWORD
                                @ mongoPath checkedEnv.MONGO_PATH
                                @ mongoConnectUrl ""
                            ${'$'}if wzCtx.Build.useRedis
                                @ redisCa checkedEnv.REDIS_CA
                                @ redisUrl checkedEnv.REDIS_URL
                                @ redisPassword checkedEnv.REDIS_PASSWORD
                            ${'$'}if wzCtx.Build.useSequelize
                                @ sequelizeUser checkedEnv.SEQUELIZE_USER
                                @ sequelizePassword checkedEnv.SEQUELIZE_PASSWORD
                                @ sequelizeDatabase checkedEnv.SEQUELIZE_DATABASE
                                @ sequelizeDatabaseUrl checkedEnv.SEQUELIZE_DATABASE_URL
                                @ sequelizeDialect checkedEnv.SEQUELIZE_DIALECT
                            ${'$'}if wzCtx.Build.useAuthentication
                                ${'$'}if wzCtx.Build.authentication.useGithub
                                    @ githubClientId checkedEnv.GITHUB_CLIENT_ID
                                    @ githubClientSecret checkedEnv.GITHUB_CLIENT_SECRET
                                    @ githubCallbackURL checkedEnv.GITHUB_CALLBACK_URL
                                ${'$'}if wzCtx.Build.authentication.useGoogle
                                    @ googleClientId checkedEnv.GOOGLE_CLIENT_ID
                                    @ googleClientSecret checkedEnv.GOOGLE_CLIENT_SECRET
                                    @ googleCallbackURL checkedEnv.GOOGLE_CALLBACK_URL
                            ${'$'}if wzCtx.Build.useFeatureGithub
                                @ githubAccessToken checkedEnv.GITHUB_ACCESS_TOKEN

                            ${'$'}if wzCtx.Build.useWizzi
                                @ isWizziDev checkedEnv.IS_WIZZI_DEV
                                @ wizziBasePath checkedEnv.WIZZI_BASE_PATH
                                @ ittfPath __ittfPath
                                @ dataPath __dataPath
                                @ metaHtmlIttfPath path.join(__ittfPath, 'meta', 'html', 'index.html.ittf')
                                @ metaFolderIttfPath path.join(__ittfPath, 'meta', 'folder', 'index.html.ittf')
                                @ metaHtmlTextPath path.join(__ittfPath, 'meta', 'text', 'index.html.ittf')

                            ${'$'}if wzCtx.Build.useWizziFs
                                @ jobsBasePath path.join(__ittfPath, 'data', 'jobs')

                            ${'$'}if wzCtx.Build.config.useUserInfo
                                @ userUserName "stfnbssl" 
                                @ userDisplayName "Stefano Bassoli" 
                                @ userAvatarUrl "https://avatars.githubusercontent.com/u/728956?v=4"

                            $if metaCtx.useTsExpressFeatureConfig
                                $foreach item in metaCtx.tsExpressFeatureConfig.values
                                    $if item.type == 'string'
                                        @ ${item.name} "${item.value}"
                                    $else
                                        @ ${item.name} ${item.value}

                    ${'$'}if wzCtx.Build.useMongoDb
                        const { mongoHost, mongoUser, mongoPassword, mongoPath } = config;
                        if mongoUser && mongoUser.length > 0 && mongoPassword && mongoPassword.length > 0 && mongoHost && mongoHost.length > 0
                            set config.mongoConnectUrl = `${mongoHost}://${mongoUser}:${mongoPassword}${mongoPath}`
                        else
                            # example 'mongodb://localhost/test'
                            set config.mongoConnectUrl = `${mongoPath}`

                    _ Object.keys(config).forEach
                        => 
                            param element
                            if element.indexOf("Pass") < 0 && element.indexOf("Secr") < 0
                                _ console.log
                                    @ 'Created config'
                                    @ element
                                    @ config[element]
                return config