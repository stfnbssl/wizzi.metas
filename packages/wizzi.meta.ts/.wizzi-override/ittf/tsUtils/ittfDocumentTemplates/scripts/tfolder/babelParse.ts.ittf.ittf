$group

	m babelParseRequire
		param options
		if !babelParser
			set babelParser = require("@babel/parser")

	m getBabelParseConfig
		param options
		# TODO calculate cfg from options
		var cfg = options
		var result
			{
				# Indicate the mode the code should be parsed in. Can be one of "script", "module", or "unambiguous". Defaults to "script". "unambiguous" will make @babel/parser attempt to guess, based on the presence of ES6 import or export statements. Files with ES6 imports and exports are considered "module" and are otherwise "script".
				@ sourceType cfg.sourceType || 'module'
				# Array containing the plugins that you want to enable.
				[ plugins
					@ "jsx"
					@ "flow"
					@ "objectRestSpread"
					@ "classProperties"
					@ "doExpressions"
					@ ['decorators', { decoratorsBeforeExport: false }]
					@ "classProperties"
					@ "classPrivateProperties"
					@ "classPrivateMethods"
					@ "exportDefaultFrom"
					@ "exportNamespaceFrom"
					@ "asyncGenerators"
					@ "functionBind"
					@ "functionSent"
					@ "dynamicImport"
					@ "numericSeparator"
					@ "optionalChaining"
					@ "importMeta"
					@ "bigInt"
					@ "optionalCatchBinding"
					@ "throwExpressions"
					@ "nullishCoalescingOperator"
				# By default, import and export declarations can only appear at a program's top level. Setting this option to true allows them anywhere where a statement is allowed.
				@ allowImportExportEverywhere cfg.allowImportExportEverywhere
				# By default, await use is not allowed outside of an async function. Set this to true to accept such code.
				@ allowAwaitOutsideFunction cfg.allowAwaitOutsideFunction
				# By default, a return statement at the top level raises an error. Set this to true to accept such code.
				@ allowReturnOutsideFunction cfg.allowReturnOutsideFunction
				# By default, super use is not allowed outside of class and object methods. Set this to true to accept such code.
				@ allowSuperOutsideMethod cfg.allowSuperOutsideMethod
				# Correlate output AST nodes with their source filename. Useful when generating code and source maps from the ASTs of multiple input files.
				@ sourceFilename cfg.sourceFilename || undefined 
				# By default, the first line of code parsed is treated as line 1. You can provide a line number to alternatively start with. Useful for integration with other source tools.
				@ startLine cfg.startLine || 1
				# By default, ECMAScript code is parsed as strict only if a "use strict"; directive is present or if the parsed file is an ECMAScript module. Set this option to true to always parse files in strict mode.
				@ strictMode cfg.strictMode
				# Adds a ranges property to each node: [node.start, node.end]
				@ ranges cfg.ranges
				# Adds all parsed tokens to a tokens property on the File node
				@ tokens cfg.tokens
		return result

	m babelParseExec
		param options
		param callback

		_ this.babelParseRequire
			@ options

		var code = options.code
		var codePath = options.codePath

		# loog 'wizzi-scripts.babelParseExec codePath, code', codePath, code

		var cfg
			_ this.getBabelParseConfig
				@ options

		if codePath
			# loog 'babelParseExec.cfg', cfg
			var ast
				_ this.cleanBabelAst
					@ options
					_ babelParser.parse
						_ file.read
							@ codePath
						@ cfg
			r_cb(ast)
		else
			# loog 'babelParseExec.cfg', cfg
			var ast
				_ this.cleanBabelAst
					@ options
					_ babelParser.parse
						@ code
						@ cfg
			# loog 'babelParseExec.ast', ast
			r_cb(ast)
			#
				_ babelParser.parse
					@ code
					@ cfg
					a_cb(result)
						var ast
							_ this.cleanBabelAst
								@ options
								@ result
						r_cb(ast)

	m babelParseExecToEventStream
		param options
		param res
		param callback

		_ this.babelParseExec
			@ options
			a_cb_no_throw(result)
				_ res.writeHead
					@ 200
					{ 
						@ "Content-Type" "text/event-stream"
						@ "Cache-control" "no-cache"

				if err
					# _ res.write('stderr: ' + JSON.stringify(err, null, 2))
					_ res.write('data: ' + JSON.stringify(err, null, 2))
					_ res.end('data: ***___CLOSE___***\n\n')
				else
					# loog 'wizzi-scripts.babelParseExecToEventStream'
					var resultString = JSON.stringify(result, null, 2)
					var str
					var lines = resultString.split("\n")
					for var i=0; i<lines.length; i++
						if i == lines.length - 1
							set str = lines[i]
						else
							# Note: The double-newline is *required*
							_ res.write('data: ' + lines[i] + "\n\n")
					if str.length > 0
						_ res.write('data: ' + str + "\n\n")
					_ res.end('data: ***___CLOSE___***\n\n')
				
				if callback
					return
						_ callback
							@ null
							@ result

	m cleanBabelAst
		param options
		param ast
		var removeLocation = options.removeLocation
		if removeLocation
			delete ast.loc
			delete ast.start
			delete ast.end
			foreach k in Object.keys(ast)
				if verify.isArray(ast[k])
					foreach node in ast[k]
						_ this.cleanBabelAst(options, node)
				if verify.isObject(ast[k])
					_ this.cleanBabelAst(options, ast[k])
		return ast