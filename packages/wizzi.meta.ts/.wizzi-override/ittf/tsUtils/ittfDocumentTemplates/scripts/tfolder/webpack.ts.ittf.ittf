$group

	$$ https://github.com/cerebral/webpack-packager/blob/master/src/bundle.js

	m webpackRequire
		param options
		if !webpack
			set webpack = require("webpack")
		if options.memoryFS && !MemoryFS
			set MemoryFS = require('memory-fs')
			set memoryFS = new MemoryFS()

	m getWebpackConfig
		param options
		# TODO calculate cfg from options
		var cfg = options

		set cfg.rules = []

		if cfg.useReact
			_ cfg.rules.push
				{
					@ test /\.(js|jsx)$/
					@ exclude /node_modules/
					{ use
						@ loader 'babel-loader'
						{ options
							[ presets
								@ '@babel/preset-env'
								@ '@babel/preset-react'

		# https://webpack.js.org/configuration/
		return
			{
				@ mode cfg.mode || 'development'
				@ entry cfg.entry || './src'
				$$ # options related to how webpack emits results
				{ output
					# the target directory for all output files
					# must be an absolute path (use the Node.js path module)
					@ path (cfg.output && cfg.output.path) || path.resolve(__dirname, "dist")
					# the filename template for entry chunks
					@ filename cfg.filename || "bundle.js"
					# the url to the output directory resolved relative to the HTML page
					@ publicPath cfg.publicPath || "/assets/"
					# the name of the exported library
					@ library cfg.library
					# universal module definition // the type of the exported library
					@ libraryTarget cfg.libraryTarget
				{ module
					@ rules cfg.rules || []


	m webpackExec
		param options
		param callback

		_ this.webpackRequire
			@ options

		const compiler
			_ webpack
				_ this.getWebpackConfig
					@ options

		if options.memoryFS
			set compiler.outputFileSystem = memoryFS;

		function run_cb
			param err
			param stats
			if err
				_ console.error(err.stack || err)
				if err.details
					_ console.error(err.details)
				return 
			const info = stats.toJson()
			if stats.hasErrors()
				_ console.error(info.errors)
			if stats.hasWarnings()
				_ console.warn(info.warnings)
			# Done processing
			_ console.log
				_ stats.toString
					{ 
						# Makes the build much quieter
						@ chunks false
						# Shows colors in the console
						@ colors true

		if options.watch
			_ compiler.watch
				{
					# Example watchOptions
					@ aggregateTimeout 300
					@ poll undefined
				@ run_cb
		else
			_ compiler.run
				@ run_cb

	m webpackExecToEventStream
		param options
		param res
		param callback

		throw new Error('Not implemented')