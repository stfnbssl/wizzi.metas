$group

    import path from 'path'
    import 
        @ verify
        @ fSystem
        @ crypto
        from 'wizzi-utils'

    import 
        @ promisify
        from './functionWrappers'

    export 
        const normalize
            => 
                param filepath
                    :string
                return verify.replaceAll(filepath, '\\', '/')

    const file = fSystem.vfile()
    const promiseFileExists = promisify(file.exists, file)
    const promiseFileRead = promisify(file.read, file)
    const promiseFileWrite = promisify(file.write, file)
    # TODO const promiseFileRename = promisify(file.rename, file)
    const promiseFileDelete = promisify(file.unlink, file)
    const promiseFileDuplicate = promisify(file.copyFile, file)
				
    $* VIA ??? TODO
    export 
        const uriFromPath
            => 
                param filepath
                    :string
                param excludeIttfExtension
                    :string
                set filepath = normalize(filepath).toLowerCase()
                if excludeIttfExtension && verify.endsWith(filepath, '.ittf')
                    set filepath = filepath.substr(0, filepath.length - 5)
                return
                    _ filepath.substr
                        @ config.studioBasePath.length
				
    export 
        const pathFromUri
            =>
                param uri
                return
                    _ path.join
                        @ config.studioBasePath
                        @ uri
    *$

    export 
        const joinPathFromArray
            => 
                param segments
                    :[
                        :string
                var ret = segments[0]
                for var i=1; i<segments.length; i++
                    set ret
                        _ path.join
                            @ ret
                            @ segments[i]
                return ret

    export 
        const fileInfoByPath
            => 
                param filePath
                    :string
                param baseFolder
                    :string
                param baseUri
                    :string
                    :optional

                set filePath = normalize(filePath)
                set baseFolder = normalize(baseFolder)
                var basename = path.basename(filePath)
                var dirname = path.dirname(filePath)
                var relFolder = path.dirname(filePath).length > baseFolder.length ? path.dirname(filePath).substr(baseFolder.length + 1) : ''
                var fileUri
                    _ filePath.substr
                        @ baseFolder.length
                var ss = basename.split('.')
                if ss[ss.length-1] === 'ittf'
                    return 
                        {
                            @ uri (baseUri || '') + fileUri
                            @ name ss.slice(0, ss.length-2).join('.')
                            @ basename basename
                            @ displayName (relFolder.length > 0 ? relFolder + '/' + basename : basename)
                            @ isIttfDocument true
                            @ isFragment filePath.indexOf('/t/') > -1 
                            @ schema ss[ss.length-2]
                            @ mime ss[ss.length-2]
                            @ relFolder relFolder
                            @ fullPath filePath
                            @ hash crypto.encrypt(filePath)
                            @ content undefined
                else
                    return 
                        {
                            @ uri fileUri
                            @ name ss.slice(0, ss.length-1).join('.')
                            @ basename basename
                            @ displayName (relFolder.length > 0 ? relFolder + '/' + basename : basename)
                            @ isIttfDocument false
                            @ schema null
                            @ mime ss[ss.length-1]
                            @ relFolder relFolder
                            @ fullPath filePath
                            @ hash crypto.encrypt(filePath)
                            @ content undefined

    export 
        async-function getFolderFiles
            param folderPath
                :string
            param baseFolderPath
                :string
            param baseUri
                :string
                :optional

            r_promise${'('})
                if typeof baseUri === 'undefined'
                    set baseUri = ''

                var glob = normalize(folderPath) + '/*.*'
                var files
                    _ file.glob
                        @ glob

                # loog 'wizzi-studio.apis.gists.getFolderFiles', glob, files
                var ret = []
                foreach item in files
                    _ ret.push
                        _ fileInfoByPath
                            @ item
                            @ baseFolderPath 
                            @ baseUri
                return
                    _ resolve
                        {
                            { data
                                @ items ret
                            @ message "Got folder files"

    export 
        async-function getIttfFilesOfSchema
            param folderPath
                :string
            param schemaName
                :string
            r_promise${'('})
                var suffix = '.' + schemaName + '.ittf'
                var glob = normalize(folderPath) + '/*.' + schemaName + '.ittf'
                
                var files
                    _ file.glob
                        @ glob
                
                # loog 'getFolderIttfFiles', glob, schemaName, files
                var ret = []
                foreach item in files
                    var dirName = path.dirname(item)
                    var baseName = path.basename(item)
                    var name = baseName.substring(0, baseName.length - suffix.length)
                    _ ret.push
                        {
                            @ name name
                            @ baseName baseName
                            @ dirName dirName
                            @ fullPath
                                _ normalize
                                    _ path.join
                                        @ dirName
                                        @ path.basename(item)
                return
                    _ resolve
                        @ ret

    export 
        async-function fsItemExists
            param filePath
                :string
            return
                _ promiseFileExists
                    @ filePath

    export 
        async-function readFsItem
            param filePath
                :string
            return
                _ promiseFileRead
                    @ filePath

    export 
        async-function writeFsItem
            param filePath
                :string
            param content
                :string
            return
                _ promiseFileWrite
                    @ filePath
                    @ content

    export 
        async-function deleteFsItem
            param filePath
                :string
            return
                _ promiseFileDelete
                    @ filePath

    export 
        async-function duplicateFsItem
            param itemPath
                :string
            param newPath
                :string
            return
                _ promiseFileDuplicate
                    @ itemPath
                    @ newPath

    export 
        async-function renameFsItem
            param oldPath
                :string
            param newPath
                :string
            throw new Error("wizziFs.renameFsItem not implemented")
            $*
            return
                _ promiseFileRename
                    @ oldPath
                    @ newPath
            *$