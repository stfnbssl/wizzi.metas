$group

	m robocopyExec
		param options
		param callback

		_ robocopy
			{
				@ source options.source
				@ destination options.destination
				@ serial options.serial
				[ files
					$$ @ *.js' 
					$$ @ *.html' 
				{ copy
					@ subdirs true
					@ emptySubdirs true
					@ purge true
					# Mirrors a directory tree (equivalent to copy.emptySubdirs plus copy.purge). [/mir]
					@ mirror true
					# Moves files, and deletes them from the source after they are copied. [/mov]
					@ moveFiles false
					# Moves files and directories, and deletes them from the source after they
					# are copied. [/move]
					@ moveFilesAndDirs false
					#  Copies the symbolic link instead of the target. [/sl]
					@ symbolicLink false
				{ file
					# Excludes files that match the specified names or paths. Note that FileName
					# can include wildcard characters (* and ?). [/xf <FileName>[ ...]]
					[ excludeFiles
						$$ @ '~*.*'
						$$ @ '*.tmp'
					# Excludes directories that match the specified names and paths.
					# [/xd <Directory>[ ...]]
					[ excludeDirs
						$$ @ 'tmp'
						$$ @ 'obj'
			._ done
				function
					param stdout
					# loog 'wizzi-scripts.manager.robocopyExec.stdout', stdout
					if callback
						return
							_ callback
								@ null
								{
									@ error false
									@ stdout stdout.join('\n')
			$*
			._ fail
				function
					param error
					# loog 'wizzi-scripts.manager.robocopyExec.error', error
					return
						_ callback
							@ null
							{
								@ error true
								@ stderr error
			*$

	m robocopyExecToEventStream
		param options
		param res
		param callback

		_ this.robocopyExec
			@ options
			a_cb(result)
				
				_ res.writeHead
					@ 200
					{ 
						@ "Content-Type" "text/event-stream"
						@ "Cache-control" "no-cache"

				if result.error
					_ res.write('stderr: ' + result.stderr)
					_ res.end('data: ***___CLOSE___***\n\n')
				else
					# loog 'wizzi-scripts.robocopyExecToEventStream', result.stdout
					var str
					var lines = result.stdout.split("\n")
					for var i=0; i<lines.length; i++
						if i == lines.length - 1
							set str = lines[i]
						else
							# Note: The double-newline is *required*
							_ res.write('data: ' + lines[i] + "\n\n")
					if str.length > 0
						_ res.write('data: ' + str + "\n\n")
					_ res.end('data: ***___CLOSE___***\n\n')
				
				if callback
					return
						_ callback
							@ null
							@ result

