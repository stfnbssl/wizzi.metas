$group
    const mongoose = require('mongoose')
    $if metaCtx.jsDbMongoDb.useConnectWithRetry
        const debug = require('debug')
        const log
            _ debug('app:mongoose-service')
    +
    const md = module.exports = {}
    +
    set md.mongodbStart
        function mongodbStart
            param config
            param modelBuilders
            +
            let connectUrl
            const { mongoHost, mongoUser, mongoPassword, mongoPath } = config;
            if mongoUser && mongoUser.length > 0 &&
                \b mongoPassword && mongoPassword.length > 0 &&
                \b mongoHost && mongoHost.length > 0
                set connectUrl = `${mongoHost}://${mongoUser}:${mongoPassword}${mongoPath}`;
            else
                # example 'mongodb://localhost/test'
                set connectUrl = `${mongoPath}`;
            +
                # TODO (VIA) set mongoose.Promise = global.Promise
            return
                _ mongoose.connect
                    @ connectUrl
                    ._ then
                        => 
                            success 'Mongodb. Connected to', mongoPath
                            _ modelBuilders.forEach
                                => 
                                    param builder
                                    _ builder.buildModel
                            return 'Connected'
                        => 
                            param err
                            throw new Error('\n\nMongodb. \nCannot connect to \n"' + connectUrl + '". \n\n' + err.message + '\n\n')

    # TODO
    $if metaCtx.jsDbMongoDb.useConnectWithRetry
        const maxRetries = ${metaCtx.jsDbMongoDb.connectWithRetry.maxRetries}
        const retrySeconds = ${metaCtx.jsDbMongoDb.connectWithRetry.retriesSeconds}
        let retries = 0
        function connectWithRetry
            param connectUrl
            _ log('Attempting MongoDB connection (will retry if needed)')
            _ mongoose.connect
                @ connectUrl
                ._ then
                    => 
                        success 'Mongodb. Connected to', mongoPath
                        _ modelBuilders.forEach
                            => 
                                param builder
                                _ builder.buildModel
                        return 'Connected'
                ._ catch
                    => 
                        param err
                        set retries++
                        if retries > maxRetries
                            throw new Error('\n\nMongodb. \nCannot connect to \n"' + connectUrl + '". \n\n' + err.message + '\n\n')
                        _ log
                            `lit 
                                + MongoDB connection unsuccessful (will retry #
                                @ retries
                                + &nbsp;after&nbsp;
                                @ retrySeconds
                                + &nbsp;seconds):
                            @ err
                        _ setTimeout(connectWithRetry, retrySeconds * 1000)

    +
    set md.close
        => 
            _ mongoose.connection.close()