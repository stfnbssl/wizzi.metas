$group
    kind es6
    var util = require('util')
    var file = require('wizzi-utils').file
    var verify = require('wizzi-utils').verify
    var StringWriter = require("./stringWriter")
    +
    function logError
        param label
        param obj
        param depth
        var message
            _ util.inspect
                @ obj
                {
                    @ depth depth || null
        error '${'$'}{wzCtx.npnName}.wizzifiers.utils.ittfWriter', label, message
    +
    var writer
        function
    +
    set writer.prototype.write =
        function
            param filepath
            param node
            param callback
            set this.indentValue = 0
            _ file.openWrite
                @ filepath
                a_cb${'('} stream )
                    set this.stream = stream
                    _ this.node(node)
                    _ this.stream.end()
                    r_cb${'('} null )
    +
    set writer.prototype.stringify =
        function
            param node
            param options
            set this.keepDeleted = options.keepDeleted
            set this.indentValue = 0
            set this.stream = new StringWriter()
            _ this.node(node)
            return this.stream.toString()
    +
    set writer.prototype.node =
        function
            param node
            if !this.keepDeleted && node.__deleted
                return
            if !node.tag
                return
            if node.tag === '$dummy'
                return
            if node.tag === '$group'
                _ node.children.forEach
                    =>
                        param item
                        if !item
                            throw 
                                new Error
                                    _ logError('node has an empty child', node, 2)
                        set item.__parent = node
                        _ this.node(item)
                return
            var indent = Array(this.indentValue * 4 + 1).join(" ")
            _ this.stream.write(indent + node.tag)
            if typeof node.name !== 'undefined'
                _ this.stream.write
                    op+
                        + ' ' + formatName(node.name)
                        (
                            iif node.__deleted
                                then '  (deleted)'
                                else ''
            _ this.stream.write('\n')
            set this.indentValue++
            set indent = Array(this.indentValue * 4 + 1).join(" ")
            +
            if node.attribs
                for var k in node.attribs
                    _ this.stream.write(indent + k + ' ' + formatAttrib(node.attribs[k]) + '\n')
            +
            if node.lines && node.lines.length > 0
                var lindent = indent
                if node.tag !== '$.'
                    _ this.stream.write(indent + "$.\n")
                    set lindent = lindent + "    "
                var self = this
                _ node.lines.forEach
                    function
                        param l
                        _ self.stream.write(lindent + l + '\n')
            +
            if !node.children
                throw 
                    new Error
                        _ logError('node without children', node)
            +
            _ node.children.forEach
                =>
                    param item
                    if !item
                        throw 
                            new Error
                                _ logError('node has an empty child', node, 2)
                    else
                        set item.__parent = node
                        _ this.node(item)
            set this.indentValue--
    +
    function formatName
        param name
        if verify.isObject(name)
            _ log('ittfWriter.formatName', name)
        return
            iif name && name.trim
                then name.trim()
                $$ 4/3/24 else ''
                else name
    +
    function formatAttrib
        param a
        if typeof a === 'undefined' || a == null
            return ''
        var lines = file.splitLines(a.trim())
            # log('attrib', a);
        if lines.length === 1
            return lines[0]
        else
            set acc = []
            _ lines.forEach
                function
                    param l
                    _ acc.push(l.trim())
            return acc.join(' ')
    +
    set exports.write =
        function
            param filepath
            param node
            param callback
            _ new writer().write
                @ filepath
                @ node
                @ callback
    +
    set exports.stringify =
        function
            param node
            param options
            set options =
                ||
                    + options
                    {
            return new writer().stringify(node, options)
