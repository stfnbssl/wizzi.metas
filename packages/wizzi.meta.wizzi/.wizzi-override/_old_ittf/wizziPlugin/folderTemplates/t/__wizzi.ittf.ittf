$group
    $file wizzi.js.ittf
        module
            kind es6
            const path = require('path')
            const util = require('util')
            const fs = require('fs')
            const async = require('async')
            const chalk = require('chalk')

            $if metaCtx.useWizziV08
                const wizzi = require('@wizzi/factory')
            $else
                const wizzi = require('wizzi')

            let arg = process.argv[2]
            var configPath = getPath(arg);
            if configPath
                _ generate
                    @ configPath
            else
                error `config file "wizzi.config.' + (arg ? arg + '.' : '') + 'js" not found`

            function getPath
                param name

                let configFilename = name ? 'wizzi.config.' + name + '.js' : 'wizzi.config.js'
                let currentDir = process.cwd()
                let currentPath = null
                let configPath = null
                
                # loog 'searching ', configFilename
                while configPath == null && currentDir.length > 3
                    set currentPath = path.join(currentDir, configFilename)
                    try
                        # loog 'wizzi-cli.generate.searching', currentPath
                        const stat = fs.lstatSync(currentPath)
                        if stat.isFile()
                            set configPath = currentPath
                    catch ex
                    set currentDir = path.dirname(currentDir)
                
                return configPath

            function generate
                param configPath
                const configInstance = require(configPath)
                log 'wizzi-cli.generate.configInstance', configInstance
                const x_pluginsBaseFolder = configInstance.pluginsBaseFolder || __dirname
                if !configInstance.pluginsBaseFolder
                    _ console.log
                        _ chalk.red
                            @ 'wizzi-cli.generate - pluginsBaseFolder not set'
                    _ console.log
                        _ chalk.red
                            @ 'wizzi-cli.generate - pluginsBaseFolder defaulted to ' + x_pluginsBaseFolder

                var x_pluginsItems = []
                if configInstance.plugins && configInstance.plugins.length > 0
                    set x_pluginsItems = configInstance.plugins
                else
                    $if metaCtx.useWizziV08
                        # TODO
                        _ x_pluginsItems.push('@wizzi/plugin.js')
                    $else
                        _ x_pluginsItems.push('wizzi-core')
                        _ x_pluginsItems.push('wizzi-js')
                        _ x_pluginsItems.push('wizzi-web')
                    _ chalk.red
                        @ 'wizzi-cli.generate - plugins not found in wizzi.config'
                    _ chalk.red
                        @ 'wizzi-cli.generate - using default plugins: "wizzi-core", "wizzi-js", "wizzi-web"'

                _ wizzi.executeWizziJob
                    { 
                        @ storeKind 'filesystem'
                        { config
                            @ wfBaseFolder __dirname
                            @ plugins x_pluginsItems
                            @ pluginsBaseFolder x_pluginsBaseFolder
                        { job
                            @ name configInstance.wfjobName
                            @ ittfDocumentUri configInstance.wfjobPath
                            @ productionOptions
                                _ wizzi.productionOptions
                                    { 
                                        @ indentSpaces 4
                                        @ basedir __dirname
                                        @ verbose 2
                                        { dumps
                                            @ dumpsBaseFolder path.join(__dirname, '_dumps')
                                            { mTreeBuildupJsWizziScript
                                                @ dump false
                            @ globalContext configInstance.globalContext
                    function 
                        param err
                        if err
                            return
                                _ wizzi.printWizziJobError(configInstance.wfjobName, err)
                        if configInstance.schemas && configInstance.schemas.length > 0
                            _ generateSchemas
                                @ configInstance.schemas
                                _ path.dirname
                                    @ configInstance.wfjobPath
                                @ configInstance.destPath
                                @ configInstance.packageName || configInstance.wfjobName
                                { 
                                    @ items x_pluginsItems
                                    @ baseFolder x_pluginsBaseFolder

            function generateSchemas
                param schemasToGen
                param wfJobFolder
                param destPath
                param packageName
                param plugins
                _ async.mapSeries
                    @ schemasToGen
                    function 
                        param schemaName
                        param callback
                        info 'wizzi-cli.generate.Generating schema ' + schemaName
                        var options = {}
                        if plugins
                            set options
                                {
                                    @ plugins plugins.items
                                    @ pluginsBaseFolder plugins.baseFolder
                        _ wizzi.generateWizziModelTypes
                            { 
                                @ configOptions options
                                { wfschema
                                    @ name schemaName
                                    @ ittfDocumentUri path.join(wfJobFolder, 'lib', 'wizzi', 'schemas', schemaName + '.wfschema.ittf')
                                    @ outputPackageFolder destPath
                            function 
                                param err
                                param result
                                if err
                                    throw 
                                        new Error
                                            op+ 
                                                + 'Package: ' + packageName + ' schema ' + schemaName + '  wizzi models production error: '
                                                _ util.inspect
                                                    @ err
                                                    { 
                                                        @ depth null
                                # loog 'wizzi-cli.generate.Generate schema result', result
                                _ callback(null, result)
                    function 
                        param err
                        param result
                        if err
                            _ wizzi.printWizziJobError($name, err)


