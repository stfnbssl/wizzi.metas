$group
    #
        # Build and returns a packiFiles object with all the meta ittf documents
        # of any WizziMetaProduction
        # The packiFiles filepaths are built this way:
        # - folderTemplates/<ProductionName><metaFilePath>
        # - ittfDocumentTemplates/<ProductionName><metaFilePath>
        # - plainDocuments/<ProductionName><metaFilePath>
        # For each metaProduction the returned packiFiles object must contain:
        # . a document with filePath 'folderTemplates/<ProductionName>/index.ittf.ittf'
        # . a document with filePath 'folderTemplates/<ProductionName>/index.ittf.ittf'
    m getMetaContextDefsStarter
        param options
        param callback
        +
        _ async.map
            @ pluginMetaProductions
            =>
                param prod
                param callback
                if options && options.metaCtx
                    const useProductionVar = 'use' + prod.name[0].toUpperCase() + prod.name.substring(1)
                    if !options.metaCtx[useProductionVar]
                        r_cb( {} )
                    log 'getMetaContextDefsStarter.useProduction', useProductionVar, options.metaCtx[useProductionVar]
                _ this.getMetaContextDefs
                    @ prod.name
                    a_cb( metaContextDefs )
                        r_cb( metaContextDefs )
            =>
                param err
                param metaContextDefs
                const result
                    {
                foreach mp in metaContextDefs
                    if mp.ittfTParams
                        for var k in mp.ittfTParams
                            var newk = 'metaCtxSchema/' + mp.productionName + '/t/params/' + k
                            set result[newk] = mp.ittfTParams[k]
                    if mp.metaCtxSchema
                        for var k in mp.metaCtxSchema
                            var newk = 'metaCtxSchema/' + mp.productionName + '/' + k
                            set mp.metaCtxSchema[k].contents
                                _ wizziUtils.verify.replaceAll
                                    @ mp.metaCtxSchema[k].contents, "{\r\n    [ parameters\r\n", "{\r\n    metaProduction \"" + mp.productionName + "\"\r\n    [ parameters\r\n"
                            set result[newk] = mp.metaCtxSchema[k]
                r_cb( result )
