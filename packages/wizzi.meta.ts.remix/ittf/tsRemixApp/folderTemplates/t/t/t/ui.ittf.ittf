$group

    $
        var items = [
			"button.tsx",
			"checkbox.tsx",
			"dropdown-menu.tsx",
			"icon.tsx",
            "input-otp.tsx",
            "input.tsx",
            "label.tsx",
			"sonner.tsx",
			"status-button.tsx",
			"tooltip.tsx",
			"textarea.tsx",
		];
		var items_stop = [
        ];

    $foreach item in items
        $file __dot__wizzi/app/components/ui/${item}.ittf.ittf
            module
				${'$'}include tsRemixApp/app/components/ui/${item}

    $
        var items = [
			"README.md",
		]

    $foreach item in items
        $file __dot__wizzi/app/components/ui/${item}.ittf.ittf
            md
				${'$'}include tsRemixApp/app/components/ui/${item}

	$*
	import
		@ Slot
		from '@radix-ui/react-slot'
	import
		@ cva
		:type VariantProps
		from 'class-variance-authority'
	import
		as React
		from 'react'
	import
		@ cn
		from '#app/utils/misc.tsx'
	const buttonVariants
		_ cva
			@ 'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors outline-none focus-visible:ring-2 focus-within:ring-2 ring-ring ring-offset-2 disabled:pointer-events-none disabled:opacity-50'
			{
				{ variants
					{ variant
						@ default 'bg-primary text-primary-foreground hover:bg-primary/80'
						@ destructive 'bg-destructive text-destructive-foreground hover:bg-destructive/80'
						@ outline 'border border-input bg-background hover:bg-accent hover:text-accent-foreground'
						@ secondary 'bg-secondary text-secondary-foreground hover:bg-secondary/80'
						@ ghost 'hover:bg-accent hover:text-accent-foreground'
						@ link 'text-primary underline-offset-4 hover:underline'
					{ size
						@ default 'h-10 px-4 py-2'
						@ wide 'px-24 py-5'
						@ sm 'h-9 rounded-md px-3'
						@ lg 'h-11 rounded-md px-8'
						@ pill 'px-12 py-3 leading-3'
						@ icon 'h-10 w-10'
				{ defaultVariants
					@ variant 'default'
					@ size 'default'
	export
		:interface ButtonProps
			:extends React.ButtonHTMLAttributes
				:param
					:ref HTMLButtonElement
			:extends VariantProps
				:param
					:typeof buttonVariants
			:p asChild
				:optional
				:boolean
	const Button
		_ React.forwardRef
			:param
				:ref HTMLButtonElement
			:param
				:ref ButtonProps
			=>
				{
					@ className
					@ variant
					@ size
					@ asChild
						= false
					... props
				param ref
				const Comp
					iif asChild
						then Slot
						else 'button'
				return
					< Comp
						@ className
							_ cn
								_ buttonVariants
									{
										@ variant
										@ size
										@ className
						@ ref {ref}
						@ {...props}
	set Button.displayName = 'Button'
	export
		@ Button
		@ buttonVariants
                ${'$'}include tsRemixApp/app/components/ui/${item}
