$group
    # see https://github.com/remix-run/remix/discussions/8702

    ${'$'}include set-ctx-functions
    ${'$'}
        setCtxDep ('@conform-to/react', '^1.1.3');
        setCtxDep ('@conform-to/zod', '^1.1.3');
        setCtxDep ('remix-utils', '^7.5.0');
        setCtxDep ('zod', '^3.23.5');

    $if metaCtx.tsRemixApp.useEpic
        import
            @ json
            :type LoaderFunctionArgs
            :type ActionFunctionArgs
            :type HeadersFunction
            :type LinksFunction
            :type MetaFunction
            from '@remix-run/node'
    
    import
        $if metaCtx.tsRemixApp.useEpic
            @ Form
        @ Link
        @ Links
        @ Meta
        @ Outlet
        @ Scripts
        @ ScrollRestoration
        $if metaCtx.tsRemixApp.useEpic
            @ useFetcher
            @ useFetchers
            @ useLoaderData
            @ useMatches
            @ useSubmit
        from '@remix-run/react'

    $if metaCtx.tsRemixApp.useEpic
        import
            @ z
            from 'zod'
        import
            @ useNonce
            from './utils/nonce-provider.ts'
        import
            @ ClientHintCheck
            @ getHints
            @ useHints
            from './utils/client-hints.tsx'
        import
            @ GeneralErrorBoundary
            from './components/error-boundary.tsx'
        import
            @ useForm
            @ getFormProps
            from '@conform-to/react'
        import
            @ parseWithZod
            from '@conform-to/zod'
        import
            @ invariantResponse
            from '@epic-web/invariant'
        import
            @ useRequestInfo
            from './utils/request-info.ts'
        import
            @ combineHeaders
            @ getDomainUrl
            @ getUserImgSrc
            from './utils/misc.tsx'
        
        import
            @ getEnv
            from './utils/env.server.ts'
        
        import
            @ makeTimings
            @ time
            from './utils/timing.server.ts'

        $if metaCtx.tsRemixApp.epic.useUser
            import
                @ getUserId
                @ logout
                from './utils/auth.server.ts'

        import
            @ HoneypotProvider
            from 'remix-utils/honeypot/react'

        import
            @ honeypot
            from './utils/honeypot.server.ts'
        
        import
            @ getToast
            from './utils/toast.server.ts'

        import
            @ prisma
            from './utils/db.server.ts'

        import
            @ useRef
            from 'react'

        import
            @ EpicToaster
            from './components/ui/sonner.tsx'

        import
            @ useToast
            from './components/toaster.tsx'

        import
            @ EpicProgress
            from './components/progress-bar.tsx'

        import
            @ SearchBar
            from './components/search-bar.tsx'
        
        import
            @ Button
            from './components/ui/button.tsx'
        
        import
            @ DropdownMenu
            @ DropdownMenuContent
            @ DropdownMenuItem
            @ DropdownMenuPortal
            @ DropdownMenuTrigger
            from './components/ui/dropdown-menu.tsx'

        $if metaCtx.tsRemixApp.epic.useUser
            import
                @ useOptionalUser
                @ useUser
                from './utils/user.ts'

        $if metaCtx.tsRemixApp.epic.useTheme
            import
                :type Theme
                @ setTheme
                @ getTheme
                from './utils/theme.server.ts'

        import
            @ Icon
            @ href
                as iconsHref
            from './components/ui/icon.tsx'

    $if metaCtx.tsRemixApp.useEpic
        export
            async-function loader
                {
                    @ request
                    :ref LoaderFunctionArgs
                const timings = makeTimings('root loader')
                $if metaCtx.tsRemixApp.epic.useUser
                    const userId
                        await
                            _ time
                                =>
                                    _ getUserId(request)
                                {
                                    @ timings
                                    @ type 'getUserId'
                                    @ desc 'getUserId in root'
                const user
                    iif userId
                        then
                            await
                                _ time
                                    =>
                                        _ prisma.user.findUniqueOrThrow
                                            {
                                                { select
                                                    @ id true
                                                    @ name true
                                                    @ username true
                                                    { image
                                                        { select
                                                            @ id true
                                                    { roles
                                                        { select
                                                            @ name true
                                                            { permissions
                                                                { select
                                                                    @ entity true
                                                                    @ action true
                                                                    @ access true
                                                { where
                                                    @ id userId
                                    {
                                        @ timings
                                        @ type 'find user'
                                        @ desc 'find user in root'
                        else null
                if userId && !user
                    _ console.info('something weird happened')
                    await
                        _ logout
                            {
                                @ request
                                @ redirectTo '/'
                        # something weird happened... The user is authenticated but we can't find
                        # them in the database. Maybe they were deleted? Let's log them out.

                const
                    {
                        @ toast
                        @ headers toastHeaders
                    =
                        await
                            _ getToast(request)
                const honeyProps = honeypot.getInputProps()
                const r_json
                    _ json
                        {
                            { requestInfo
                                @ hints getHints(request)
                                @ origin getDomainUrl(request)
                                @ path new URL(request.url).pathname
                                { userPrefs
                                    $if metaCtx.tsRemixApp.epic.useTheme
                                        @ theme getTheme(request)
                            @ ENV getEnv()
                            @ toast
                            @ honeyProps
                        {
                            @ headers
                                _ combineHeaders
                                    {
                                        @ 'Server-Timing' timings.toString()
                                    @ toastHeaders
                success 'root.loader.json', r_json
                return r_json

        export
            async-function action
                {
                    @ request
                    :ref ActionFunctionArgs
                const formData
                    await
                        _ request.formData()
                const submission
                    _ parseWithZod
                        @ formData
                        {
                            @ schema ThemeFormSchema
                _ invariantResponse(submission.status === 'success', 'Invalid theme received')
                const
                    {
                        @ theme
                    = submission.value
                const responseInit
                    {
                        { headers
                            @ 'set-cookie' setTheme(theme)
                return
                    _ json
                        {
                            @ result submission.reply()
                        @ responseInit

        export
            const headers
                :ref HeadersFunction
                =
                    =>
                        {
                            @ loaderHeaders
                        const headers
                            {
                                @ 'Server-Timing' loaderHeaders.get('Server-Timing') ?? ''
                        return headers

        function Document
            {
                @ children
                @ nonce
                @ theme
                    = 'light'
                @ env
                    =
                        {
                @ allowIndexing
                    = true
                :{
                    :p children
                        :ref React.ReactNode
                    :p nonce
                        :string
                    :p theme
                        :optional
                        :ref Theme
                    :p env
                        :optional
                        :ref Record
                            :param string
                            :param string
                    :p allowIndexing
                        :optional
                        :boolean
            return
                html
                    @ lang "en"
                    @ className
                        template
                            +
                            @ theme
                            + &nbsp;h-full overflow-x-hidden
                    head
                        < ClientHintCheck
                            @ nonce {nonce}
                        < Meta
                        meta
                            @ charSet "utf-8"
                        meta
                            @ name "viewport"
                            @ content "width=device-width,initial-scale=1"
                        {
                            iif allowIndexing
                                then null
                                else
                                    meta
                                        @ name "robots"
                                        @ content "noindex, nofollow"
                        < Links
                    body
                        @ className "bg-background text-foreground"
                        + {children}
                        script
                            @ nonce {nonce}
                            @ dangerouslySetInnerHTML
                                {
                                    @ __html
                                        template
                                            + window.ENV =&nbsp;
                                            _ JSON.stringify(env)
                                            +
                        < ScrollRestoration
                            @ nonce {nonce}
                        < Scripts
                            @ nonce {nonce}
        
        $if true
            function Logo
                return
                    < Link
                        @ to "/"
                        @ className "group grid leading-snug"
                        span
                            @ className "font-light transition group-hover:-translate-x-1"
                            + epic
                        span
                            @ className "font-bold transition group-hover:translate-x-1"
                            + notes
            export-default
                function App
                    const data
                        _ useLoaderData
                            :param
                                :typeof loader
                    const nonce = useNonce()
                    $if metaCtx.tsRemixApp.epic.useUser
                        const user = useOptionalUser()
                    const theme = useTheme()
                    $if metaCtx.tsRemixApp.epic.useSearchBar
                        const matches = useMatches()
                        const isOnSearchPage
                            _ matches.find
                                =>
                                    param m
                                    set m.id === 'routes/users+/index'
                        const searchBar
                            iif isOnSearchPage
                                then null
                                else
                                    < SearchBar
                                        @ status "idle"
                    const allowIndexing = data.ENV.ALLOW_INDEXING !== 'false'
                    $if false
                        _ useToast(data.toast)
                    return
                        < Document
                            @ nonce {nonce}
                            @ theme {theme}
                            @ allowIndexing {allowIndexing}
                            @ env {data.ENV}
                            div
                                @ className "flex h-screen flex-col justify-between"
                                header
                                    @ className "container py-6"
                                    nav
                                        @ className "flex flex-wrap items-center justify-between gap-4 sm:flex-nowrap md:gap-8"
                                        < Logo
                                        $if metaCtx.tsRemixApp.epic.useSearchBar
                                            div
                                                @ className "ml-auto hidden max-w-sm flex-1 sm:block"
                                                + {searchBar}
                                        $if metaCtx.tsRemixApp.epic.useUser
                                            div
                                                @ className "flex items-center gap-10"
                                                {
                                                    iif user
                                                        then
                                                            < UserDropdown
                                                        else
                                                            < Button
                                                                @ asChild
                                                                @ variant "default"
                                                                @ size "lg"
                                                                < Link
                                                                    @ to "/login"
                                                                    + Log In
                                        $if metaCtx.tsRemixApp.epic.useSearchBar
                                            div
                                                @ className "block w-full sm:hidden"
                                                + {searchBar}
                                div
                                    @ className "flex-1"
                                    < Outlet
                                div
                                    @ className "container flex justify-between pb-5"
                                    $if metaCtx.tsRemixApp.epic.useLogo
                                        < Logo
                                    < ThemeSwitch
                                        @ userPreference {data.requestInfo.userPrefs.theme}
                            $if metaCtx.tsRemixApp.epic.useToaster
                                < EpicToaster
                                    @ closeButton
                                    @ position "top-center"
                                    @ theme {theme}
                            $if metaCtx.tsRemixApp.epic.useProgress
                                < EpicProgress

        function AppWithProviders
            const data
                _ useLoaderData
                    :param
                        :typeof loader
            return
                < HoneypotProvider
                    @ {...data.honeyProps}
                    < App
        
        $if false
            export-default
                function App
                    const nonce = useNonce()
                    return
                        < Document
                            @ nonce {nonce}
                            < Outlet

        $if metaCtx.tsRemixApp.useEpic && metaCtx.tsRemixApp.epic.useTheme
            const ThemeFormSchema
                _ z.object
                    {
                        @ theme
                            _ z.enum
                                [
                                    @ 'system'
                                    @ 'light'
                                    @ 'dark'
            export
                function useTheme
                    const hints = useHints()
                    const requestInfo = useRequestInfo()
                    const optimisticMode = useOptimisticThemeMode()
                    if optimisticMode
                        return
                            iif optimisticMode === 'system'
                                then hints.theme
                                else optimisticMode
                    return requestInfo.userPrefs.theme ?? hints.theme
                #
                    # 
                    # @returns the user's theme preference, or the client hint theme if the user
                    # has not set a preference.
                    #

            export
                function useOptimisticThemeMode
                    const fetchers = useFetchers()
                    const themeFetcher
                        _ fetchers.find
                            =>
                                param f
                                set f.formAction === '/'
                    if themeFetcher && themeFetcher.formData
                        const submission
                            _ parseWithZod
                                @expr themeFetcher.formData
                                {
                                    @ schema ThemeFormSchema
                        if submission.status === 'success'
                            return submission.value.theme
                #
                    # *
                    # If the user's changing their theme mode preference, this will return the
                    # value it's being changed to.
                    #
            function ThemeSwitch
                {
                    @ userPreference
                    :{
                        :p userPreference
                            :optional
                            :union
                                :ref Theme
                                :null
                const fetcher
                    _ useFetcher
                        :param
                            :typeof action
                const [form]
                    _ useForm
                        {
                            @ id 'theme-switch'
                            @ lastResult fetcher.data?.result
                const optimisticMode = useOptimisticThemeMode()
                const mode = optimisticMode ?? userPreference ?? 'system'
                const nextMode
                    iif mode === 'system'
                        then 'light'
                        else
                            iif mode === 'light'
                                then 'dark'
                                else 'system'
                const modeLabel
                    {
                        @ light
                            < Icon
                                @ name "sun"
                                span
                                    @ className "sr-only"
                                    + Light
                        @ dark
                            < Icon
                                @ name "moon"
                                span
                                    @ className "sr-only"
                                    + Dark
                        @ system
                            < Icon
                                @ name "laptop"
                                span
                                    @ className "sr-only"
                                    + System
                return
                    < fetcher.Form
                        @ method "POST"
                        @ {...getFormProps(form)}
                        input
                            @ type "hidden"
                            @ name "theme"
                            @ value {nextMode}
                        div
                            @ className "flex gap-2"
                            button
                                @ type "submit"
                                @ className "flex h-8 w-8 cursor-pointer items-center justify-center"
                                + {modeLabel[mode]}

        export
            function ErrorBoundary
                const nonce = useNonce()
                    # the nonce doesn't rely on the loader so we can access that
                return
                    < Document
                        @ nonce {nonce}
                        < GeneralErrorBoundary
                    # NOTE: you cannot use useLoaderData in an ErrorBoundary because the loader
                    # likely failed to run so we have to do the best we can.
                    # We could probably do better than this (it's possible the loader did run).
                    # This would require a change in Remix.
                    # Just make sure your root route never errors out and you'll always be able
                    # to give the user a better UX.                        
    $else
        export
            function Layout
                {
                    @ children
                    :{
                        :p children
                            :ref React.ReactNode
                return
                    html
                        @ lang "en"
                        head
                            meta
                                @ charSet "utf-8"
                            meta
                                @ name "viewport"
                                @ content "width=device-width, initial-scale=1"
                            < Meta
                            < Links
                        body
                            + {children}
                            < ScrollRestoration
                            < Scripts
        export-default
            function App
                return
                    < Outlet


$*

$group
    import
        @ withSentry
        from '@sentry/remix'
    import tailwindStyleSheetUrl from './styles/tailwind.css?url'
    export
        const links
            :ref LinksFunction
            =
                =>
                    return
                        [
                            {
                                @ rel 'preload'
                                @ href iconsHref
                                @ as 'image'
                                # Preload svg sprite as a resource to avoid render blocking
                            {
                                @ rel 'mask-icon'
                                @ href '/favicons/mask-icon.svg'
                                # Preload CSS as a resource to avoid render blocking
                            {
                                @ rel 'alternate icon'
                                @ type 'image/png'
                                @ href '/favicons/favicon-32x32.png'
                            {
                                @ rel 'apple-touch-icon'
                                @ href '/favicons/apple-touch-icon.png'
                            @expr
                                {
                                    @ rel 'manifest'
                                    @ href '/site.webmanifest'
                                    @ crossOrigin 'use-credentials'
                                :as
                                    :ref const
                            {
                                @ rel 'icon'
                                @ type 'image/svg+xml'
                                @ href '/favicons/favicon.svg'
                                # necessary to make typescript happy
                                # These should match the css preloads above to avoid css as render blocking resource
                            {
                                @ rel 'stylesheet'
                                @ href tailwindStyleSheetUrl
                            ._ filter
                                @ Boolean
    export
        const meta
            :ref MetaFunction
                :param
                    :typeof loader
            =
                =>
                    {
                        @ data
                    return
                        [
                            {
                                @ title
                                    iif data
                                        then 'Epic Notes'
                                        else 'Error | Epic Notes'
                            {
                                @ name 'description'
                                @ content
                                    template
                                        + Your own captain's log
    export
        async-function loader
            {
                @ request
                :ref LoaderFunctionArgs
            const timings = makeTimings('root loader')
            const userId
                await
                    _ time
                        =>
                            _ getUserId(request)
                        {
                            @ timings
                            @ type 'getUserId'
                            @ desc 'getUserId in root'
            const user
                iif userId
                    then
                        await
                            _ time
                                =>
                                    _ prisma.user.findUniqueOrThrow
                                        {
                                            { select
                                                @ id true
                                                @ name true
                                                @ username true
                                                { image
                                                    { select
                                                        @ id true
                                                { roles
                                                    { select
                                                        @ name true
                                                        { permissions
                                                            { select
                                                                @ entity true
                                                                @ action true
                                                                @ access true
                                            { where
                                                @ id userId
                                {
                                    @ timings
                                    @ type 'find user'
                                    @ desc 'find user in root'
                    else null
            if userId && !user
                _ console.info('something weird happened')
                await
                    _ logout
                        {
                            @ request
                            @ redirectTo '/'
                    # something weird happened... The user is authenticated but we can't find
                    # them in the database. Maybe they were deleted? Let's log them out.
            const
                {
                    @ toast
                    @ headers toastHeaders
                =
                    await
                        _ getToast(request)
            const honeyProps = honeypot.getInputProps()
            return
                _ json
                    {
                        @ user
                        { requestInfo
                            @ hints getHints(request)
                            @ origin getDomainUrl(request)
                            @ path new URL(request.url).pathname
                            { userPrefs
                                @ theme getTheme(request)
                        @ ENV getEnv()
                        @ toast
                        @ honeyProps
                    {
                        @ headers
                            _ combineHeaders
                                {
                                    @ 'Server-Timing' timings.toString()
                                @ toastHeaders
    export-default withSentry(AppWithProviders)
    ${'$'}include root/userDropdown

*$