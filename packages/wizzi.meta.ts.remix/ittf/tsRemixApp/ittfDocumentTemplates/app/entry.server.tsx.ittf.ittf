$group
   import
       @ PassThrough
       from "node:stream"
       #
           # 
           #  By default, Remix will handle generating the HTTP Response for you.
           #  You are free to delete this file if you'd like to, but if you ever want it revealed again, you can run `npx remix reveal` âœ¨
           #  For more information, see https://remix.run/file-conventions/entry.server
           #
   :import-type
       @ AppLoadContext
       @ EntryContext
       from "@remix-run/node"
   import
       @ createReadableStreamFromReadable
       from "@remix-run/node"
   import
       @ RemixServer
       from "@remix-run/react"
   import
       @ isbot
       from "isbot"
   import
       @ renderToPipeableStream
       from "react-dom/server"
   const ABORT_DELAY = 5000
   export-default
       function handleRequest
           param request
               :ref Request
           param responseStatusCode
               :number
           param responseHeaders
               :ref Headers
           param remixContext
               :ref EntryContext
           param loadContext
               :ref AppLoadContext
               # This is ignored so we can keep it in the template for visibility.  Feel
               # free to delete this parameter in your app if you're not using it!
               # eslint-disable-next-line @typescript-eslint/no-unused-vars
           return
               iif isbot(request.headers.get("user-agent") || "")
                   then handleBotRequest(request, responseStatusCode, responseHeaders, remixContext)
                   else handleBrowserRequest(request, responseStatusCode, responseHeaders, remixContext)
   function handleBotRequest
       param request
           :ref Request
       param responseStatusCode
           :number
       param responseHeaders
           :ref Headers
       param remixContext
           :ref EntryContext
       return
           new Promise
               =>
                   param resolve
                   param reject
                   let shellRendered = false
                   const
                       {
                           @ pipe
                           @ abort
                       =
                           _ renderToPipeableStream
                               < RemixServer
                                   @ context {remixContext}
                                   @ url {request.url}
                                   @ abortDelay {ABORT_DELAY}
                               {
                                   m onAllReady
                                       set shellRendered = true
                                       const body = new PassThrough()
                                       const stream = createReadableStreamFromReadable(body)
                                       _ responseHeaders.set("Content-Type", "text/html")
                                       _ resolve
                                           new Response
                                               @ stream
                                               {
                                                   @ headers responseHeaders
                                                   @ status responseStatusCode
                                       _ pipe(body)
                                   m onShellError
                                       param error
                                           :unknown
                                       _ reject(error)
                                   m onError
                                       param error
                                           :unknown
                                       set responseStatusCode = 500
                                       if shellRendered
                                           # Log streaming rendering errors from inside the shell.  Don't log
                                           # errors encountered during initial shell rendering since they'll
                                           # reject and get logged in handleDocumentRequest.
                                           _ console.error(error)
                   _ setTimeout(abort, ABORT_DELAY)
   function handleBrowserRequest
       param request
           :ref Request
       param responseStatusCode
           :number
       param responseHeaders
           :ref Headers
       param remixContext
           :ref EntryContext
       return
           new Promise
               =>
                   param resolve
                   param reject
                   let shellRendered = false
                   const
                       {
                           @ pipe
                           @ abort
                       =
                           _ renderToPipeableStream
                               < RemixServer
                                   @ context {remixContext}
                                   @ url {request.url}
                                   @ abortDelay {ABORT_DELAY}
                               {
                                   m onShellReady
                                       set shellRendered = true
                                       const body = new PassThrough()
                                       const stream = createReadableStreamFromReadable(body)
                                       _ responseHeaders.set("Content-Type", "text/html")
                                       _ resolve
                                           new Response
                                               @ stream
                                               {
                                                   @ headers responseHeaders
                                                   @ status responseStatusCode
                                       _ pipe(body)
                                   m onShellError
                                       param error
                                           :unknown
                                       _ reject(error)
                                   m onError
                                       param error
                                           :unknown
                                       set responseStatusCode = 500
                                       if shellRendered
                                           # Log streaming rendering errors from inside the shell.  Don't log
                                           # errors encountered during initial shell rendering since they'll
                                           # reject and get logged in handleDocumentRequest.
                                           _ console.error(error)
                   _ setTimeout(abort, ABORT_DELAY)