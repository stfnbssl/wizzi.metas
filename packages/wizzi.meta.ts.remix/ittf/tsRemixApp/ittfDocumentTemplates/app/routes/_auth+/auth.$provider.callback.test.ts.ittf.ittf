$group
    import
        @ invariant
        from '@epic-web/invariant'
    import
        @ faker
        from '@faker-js/faker'
    import
        @ http
        from 'msw'
    import
        @ afterEach
        @ expect
        @ test
        from 'vitest'
    import
        @ twoFAVerificationType
        from '#app/routes/settings+/profile.two-factor.tsx'
    import
        @ getSessionExpirationDate
        @ sessionKey
        from '#app/utils/auth.server.ts'
    import
        @ connectionSessionStorage
        from '#app/utils/connections.server.ts'
    import
        @ GITHUB_PROVIDER_NAME
        from '#app/utils/connections.tsx'
    import
        @ prisma
        from '#app/utils/db.server.ts'
    import
        @ authSessionStorage
        from '#app/utils/session.server.ts'
    import
        @ generateTOTP
        from '#app/utils/totp.server.ts'
    import
        @ createUser
        from '#tests/db-utils.ts'
    import
        @ insertGitHubUser
        @ deleteGitHubUsers
        from '#tests/mocks/github.ts'
    import
        @ server
        from '#tests/mocks/index.ts'
    import
        @ consoleError
        from '#tests/setup/setup-test-env.ts'
    import
        @ BASE_URL
        @ convertSetCookieToCookie
        from '#tests/utils.ts'
    import
        @ loader
        from './auth.$provider.callback.ts'
    const ROUTE_PATH = '/auth/github/callback'
    const PARAMS
        {
            @ provider 'github'
    _ afterEach
        async=>
            await
                _ deleteGitHubUsers()
    _ test
        @ 'a new user goes to onboarding'
        async=>
            const request
                await
                    _ setupRequest()
            const response
                await
                    _ loader
                        {
                            @ request
                            @ params PARAMS
                            { context
                        ._ catch
                            =>
                                param e
                                + e
            _ expect(response).toHaveRedirect('/onboarding/github')
    _ test
        @ 'when auth fails, send the user to login with a toast'
        async=>
            _ consoleError.mockImplementation
                =>
            _ server.use
                _ http.post
                    @ 'https://github.com/login/oauth/access_token'
                    async=>
                        return
                            new Response
                                @ 'error'
                                {
                                    @ status 400
            const request
                await
                    _ setupRequest()
            const response
                await
                    _ loader
                        {
                            @ request
                            @ params PARAMS
                            { context
                        ._ catch
                            =>
                                param e
                                + e
            _ invariant(response instanceof Response, 'response should be a Response')
            _ expect(response).toHaveRedirect('/login')
            await
                _ expect(response).toSendToast
                    _ expect.objectContaining
                        {
                            @ title 'Auth Failed'
                            @ type 'error'
            _ expect(consoleError).toHaveBeenCalledTimes(1)
    _ test
        @ 'when a user is logged in, it creates the connection'
        async=>
            const githubUser
                await
                    _ insertGitHubUser()
            const session
                await
                    _ setupUser()
            const request
                await
                    _ setupRequest
                        {
                            @ sessionId session.id
                            @ code githubUser.code
            const response
                await
                    _ loader
                        {
                            @ request
                            @ params PARAMS
                            { context
            _ expect(response).toHaveRedirect('/settings/profile/connections')
            await
                _ expect(response).toSendToast
                    _ expect.objectContaining
                        {
                            @ title 'Connected'
                            @ type 'success'
                            @ description expect.stringContaining(githubUser.profile.login)
            const connection
                await
                    _ prisma.connection.findFirst
                        {
                            { select
                                @ id true
                            { where
                                @ userId session.userId
                                @ providerId githubUser.profile.id.toString()
            _ expect(connection, 'the connection was not created in the database').toBeTruthy()
    _ test
        template
            + when a user is logged in and has already connected, it doesn't do anything and just redirects the user back to the connections page
        async=>
            const session
                await
                    _ setupUser()
            const githubUser
                await
                    _ insertGitHubUser()
            await
                _ prisma.connection.create
                    {
                        { data
                            @ providerName GITHUB_PROVIDER_NAME
                            @ userId session.userId
                            @ providerId githubUser.profile.id.toString()
            const request
                await
                    _ setupRequest
                        {
                            @ sessionId session.id
                            @ code githubUser.code
            const response
                await
                    _ loader
                        {
                            @ request
                            @ params PARAMS
                            { context
            _ expect(response).toHaveRedirect('/settings/profile/connections')
            _ expect(response).toSendToast
                _ expect.objectContaining
                    {
                        @ title 'Already Connected'
                        @ description expect.stringContaining(githubUser.profile.login)
    _ test
        @ 'when a user exists with the same email, create connection and make session'
        async=>
            const githubUser
                await
                    _ insertGitHubUser()
            const email = githubUser.primaryEmail.toLowerCase()
            const
                {
                    @ userId
                =
                    await
                        _ setupUser
                            {
                                @ ...createUser()
                                @ email
            const request
                await
                    _ setupRequest
                        {
                            @ code githubUser.code
            const response
                await
                    _ loader
                        {
                            @ request
                            @ params PARAMS
                            { context
            _ expect(response).toHaveRedirect('/')
            await
                _ expect(response).toSendToast
                    _ expect.objectContaining
                        {
                            @ type 'message'
                            @ description expect.stringContaining(githubUser.profile.login)
            const connection
                await
                    _ prisma.connection.findFirst
                        {
                            { select
                                @ id true
                            { where
                                @ userId
                                @ providerId githubUser.profile.id.toString()
            _ expect(connection, 'the connection was not created in the database').toBeTruthy()
            await
                _ expect(response).toHaveSessionForUser(userId)
    _ test
        @ 'gives an error if the account is already connected to another user'
        async=>
            const githubUser
                await
                    _ insertGitHubUser()
            await
                _ prisma.user.create
                    {
                        { data
                            @ ...createUser()
                            { connections
                                { create
                                    @ providerName GITHUB_PROVIDER_NAME
                                    @ providerId githubUser.profile.id.toString()
            const session
                await
                    _ setupUser()
            const request
                await
                    _ setupRequest
                        {
                            @ sessionId session.id
                            @ code githubUser.code
            const response
                await
                    _ loader
                        {
                            @ request
                            @ params PARAMS
                            { context
            _ expect(response).toHaveRedirect('/settings/profile/connections')
            await
                _ expect(response).toSendToast
                    _ expect.objectContaining
                        {
                            @ title 'Already Connected'
                            @ description expect.stringContaining('already connected to another account')
    _ test
        @ 'if a user is not logged in, but the connection exists, make a session'
        async=>
            const githubUser
                await
                    _ insertGitHubUser()
            const
                {
                    @ userId
                =
                    await
                        _ setupUser()
            await
                _ prisma.connection.create
                    {
                        { data
                            @ providerName GITHUB_PROVIDER_NAME
                            @ providerId githubUser.profile.id.toString()
                            @ userId
            const request
                await
                    _ setupRequest
                        {
                            @ code githubUser.code
            const response
                await
                    _ loader
                        {
                            @ request
                            @ params PARAMS
                            { context
            _ expect(response).toHaveRedirect('/')
            await
                _ expect(response).toHaveSessionForUser(userId)
    _ test
        @ 'if a user is not logged in, but the connection exists and they have enabled 2FA, send them to verify their 2FA and do not make a session'
        async=>
            const githubUser
                await
                    _ insertGitHubUser()
            const
                {
                    @ userId
                =
                    await
                        _ setupUser()
            await
                _ prisma.connection.create
                    {
                        { data
                            @ providerName GITHUB_PROVIDER_NAME
                            @ providerId githubUser.profile.id.toString()
                            @ userId
            const
                {
                    @ otp _otp
                    ... config
                = generateTOTP()
            await
                _ prisma.verification.create
                    {
                        { data
                            @ type twoFAVerificationType
                            @ target userId
                            @ ...config
            const request
                await
                    _ setupRequest
                        {
                            @ code githubUser.code
            const response
                await
                    _ loader
                        {
                            @ request
                            @ params PARAMS
                            { context
            const searchParams
                new URLSearchParams
                    {
                        @ type twoFAVerificationType
                        @ target userId
                        @ redirectTo '/'
            _ expect(response).toHaveRedirect
                template
                    + /verify?
                    @ searchParams
                    +
    async-function setupRequest
        {
            @ sessionId
            @ code
                = faker.string.uuid()
            :{
                :p sessionId
                    :optional
                    :string
                :p code
                    :optional
                    :string
            =
        const url = new URL(ROUTE_PATH, BASE_URL)
        const state = faker.string.uuid()
        _ url.searchParams.set('state', state)
        _ url.searchParams.set('code', code)
        const connectionSession
            await
                _ connectionSessionStorage.getSession()
        _ connectionSession.set('oauth2:state', state)
        const authSession
            await
                _ authSessionStorage.getSession()
        if sessionId
            _ authSession.set(sessionKey, sessionId)
        const setSessionCookieHeader
            await
                _ authSessionStorage.commitSession(authSession)
        const setConnectionSessionCookieHeader
            await
                _ connectionSessionStorage.commitSession(connectionSession)
        const request
            new Request
                _ url.toString()
                {
                    @ method 'GET'
                    { headers
                        [ cookie
                            @ convertSetCookieToCookie(setConnectionSessionCookieHeader)
                            @ convertSetCookieToCookie(setSessionCookieHeader)
                            ._ join
                                @ '; '
        return request
    async-function setupUser
        param userData = createUser()
        const session
            await
                _ prisma.session.create
                    {
                        { data
                            @ expirationDate getSessionExpirationDate()
                            { user
                                { create
                                    @ ...userData
                        { select
                            @ id true
                            @ userId true
        return session