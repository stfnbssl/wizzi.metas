$group
    import
        @ redirect
        :type LoaderFunctionArgs
        from '@remix-run/node'
    import
        @ authenticator
        @ getSessionExpirationDate
        @ getUserId
        from '#app/utils/auth.server.ts'
    import
        @ ProviderNameSchema
        @ providerLabels
        from '#app/utils/connections.tsx'
    import
        @ prisma
        from '#app/utils/db.server.ts'
    import
        @ ensurePrimary
        from '#app/utils/litefs.server.ts'
    import
        @ combineHeaders
        from '#app/utils/misc.tsx'
    import
        @ destroyRedirectToHeader
        @ getRedirectCookieValue
        from '#app/utils/redirect-cookie.server.ts'
    import
        @ createToastHeaders
        @ redirectWithToast
        from '#app/utils/toast.server.ts'
    import
        @ verifySessionStorage
        from '#app/utils/verification.server.ts'
    import
        @ handleNewSession
        from './login.server.ts'
    import
        @ onboardingEmailSessionKey
        from './onboarding.tsx'
    import
        @ prefilledProfileKey
        @ providerIdKey
        from './onboarding_.$provider.tsx'
    const destroyRedirectTo
        {
            @ 'set-cookie' destroyRedirectToHeader
    export
        async-function loader
            {
                @ request
                @ params
                :ref LoaderFunctionArgs
            await
                _ ensurePrimary()
                # this loader performs mutations, so we need to make sure we're on the
                # primary instance to avoid writing to a read-only replica
            const providerName = ProviderNameSchema.parse(params.provider)
            const redirectTo = getRedirectCookieValue(request)
            const label = providerLabels[providerName]
            const authResult
                await
                    _ authenticator.authenticate
                        @ providerName
                        @ request
                        {
                            @ throwOnError true
                        ._ then
                            =>
                                param data
                                @expr
                                    ${'('}
                                        {
                                            @ success true
                                            @ data
                                    :as
                                        :ref const
                            =>
                                param error
                                @expr
                                    ${'('}
                                        {
                                            @ success false
                                            @ error
                                    :as
                                        :ref const
            if !authResult.success
                _ console.error(authResult.error)
                throw
                    await
                        _ redirectWithToast
                            @ '/login'
                            {
                                @ title 'Auth Failed'
                                @ description
                                    template
                                        + There was an error authenticating with&nbsp;
                                        @ label
                                        + .
                                @ type 'error'
                            {
                                @ headers destroyRedirectTo
            const
                {
                    @ data profile
                = authResult
            const existingConnection
                await
                    _ prisma.connection.findUnique
                        {
                            { select
                                @ userId true
                            { where
                                { providerName_providerId
                                    @ providerName
                                    @ providerId profile.id
            const userId
                await
                    _ getUserId(request)
            if existingConnection && userId
                if existingConnection.userId === userId
                    return
                        _ redirectWithToast
                            @ '/settings/profile/connections'
                            {
                                @ title 'Already Connected'
                                @ description
                                    template
                                        + Your "
                                        @ profile.username
                                        + "&nbsp;
                                        @ label
                                        + &nbsp;account is already connected.
                            {
                                @ headers destroyRedirectTo
                else
                    return
                        _ redirectWithToast
                            @ '/settings/profile/connections'
                            {
                                @ title 'Already Connected'
                                @ description
                                    template
                                        + The "
                                        @ profile.username
                                        + "&nbsp;
                                        @ label
                                        + &nbsp;account is already connected to another account.
                            {
                                @ headers destroyRedirectTo
            # If we're already logged in, then link the account
            if userId
                await
                    _ prisma.connection.create
                        {
                            { data
                                @ providerName
                                @ providerId profile.id
                                @ userId
                return
                    _ redirectWithToast
                        @ '/settings/profile/connections'
                        {
                            @ title 'Connected'
                            @ type 'success'
                            @ description
                                template
                                    + Your "
                                    @ profile.username
                                    + "&nbsp;
                                    @ label
                                    + &nbsp;account has been connected.
                        {
                            @ headers destroyRedirectTo
            # Connection exists already? Make a new session
            if existingConnection
                return
                    _ makeSession
                        {
                            @ request
                            @ userId existingConnection.userId
            const user
                await
                    _ prisma.user.findUnique
                        {
                            { select
                                @ id true
                            { where
                                @ email profile.email.toLowerCase()
                # if the email matches a user in the db, then link the account and
                # make a new session
            if user
                await
                    _ prisma.connection.create
                        {
                            { data
                                @ providerName
                                @ providerId profile.id
                                @ userId user.id
                return
                    _ makeSession
                        {
                            @ request
                            @ userId user.id
                        {
                            @ headers
                                await
                                    _ createToastHeaders
                                        {
                                            @ title 'Connected'
                                            @ description
                                                template
                                                    + Your "
                                                    @ profile.username
                                                    + "&nbsp;
                                                    @ label
                                                    + &nbsp;account has been connected.
            const verifySession
                await
                    _ verifySessionStorage.getSession()
                # this is a new user, so let's get them onboarded
            _ verifySession.set(onboardingEmailSessionKey, profile.email)
            _ verifySession.set
                @ prefilledProfileKey
                {
                    @ ...profile
                    @ email profile.email.toLowerCase()
                    @ username profile.username?.replace?.(/[^a-zA-Z0-9_]/g, '_')?.toLowerCase?.()
            _ verifySession.set(providerIdKey, profile.id)
            const onboardingRedirect
                [
                    template
                        + /onboarding/
                        @ providerName
                        +
                    iif redirectTo
                        then
                            new URLSearchParams
                                {
                                    @ redirectTo
                        else null
                    ._ filter
                        @ Boolean
                    ._ join
                        @ '?'
            return
                _ redirect
                    @ onboardingRedirect
                    {
                        @ headers
                            _ combineHeaders
                                {
                                    @ 'set-cookie'
                                        await
                                            _ verifySessionStorage.commitSession(verifySession)
                                @ destroyRedirectTo
    async-function makeSession
        {
            @ request
            @ userId
            @ redirectTo
            :{
                :p request
                    :ref Request
                :p userId
                    :string
                :p redirectTo
                    :optional
                    :union
                        :string
                        :null
        param responseInit
            :ref ResponseInit
            :optional
        set redirectTo ??= '/'
        const session
            await
                _ prisma.session.create
                    {
                        { select
                            @ id true
                            @ expirationDate true
                            @ userId true
                        { data
                            @ expirationDate getSessionExpirationDate()
                            @ userId
        return
            _ handleNewSession
                {
                    @ request
                    @ session
                    @ redirectTo
                    @ remember true
                {
                    @ headers combineHeaders(responseInit?.headers, destroyRedirectTo)