$group
    import
        @ getFormProps
        @ getInputProps
        @ useForm
        from '@conform-to/react'
    import
        @ getZodConstraint
        @ parseWithZod
        from '@conform-to/zod'
    import
        as E
        from '@react-email/components'
    import
        @ json
        @ redirect
        :type ActionFunctionArgs
        :type MetaFunction
        from '@remix-run/node'
    import
        @ Form
        @ useActionData
        @ useSearchParams
        from '@remix-run/react'
    import
        @ HoneypotInputs
        from 'remix-utils/honeypot/react'
    import
        @ z
        from 'zod'
    import
        @ GeneralErrorBoundary
        from '#app/components/error-boundary.tsx'
    import
        @ ErrorList
        @ Field
        from '#app/components/forms.tsx'
    import
        @ StatusButton
        from '#app/components/ui/status-button.tsx'
    import
        @ ProviderConnectionForm
        @ providerNames
        from '#app/utils/connections.tsx'
    import
        @ prisma
        from '#app/utils/db.server.ts'
    import
        @ sendEmail
        from '#app/utils/email.server.ts'
    import
        @ checkHoneypot
        from '#app/utils/honeypot.server.ts'
    import
        @ useIsPending
        from '#app/utils/misc.tsx'
    import
        @ EmailSchema
        from '#app/utils/user-validation.ts'
    import
        @ prepareVerification
        from './verify.server.ts'
    const SignupSchema
        _ z.object
            {
                @ email EmailSchema
    export
        async-function action
            {
                @ request
                :ref ActionFunctionArgs
            const formData
                await
                    _ request.formData()
            _ checkHoneypot(formData)
            const submission
                await
                    _ parseWithZod
                        @ formData
                        {
                            @ schema
                                _ SignupSchema.superRefine
                                    async=>
                                        param data
                                        param ctx
                                        const existingUser
                                            await
                                                _ prisma.user.findUnique
                                                    {
                                                        { where
                                                            @ email data.email
                                                        { select
                                                            @ id true
                                        if existingUser
                                            _ ctx.addIssue
                                                {
                                                    [ path
                                                        @ 'email'
                                                    @ code z.ZodIssueCode.custom
                                                    @ message 'A user already exists with this email'
                                            return
                            @ async true
            if submission.status !== 'success'
                return
                    _ json
                        {
                            @ result submission.reply()
                        {
                            @ status
                                iif submission.status === 'error'
                                    then 400
                                    else 200
            const
                {
                    @ email
                = submission.value
            const
                {
                    @ verifyUrl
                    @ redirectTo
                    @ otp
                =
                    await
                        _ prepareVerification
                            {
                                @ period 10 * 60
                                @ request
                                @ type 'onboarding'
                                @ target email
            const response
                await
                    _ sendEmail
                        {
                            @ to email
                            @ subject
                                template
                                    + Welcome to Epic Notes!
                            @ react
                                < SignupEmail
                                    @ onboardingUrl {verifyUrl.toString()}
                                    @ otp {otp}
            if response.status === 'success'
                return redirect(redirectTo.toString())
            else
                return
                    _ json
                        {
                            @ result
                                _ submission.reply
                                    {
                                        [ formErrors
                                            @ response.error.message
                        {
                            @ status 500
    export
        function SignupEmail
            {
                @ onboardingUrl
                @ otp
                :{
                    :p onboardingUrl
                        :string
                    :p otp
                        :string
            return
                < E.Html
                    @ lang "en"
                    @ dir "ltr"
                    < E.Container
                        h1
                            < E.Text
                                + Welcome to Epic Notes!
                        p
                            < E.Text
                                + Here's your verification code:
                                strong
                                    + {otp}
                        p
                            < E.Text
                                + Or click the link to get started:
                        < E.Link
                            @ href {onboardingUrl}
                            + {onboardingUrl}
    export
        const meta
            :ref MetaFunction
            =
                =>
                    return
                        [
                            {
                                @ title 'Sign Up | Epic Notes'
    export-default
        function SignupRoute
            const actionData
                _ useActionData
                    :param
                        :typeof action
            const isPending = useIsPending()
            const [searchParams] = useSearchParams()
            const redirectTo = searchParams.get('redirectTo')
            const [form, fields]
                _ useForm
                    {
                        @ id 'signup-form'
                        @ constraint getZodConstraint(SignupSchema)
                        @ lastResult actionData?.result
                        m onValidate
                            {
                                @ formData
                            const result
                                _ parseWithZod
                                    @ formData
                                    {
                                        @ schema SignupSchema
                            return result
                        @ shouldRevalidate 'onBlur'
            return
                div
                    @ className "container flex flex-col justify-center pb-32 pt-20"
                    div
                        @ className "text-center"
                        h1
                            @ className "text-h1"
                            + Let's start your journey!
                        p
                            @ className "mt-3 text-body-md text-muted-foreground"
                            + Please enter your email.
                    div
                        @ className "mx-auto mt-16 min-w-full max-w-sm sm:min-w-[368px]"
                        < Form
                            @ method "POST"
                            ... getFormProps(form)
                            < HoneypotInputs
                            < Field
                                @ labelProps
                                    {
                                        @ htmlFor fields.email.id
                                        @ children 'Email'
                                @ inputProps
                                    {
                                        _ ...getInputProps
                                            @expr fields.email
                                            {
                                                @ type 'email'
                                        @ autoFocus true
                                        @ autoComplete 'email'
                                @ errors {fields.email.errors}
                            < ErrorList
                                @ errors {form.errors}
                                @ id {form.errorId}
                            < StatusButton
                                @ className "w-full"
                                @ status
                                    iif isPending
                                        then 'pending'
                                        else form.status ?? 'idle'
                                @ type "submit"
                                @ disabled {isPending}
                                + Submit
                        ul
                            @ className "mt-5 flex flex-col gap-5 border-b-2 border-t-2 border-border py-3"
                            {
                                _ providerNames.map
                                    =>
                                        param providerName
                                        li
                                            @ key {providerName}
                                            < ProviderConnectionForm
                                                @ type "Signup"
                                                @ providerName {providerName}
                                                @ redirectTo {redirectTo}
    export
        function ErrorBoundary
            return
                < GeneralErrorBoundary