$group
    import
        @ getFormProps
        @ getInputProps
        @ useForm
        from '@conform-to/react'
    import
        @ getZodConstraint
        @ parseWithZod
        from '@conform-to/zod'
    import
        @ json
        :type ActionFunctionArgs
        :type LoaderFunctionArgs
        :type MetaFunction
        from '@remix-run/node'
    import
        @ Form
        @ Link
        @ useActionData
        @ useSearchParams
        from '@remix-run/react'
    import
        @ HoneypotInputs
        from 'remix-utils/honeypot/react'
    import
        @ z
        from 'zod'
    import
        @ GeneralErrorBoundary
        from '#app/components/error-boundary.tsx'
    import
        @ CheckboxField
        @ ErrorList
        @ Field
        from '#app/components/forms.tsx'
    import
        @ Spacer
        from '#app/components/spacer.tsx'
    import
        @ StatusButton
        from '#app/components/ui/status-button.tsx'
    import
        @ login
        @ requireAnonymous
        from '#app/utils/auth.server.ts'
    import
        @ ProviderConnectionForm
        @ providerNames
        from '#app/utils/connections.tsx'
    import
        @ checkHoneypot
        from '#app/utils/honeypot.server.ts'
    import
        @ useIsPending
        from '#app/utils/misc.tsx'
    import
        @ PasswordSchema
        @ UsernameSchema
        from '#app/utils/user-validation.ts'
    import
        @ handleNewSession
        from './login.server.ts'
    const LoginFormSchema
        _ z.object
            {
                @ username UsernameSchema
                @ password PasswordSchema
                @ redirectTo z.string().optional()
                @ remember z.boolean().optional()
    export
        async-function loader
            {
                @ request
                :ref LoaderFunctionArgs
            await
                _ requireAnonymous(request)
            return
                _ json
                    {
    export
        async-function action
            {
                @ request
                :ref ActionFunctionArgs
            await
                _ requireAnonymous(request)
            const formData
                await
                    _ request.formData()
            _ checkHoneypot(formData)
            const submission
                await
                    _ parseWithZod
                        @ formData
                        {
                            @ schema
                                =>
                                    param intent
                                    _ LoginFormSchema.transform
                                        async=>
                                            param data
                                            param ctx
                                            if intent !== null
                                                return
                                                    {
                                                        @ ...data
                                                        @ session null
                                            const session
                                                await
                                                    _ login(data)
                                            if !session
                                                _ ctx.addIssue
                                                    {
                                                        @ code z.ZodIssueCode.custom
                                                        @ message 'Invalid username or password'
                                                return z.NEVER
                                            return
                                                {
                                                    @ ...data
                                                    @ session
                            @ async true
            if submission.status !== 'success' || !submission.value.session
                return
                    _ json
                        {
                            @ result
                                _ submission.reply
                                    {
                                        [ hideFields
                                            @ 'password'
                        {
                            @ status
                                iif submission.status === 'error'
                                    then 400
                                    else 200
            const
                {
                    @ session
                    @ remember
                    @ redirectTo
                = submission.value
            return
                _ handleNewSession
                    {
                        @ request
                        @ session
                        @ remember remember ?? false
                        @ redirectTo
    export-default
        function LoginPage
            const actionData
                _ useActionData
                    :param
                        :typeof action
            const isPending = useIsPending()
            const [searchParams] = useSearchParams()
            const redirectTo = searchParams.get('redirectTo')
            const [form, fields]
                _ useForm
                    {
                        @ id 'login-form'
                        @ constraint getZodConstraint(LoginFormSchema)
                        { defaultValue
                            @ redirectTo
                        @ lastResult actionData?.result
                        m onValidate
                            {
                                @ formData
                            return
                                _ parseWithZod
                                    @ formData
                                    {
                                        @ schema LoginFormSchema
                        @ shouldRevalidate 'onBlur'
            return
                div
                    @ className "flex min-h-full flex-col justify-center pb-32 pt-20"
                    div
                        @ className "mx-auto w-full max-w-md"
                        div
                            @ className "flex flex-col gap-3 text-center"
                            h1
                                @ className "text-h1"
                                + Welcome back!
                            p
                                @ className "text-body-md text-muted-foreground"
                                + Please enter your details.
                        < Spacer
                            @ size "xs"
                        div
                            div
                                @ className "mx-auto w-full max-w-md px-8"
                                < Form
                                    @ method "POST"
                                    ... getFormProps(form)
                                    < HoneypotInputs
                                    < Field
                                        @ labelProps
                                            {
                                                @ children 'Username'
                                        @ inputProps
                                            {
                                                _ ...getInputProps
                                                    @expr fields.username
                                                    {
                                                        @ type 'text'
                                                @ autoFocus true
                                                @ className 'lowercase'
                                                @ autoComplete 'username'
                                        @ errors {fields.username.errors}
                                    < Field
                                        @ labelProps
                                            {
                                                @ children 'Password'
                                        @ inputProps
                                            {
                                                _ ...getInputProps
                                                    @expr fields.password
                                                    {
                                                        @ type 'password'
                                                @ autoComplete 'current-password'
                                        @ errors {fields.password.errors}
                                    div
                                        @ className "flex justify-between"
                                        < CheckboxField
                                            @ labelProps
                                                {
                                                    @ htmlFor fields.remember.id
                                                    @ children 'Remember me'
                                            @ buttonProps
                                                _ getInputProps
                                                    @expr fields.remember
                                                    {
                                                        @ type 'checkbox'
                                            @ errors {fields.remember.errors}
                                        div
                                            < Link
                                                @ to "/forgot-password"
                                                @ className "text-body-xs font-semibold"
                                                + Forgot password?
                                    input
                                        ...
                                            _ getInputProps
                                                @expr fields.redirectTo
                                                {
                                                    @ type 'hidden'
                                    < ErrorList
                                        @ errors {form.errors}
                                        @ id {form.errorId}
                                    div
                                        @ className "flex items-center justify-between gap-6 pt-3"
                                        < StatusButton
                                            @ className "w-full"
                                            @ status
                                                iif isPending
                                                    then 'pending'
                                                    else form.status ?? 'idle'
                                            @ type "submit"
                                            @ disabled {isPending}
                                            + Log in
                                ul
                                    @ className "mt-5 flex flex-col gap-5 border-b-2 border-t-2 border-border py-3"
                                    {
                                        _ providerNames.map
                                            =>
                                                param providerName
                                                li
                                                    @ key {providerName}
                                                    < ProviderConnectionForm
                                                        @ type "Login"
                                                        @ providerName {providerName}
                                                        @ redirectTo {redirectTo}
                                div
                                    @ className "flex items-center justify-center gap-2 pt-6"
                                    span
                                        @ className "text-muted-foreground"
                                        + New here?
                                    < Link
                                        @ to
                                            iif redirectTo
                                                then
                                                    template
                                                        + /signup?
                                                        _ encodeURIComponent(redirectTo)
                                                        +
                                                else '/signup'
                                        + Create an account
    export
        const meta
            :ref MetaFunction
            =
                =>
                    return
                        [
                            {
                                @ title 'Login to Epic Notes'
    export
        function ErrorBoundary
            return
                < GeneralErrorBoundary