$group
    import
        @ getFormProps
        @ getInputProps
        @ useForm
        from '@conform-to/react'
    import
        @ getZodConstraint
        @ parseWithZod
        from '@conform-to/zod'
    import
        @ json
        @ redirect
        :type ActionFunctionArgs
        :type LoaderFunctionArgs
        :type MetaFunction
        from '@remix-run/node'
    import
        @ Form
        @ useActionData
        @ useLoaderData
        from '@remix-run/react'
    import
        @ GeneralErrorBoundary
        from '#app/components/error-boundary.tsx'
    import
        @ ErrorList
        @ Field
        from '#app/components/forms.tsx'
    import
        @ StatusButton
        from '#app/components/ui/status-button.tsx'
    import
        @ requireAnonymous
        @ resetUserPassword
        from '#app/utils/auth.server.ts'
    import
        @ useIsPending
        from '#app/utils/misc.tsx'
    import
        @ PasswordAndConfirmPasswordSchema
        from '#app/utils/user-validation.ts'
    import
        @ verifySessionStorage
        from '#app/utils/verification.server.ts'
    export
        const resetPasswordUsernameSessionKey = 'resetPasswordUsername'
    const ResetPasswordSchema = PasswordAndConfirmPasswordSchema
    async-function requireResetPasswordUsername
        param request
            :ref Request
        await
            _ requireAnonymous(request)
        const verifySession
            await
                _ verifySessionStorage.getSession(request.headers.get('cookie'))
        const resetPasswordUsername = verifySession.get(resetPasswordUsernameSessionKey)
        if typeof resetPasswordUsername !== 'string' || !resetPasswordUsername
            throw redirect('/login')
        return resetPasswordUsername
    export
        async-function loader
            {
                @ request
                :ref LoaderFunctionArgs
            const resetPasswordUsername
                await
                    _ requireResetPasswordUsername(request)
            return
                _ json
                    {
                        @ resetPasswordUsername
    export
        async-function action
            {
                @ request
                :ref ActionFunctionArgs
            const resetPasswordUsername
                await
                    _ requireResetPasswordUsername(request)
            const formData
                await
                    _ request.formData()
            const submission
                _ parseWithZod
                    @ formData
                    {
                        @ schema ResetPasswordSchema
            if submission.status !== 'success'
                return
                    _ json
                        {
                            @ result submission.reply()
                        {
                            @ status
                                iif submission.status === 'error'
                                    then 400
                                    else 200
            const
                {
                    @ password
                = submission.value
            await
                _ resetUserPassword
                    {
                        @ username resetPasswordUsername
                        @ password
            const verifySession
                await
                    _ verifySessionStorage.getSession()
            return
                _ redirect
                    @ '/login'
                    {
                        { headers
                            @ 'set-cookie'
                                await
                                    _ verifySessionStorage.destroySession(verifySession)
    export
        const meta
            :ref MetaFunction
            =
                =>
                    return
                        [
                            {
                                @ title 'Reset Password | Epic Notes'
    export-default
        function ResetPasswordPage
            const data
                _ useLoaderData
                    :param
                        :typeof loader
            const actionData
                _ useActionData
                    :param
                        :typeof action
            const isPending = useIsPending()
            const [form, fields]
                _ useForm
                    {
                        @ id 'reset-password'
                        @ constraint getZodConstraint(ResetPasswordSchema)
                        @ lastResult actionData?.result
                        m onValidate
                            {
                                @ formData
                            return
                                _ parseWithZod
                                    @ formData
                                    {
                                        @ schema ResetPasswordSchema
                        @ shouldRevalidate 'onBlur'
            return
                div
                    @ className "container flex flex-col justify-center pb-32 pt-20"
                    div
                        @ className "text-center"
                        h1
                            @ className "text-h1"
                            + Password Reset
                        p
                            @ className "mt-3 text-body-md text-muted-foreground"
                            + Hi,
                            + {data.resetPasswordUsername}
                            + . No worries. It happens all the time.
                    div
                        @ className "mx-auto mt-16 min-w-full max-w-sm sm:min-w-[368px]"
                        < Form
                            @ method "POST"
                            ... getFormProps(form)
                            < Field
                                @ labelProps
                                    {
                                        @ htmlFor fields.password.id
                                        @ children 'New Password'
                                @ inputProps
                                    {
                                        _ ...getInputProps
                                            @expr fields.password
                                            {
                                                @ type 'password'
                                        @ autoComplete 'new-password'
                                        @ autoFocus true
                                @ errors {fields.password.errors}
                            < Field
                                @ labelProps
                                    {
                                        @ htmlFor fields.confirmPassword.id
                                        @ children 'Confirm Password'
                                @ inputProps
                                    {
                                        _ ...getInputProps
                                            @expr fields.confirmPassword
                                            {
                                                @ type 'password'
                                        @ autoComplete 'new-password'
                                @ errors {fields.confirmPassword.errors}
                            < ErrorList
                                @ errors {form.errors}
                                @ id {form.errorId}
                            < StatusButton
                                @ className "w-full"
                                @ status
                                    iif isPending
                                        then 'pending'
                                        else form.status ?? 'idle'
                                @ type "submit"
                                @ disabled {isPending}
                                + Reset password
    export
        function ErrorBoundary
            return
                < GeneralErrorBoundary