$group
    import
        @ invariant
        from '@epic-web/invariant'
    import
        @ redirect
        from '@remix-run/node'
    import
        @ safeRedirect
        from 'remix-utils/safe-redirect'
    import
        @ twoFAVerificationType
        from '#app/routes/settings+/profile.two-factor.tsx'
    import
        @ getUserId
        @ sessionKey
        from '#app/utils/auth.server.ts'
    import
        @ prisma
        from '#app/utils/db.server.ts'
    import
        @ combineResponseInits
        from '#app/utils/misc.tsx'
    import
        @ authSessionStorage
        from '#app/utils/session.server.ts'
    import
        @ redirectWithToast
        from '#app/utils/toast.server.ts'
    import
        @ verifySessionStorage
        from '#app/utils/verification.server.ts'
    import
        @ getRedirectToUrl
        :type VerifyFunctionArgs
        from './verify.server.ts'
    const verifiedTimeKey = 'verified-time'
    const unverifiedSessionIdKey = 'unverified-session-id'
    const rememberKey = 'remember'
    export
        async-function handleNewSession
            {
                @ request
                @ session
                @ redirectTo
                @ remember
                :{
                    :p request
                        :ref Request
                    :p session
                        :{
                            :p userId
                                :string
                            :p id
                                :string
                            :p expirationDate
                                :ref Date
                    :p redirectTo
                        :optional
                        :string
                    :p remember
                        :boolean
            param responseInit
                :ref ResponseInit
                :optional
            const verification
                await
                    _ prisma.verification.findUnique
                        {
                            { select
                                @ id true
                            { where
                                { target_type
                                    @ target session.userId
                                    @ type twoFAVerificationType
            const userHasTwoFactor = Boolean(verification)
            if userHasTwoFactor
                const verifySession
                    await
                        _ verifySessionStorage.getSession()
                _ verifySession.set(unverifiedSessionIdKey, session.id)
                _ verifySession.set(rememberKey, remember)
                const redirectUrl
                    _ getRedirectToUrl
                        {
                            @ request
                            @ type twoFAVerificationType
                            @ target session.userId
                            @ redirectTo
                return
                    _ redirect
                        template
                            +
                            @ redirectUrl.pathname
                            + ?
                            @ redirectUrl.searchParams
                            +
                        _ combineResponseInits
                            {
                                { headers
                                    @ 'set-cookie'
                                        await
                                            _ verifySessionStorage.commitSession(verifySession)
                            @ responseInit
            else
                const authSession
                    await
                        _ authSessionStorage.getSession(request.headers.get('cookie'))
                _ authSession.set(sessionKey, session.id)
                return
                    _ redirect
                        _ safeRedirect(redirectTo)
                        _ combineResponseInits
                            {
                                { headers
                                    @ 'set-cookie'
                                        await
                                            _ authSessionStorage.commitSession
                                                @ authSession
                                                {
                                                    @ expires
                                                        iif remember
                                                            then session.expirationDate
                                                            else undefined
                            @ responseInit
    export
        async-function handleVerification
            {
                @ request
                @ submission
                :ref VerifyFunctionArgs
            _ invariant(submission.status === 'success', 'Submission should be successful by now')
            const authSession
                await
                    _ authSessionStorage.getSession(request.headers.get('cookie'))
            const verifySession
                await
                    _ verifySessionStorage.getSession(request.headers.get('cookie'))
            const remember = verifySession.get(rememberKey)
            const
                {
                    @ redirectTo
                = submission.value
            const headers = new Headers()
            _ authSession.set(verifiedTimeKey, Date.now())
            const unverifiedSessionId = verifySession.get(unverifiedSessionIdKey)
            if unverifiedSessionId
                const session
                    await
                        _ prisma.session.findUnique
                            {
                                { select
                                    @ expirationDate true
                                { where
                                    @ id unverifiedSessionId
                if !session
                    throw
                        await
                            _ redirectWithToast
                                @ '/login'
                                {
                                    @ type 'error'
                                    @ title 'Invalid session'
                                    @ description 'Could not find session to verify. Please try again.'
                _ authSession.set(sessionKey, unverifiedSessionId)
                _ headers.append
                    @ 'set-cookie'
                    await
                        _ authSessionStorage.commitSession
                            @ authSession
                            {
                                @ expires
                                    iif remember
                                        then session.expirationDate
                                        else undefined
            else
                _ headers.append
                    @ 'set-cookie'
                    await
                        _ authSessionStorage.commitSession(authSession)
            _ headers.append
                @ 'set-cookie'
                await
                    _ verifySessionStorage.destroySession(verifySession)
            return
                _ redirect
                    _ safeRedirect(redirectTo)
                    {
                        @ headers
    export
        async-function shouldRequestTwoFA
            param request
                :ref Request
            const authSession
                await
                    _ authSessionStorage.getSession(request.headers.get('cookie'))
            const verifySession
                await
                    _ verifySessionStorage.getSession(request.headers.get('cookie'))
            if verifySession.has(unverifiedSessionIdKey)
                return true
            const userId
                await
                    _ getUserId(request)
            if !userId
                return false
            const userHasTwoFA
                await
                    _ prisma.verification.findUnique
                        {
                            { select
                                @ id true
                            { where
                                { target_type
                                    @ target userId
                                    @ type twoFAVerificationType
                # if it's over two hours since they last verified, we should request 2FA again
            if !userHasTwoFA
                return false
            const verifiedTime = authSession.get(verifiedTimeKey) ?? new Date(0)
            const twoHours = 1000 * 60 * 2
            return Date.now() - verifiedTime > twoHours