$group
    import
        @ json
        @ redirect
        :type ActionFunctionArgs
        from '@remix-run/node'
    import
        @ z
        from 'zod'
    import
        @ cache
        from '#app/utils/cache.server.ts'
    import
        @ getInstanceInfo
        from '#app/utils/litefs.server'
    export
        async-function action
            {
                @ request
                :ref ActionFunctionArgs
            const
                {
                    @ currentIsPrimary
                    @ primaryInstance
                =
                    await
                        _ getInstanceInfo()
            if !currentIsPrimary
                throw
                    new Error
                        template
                            +
                            @ request.url
                            + &nbsp;should only be called on the primary instance (
                            @ primaryInstance
                            + )}
            const token = process.env.INTERNAL_COMMAND_TOKEN
            const isAuthorized
                ===
                    + request.headers.get('Authorization')
                    template
                        + Bearer&nbsp;
                        @ token
                        +
            if !isAuthorized
                return redirect('https://www.youtube.com/watch?v=dQw4w9WgXcQ')
            const
                {
                    @ key
                    @ cacheValue
                =
                    _ z.object
                        {
                            @ key z.string()
                            @ cacheValue z.unknown().optional()
                        ._ parse
                            await
                                _ request.json()
            if cacheValue === undefined
                await
                    _ cache.delete(key)
            else
                await
                    _ cache.set(key, cacheValue)
                    # @ts-expect-error - we don't reliably know the type of cacheValue
            return
                _ json
                    {
                        @ success true