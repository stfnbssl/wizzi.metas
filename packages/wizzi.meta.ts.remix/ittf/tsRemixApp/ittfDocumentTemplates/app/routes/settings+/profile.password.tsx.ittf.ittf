$group
    import
        @ getFormProps
        @ getInputProps
        @ useForm
        from '@conform-to/react'
    import
        @ getZodConstraint
        @ parseWithZod
        from '@conform-to/zod'
    import
        :type SEOHandle
        from '@nasa-gcn/remix-seo'
    import
        @ json
        @ redirect
        :type LoaderFunctionArgs
        :type ActionFunctionArgs
        from '@remix-run/node'
    import
        @ Form
        @ Link
        @ useActionData
        from '@remix-run/react'
    import
        @ z
        from 'zod'
    import
        @ ErrorList
        @ Field
        from '#app/components/forms.tsx'
    import
        @ Button
        from '#app/components/ui/button.tsx'
    import
        @ Icon
        from '#app/components/ui/icon.tsx'
    import
        @ StatusButton
        from '#app/components/ui/status-button.tsx'
    import
        @ getPasswordHash
        @ requireUserId
        @ verifyUserPassword
        from '#app/utils/auth.server.ts'
    import
        @ prisma
        from '#app/utils/db.server.ts'
    import
        @ useIsPending
        from '#app/utils/misc.tsx'
    import
        @ redirectWithToast
        from '#app/utils/toast.server.ts'
    import
        @ PasswordSchema
        from '#app/utils/user-validation.ts'
    import
        :type BreadcrumbHandle
        from './profile.tsx'
    export
        const handle
            :intersect
                :ref BreadcrumbHandle
                :ref SEOHandle
            =
                {
                    @ breadcrumb
                        < Icon
                            @ name "dots-horizontal"
                            + Password
                    @ getSitemapEntries
                        =>
                            + null
    const ChangePasswordForm
        _ z.object
            {
                @ currentPassword PasswordSchema
                @ newPassword PasswordSchema
                @ confirmNewPassword PasswordSchema
            ._ superRefine
                =>
                    {
                        @ confirmNewPassword
                        @ newPassword
                    param ctx
                    if confirmNewPassword !== newPassword
                        _ ctx.addIssue
                            {
                                [ path
                                    @ 'confirmNewPassword'
                                @ code z.ZodIssueCode.custom
                                @ message 'The passwords must match'
    async-function requirePassword
        param userId
            :string
        const password
            await
                _ prisma.password.findUnique
                    {
                        { select
                            @ userId true
                        { where
                            @ userId
        if !password
            throw redirect('/settings/profile/password/create')
    export
        async-function loader
            {
                @ request
                :ref LoaderFunctionArgs
            const userId
                await
                    _ requireUserId(request)
            await
                _ requirePassword(userId)
            return
                _ json
                    {
    export
        async-function action
            {
                @ request
                :ref ActionFunctionArgs
            const userId
                await
                    _ requireUserId(request)
            await
                _ requirePassword(userId)
            const formData
                await
                    _ request.formData()
            const submission
                await
                    _ parseWithZod
                        @ formData
                        {
                            @ async true
                            @ schema
                                _ ChangePasswordForm.superRefine
                                    async=>
                                        {
                                            @ currentPassword
                                            @ newPassword
                                        param ctx
                                        if currentPassword && newPassword
                                            const user
                                                await
                                                    _ verifyUserPassword
                                                        {
                                                            @ id userId
                                                        @ currentPassword
                                            if !user
                                                _ ctx.addIssue
                                                    {
                                                        [ path
                                                            @ 'currentPassword'
                                                        @ code z.ZodIssueCode.custom
                                                        @ message 'Incorrect password.'
            if submission.status !== 'success'
                return
                    _ json
                        {
                            @ result
                                _ submission.reply
                                    {
                                        [ hideFields
                                            @ 'currentPassword'
                                            @ 'newPassword'
                                            @ 'confirmNewPassword'
                        {
                            @ status
                                iif submission.status === 'error'
                                    then 400
                                    else 200
            const
                {
                    @ newPassword
                = submission.value
            await
                _ prisma.user.update
                    {
                        { select
                            @ username true
                        { where
                            @ id userId
                        { data
                            { password
                                { update
                                    @ hash
                                        await
                                            _ getPasswordHash(newPassword)
            return
                _ redirectWithToast
                    template
                        + /settings/profile
                    {
                        @ type 'success'
                        @ title 'Password Changed'
                        @ description 'Your password has been changed.'
                    {
                        @ status 302
    export-default
        function ChangePasswordRoute
            const actionData
                _ useActionData
                    :param
                        :typeof action
            const isPending = useIsPending()
            const [form, fields]
                _ useForm
                    {
                        @ id 'password-change-form'
                        @ constraint getZodConstraint(ChangePasswordForm)
                        @ lastResult actionData?.result
                        m onValidate
                            {
                                @ formData
                            return
                                _ parseWithZod
                                    @ formData
                                    {
                                        @ schema ChangePasswordForm
                        @ shouldRevalidate 'onBlur'
            return
                < Form
                    @ method "POST"
                    ... getFormProps(form)
                    @ className "mx-auto max-w-md"
                    < Field
                        @ labelProps
                            {
                                @ children 'Current Password'
                        @ inputProps
                            {
                                _ ...getInputProps
                                    @expr fields.currentPassword
                                    {
                                        @ type 'password'
                                @ autoComplete 'current-password'
                        @ errors {fields.currentPassword.errors}
                    < Field
                        @ labelProps
                            {
                                @ children 'New Password'
                        @ inputProps
                            {
                                _ ...getInputProps
                                    @expr fields.newPassword
                                    {
                                        @ type 'password'
                                @ autoComplete 'new-password'
                        @ errors {fields.newPassword.errors}
                    < Field
                        @ labelProps
                            {
                                @ children 'Confirm New Password'
                        @ inputProps
                            {
                                _ ...getInputProps
                                    @expr fields.confirmNewPassword
                                    {
                                        @ type 'password'
                                @ autoComplete 'new-password'
                        @ errors {fields.confirmNewPassword.errors}
                    < ErrorList
                        @ id {form.errorId}
                        @ errors {form.errors}
                    div
                        @ className "grid w-full grid-cols-2 gap-6"
                        < Button
                            @ variant "secondary"
                            @ asChild
                            < Link
                                @ to ".."
                                + Cancel
                        < StatusButton
                            @ type "submit"
                            @ status
                                iif isPending
                                    then 'pending'
                                    else form.status ?? 'idle'
                            + Change Password