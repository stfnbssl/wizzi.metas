$group
    import
        @ getFormProps
        @ getInputProps
        @ useForm
        from '@conform-to/react'
    import
        @ getZodConstraint
        @ parseWithZod
        from '@conform-to/zod'
    import
        :type SEOHandle
        from '@nasa-gcn/remix-seo'
    import
        @ json
        @ redirect
        :type ActionFunctionArgs
        :type LoaderFunctionArgs
        from '@remix-run/node'
    import
        @ Form
        @ useActionData
        @ useLoaderData
        from '@remix-run/react'
    import
        @ z
        from 'zod'
    import
        @ ErrorList
        @ Field
        from '#app/components/forms.tsx'
    import
        @ Icon
        from '#app/components/ui/icon.tsx'
    import
        @ StatusButton
        from '#app/components/ui/status-button.tsx'
    import
        @ prepareVerification
        @ requireRecentVerification
        from '#app/routes/_auth+/verify.server.ts'
    import
        @ requireUserId
        from '#app/utils/auth.server.ts'
    import
        @ prisma
        from '#app/utils/db.server.ts'
    import
        @ sendEmail
        from '#app/utils/email.server.ts'
    import
        @ useIsPending
        from '#app/utils/misc.tsx'
    import
        @ EmailSchema
        from '#app/utils/user-validation.ts'
    import
        @ verifySessionStorage
        from '#app/utils/verification.server.ts'
    import
        @ EmailChangeEmail
        from './profile.change-email.server.tsx'
    import
        :type BreadcrumbHandle
        from './profile.tsx'
    export
        const handle
            :intersect
                :ref BreadcrumbHandle
                :ref SEOHandle
            =
                {
                    @ breadcrumb
                        < Icon
                            @ name "envelope-closed"
                            + Change Email
                    @ getSitemapEntries
                        =>
                            + null
    export
        const newEmailAddressSessionKey = 'new-email-address'
    const ChangeEmailSchema
        _ z.object
            {
                @ email EmailSchema
    export
        async-function loader
            {
                @ request
                :ref LoaderFunctionArgs
            await
                _ requireRecentVerification(request)
            const userId
                await
                    _ requireUserId(request)
            const user
                await
                    _ prisma.user.findUnique
                        {
                            { where
                                @ id userId
                            { select
                                @ email true
            if !user
                const params
                    new URLSearchParams
                        {
                            @ redirectTo request.url
                throw
                    _ redirect
                        template
                            + /login?
                            @ params
                            +
            return
                _ json
                    {
                        @ user
    export
        async-function action
            {
                @ request
                :ref ActionFunctionArgs
            const userId
                await
                    _ requireUserId(request)
            const formData
                await
                    _ request.formData()
            const submission
                await
                    _ parseWithZod
                        @ formData
                        {
                            @ schema
                                _ ChangeEmailSchema.superRefine
                                    async=>
                                        param data
                                        param ctx
                                        const existingUser
                                            await
                                                _ prisma.user.findUnique
                                                    {
                                                        { where
                                                            @ email data.email
                                        if existingUser
                                            _ ctx.addIssue
                                                {
                                                    [ path
                                                        @ 'email'
                                                    @ code z.ZodIssueCode.custom
                                                    @ message 'This email is already in use.'
                            @ async true
            if submission.status !== 'success'
                return
                    _ json
                        {
                            @ result submission.reply()
                        {
                            @ status
                                iif submission.status === 'error'
                                    then 400
                                    else 200
            const
                {
                    @ otp
                    @ redirectTo
                    @ verifyUrl
                =
                    await
                        _ prepareVerification
                            {
                                @ period 10 * 60
                                @ request
                                @ target userId
                                @ type 'change-email'
            const response
                await
                    _ sendEmail
                        {
                            @ to submission.value.email
                            @ subject
                                template
                                    + Epic Notes Email Change Verification
                            @ react
                                < EmailChangeEmail
                                    @ verifyUrl {verifyUrl.toString()}
                                    @ otp {otp}
            if response.status === 'success'
                const verifySession
                    await
                        _ verifySessionStorage.getSession()
                _ verifySession.set(newEmailAddressSessionKey, submission.value.email)
                return
                    _ redirect
                        _ redirectTo.toString()
                        {
                            { headers
                                @ 'set-cookie'
                                    await
                                        _ verifySessionStorage.commitSession(verifySession)
            else
                return
                    _ json
                        {
                            @ result
                                _ submission.reply
                                    {
                                        [ formErrors
                                            @ response.error.message
                        {
                            @ status 500
    export-default
        function ChangeEmailIndex
            const data
                _ useLoaderData
                    :param
                        :typeof loader
            const actionData
                _ useActionData
                    :param
                        :typeof action
            const [form, fields]
                _ useForm
                    {
                        @ id 'change-email-form'
                        @ constraint getZodConstraint(ChangeEmailSchema)
                        @ lastResult actionData?.result
                        m onValidate
                            {
                                @ formData
                            return
                                _ parseWithZod
                                    @ formData
                                    {
                                        @ schema ChangeEmailSchema
            const isPending = useIsPending()
            return
                div
                    h1
                        @ className "text-h1"
                        + Change Email
                    p
                        + You will receive an email at the new email address to confirm.
                    p
                        + An email notice will also be sent to your old address
                        + {data.user.email}
                        + .
                    div
                        @ className "mx-auto mt-5 max-w-sm"
                        < Form
                            @ method "POST"
                            ... getFormProps(form)
                            < Field
                                @ labelProps
                                    {
                                        @ children 'New Email'
                                @ inputProps
                                    {
                                        _ ...getInputProps
                                            @expr fields.email
                                            {
                                                @ type 'email'
                                        @ autoComplete 'email'
                                @ errors {fields.email.errors}
                            < ErrorList
                                @ id {form.errorId}
                                @ errors {form.errors}
                            div
                                < StatusButton
                                    @ status
                                        iif isPending
                                            then 'pending'
                                            else form.status ?? 'idle'
                                    + Send Confirmation