$group
    import
        @ getFormProps
        @ getInputProps
        @ useForm
        from '@conform-to/react'
    import
        @ getZodConstraint
        @ parseWithZod
        from '@conform-to/zod'
    import
        @ invariantResponse
        from '@epic-web/invariant'
    import
        :type SEOHandle
        from '@nasa-gcn/remix-seo'
    import
        @ json
        @ redirect
        @ unstable_createMemoryUploadHandler
        @ unstable_parseMultipartFormData
        :type LoaderFunctionArgs
        :type ActionFunctionArgs
        from '@remix-run/node'
    import
        @ Form
        @ useActionData
        @ useLoaderData
        @ useNavigation
        from '@remix-run/react'
    import
        @ useState
        from 'react'
    import
        @ z
        from 'zod'
    import
        @ ErrorList
        from '#app/components/forms.tsx'
    import
        @ Button
        from '#app/components/ui/button.tsx'
    import
        @ Icon
        from '#app/components/ui/icon.tsx'
    import
        @ StatusButton
        from '#app/components/ui/status-button.tsx'
    import
        @ requireUserId
        from '#app/utils/auth.server.ts'
    import
        @ prisma
        from '#app/utils/db.server.ts'
    import
        @ getUserImgSrc
        @ useDoubleCheck
        @ useIsPending
        from '#app/utils/misc.tsx'
    import
        :type BreadcrumbHandle
        from './profile.tsx'
    export
        const handle
            :intersect
                :ref BreadcrumbHandle
                :ref SEOHandle
            =
                {
                    @ breadcrumb
                        < Icon
                            @ name "avatar"
                            + Photo
                    @ getSitemapEntries
                        =>
                            + null
    const MAX_SIZE = 1024 * 1024 * 3
    const DeleteImageSchema
        _ z.object
            {
                @ intent z.literal('delete')
        # 3MB
    const NewImageSchema
        _ z.object
            {
                @ intent z.literal('submit')
                @ photoFile
                    _ z.instanceof(File).refine
                        =>
                            param file
                            set file.size > 0
                        @ 'Image is required'
                        ._ refine
                            =>
                                param file
                                set file.size <= MAX_SIZE
                            @ 'Image size must be less than 3MB'
    const PhotoFormSchema
        _ z.discriminatedUnion
            @ 'intent'
            [
                @ DeleteImageSchema
                @ NewImageSchema
    export
        async-function loader
            {
                @ request
                :ref LoaderFunctionArgs
            const userId
                await
                    _ requireUserId(request)
            const user
                await
                    _ prisma.user.findUnique
                        {
                            { where
                                @ id userId
                            { select
                                @ id true
                                @ name true
                                @ username true
                                { image
                                    { select
                                        @ id true
            _ invariantResponse
                @ user
                @ 'User not found'
                {
                    @ status 404
            return
                _ json
                    {
                        @ user
    export
        async-function action
            {
                @ request
                :ref ActionFunctionArgs
            const userId
                await
                    _ requireUserId(request)
            const formData
                await
                    _ unstable_parseMultipartFormData
                        @ request
                        _ unstable_createMemoryUploadHandler
                            {
                                @ maxPartSize MAX_SIZE
            const submission
                await
                    _ parseWithZod
                        @ formData
                        {
                            @ schema
                                _ PhotoFormSchema.transform
                                    async=>
                                        param data
                                        if data.intent === 'delete'
                                            return
                                                {
                                                    @ intent 'delete'
                                        if data.photoFile.size <= 0
                                            return z.NEVER
                                        return
                                            {
                                                @ intent data.intent
                                                { image
                                                    @ contentType data.photoFile.type
                                                    @ blob
                                                        _ Buffer.from
                                                            await
                                                                _ data.photoFile.arrayBuffer()
                            @ async true
            if submission.status !== 'success'
                return
                    _ json
                        {
                            @ result submission.reply()
                        {
                            @ status
                                iif submission.status === 'error'
                                    then 400
                                    else 200
            const
                {
                    @ image
                    @ intent
                = submission.value
            if intent === 'delete'
                await
                    _ prisma.userImage.deleteMany
                        {
                            { where
                                @ userId
                return redirect('/settings/profile')
            await
                _ prisma.$transaction
                    async=>
                        param $prisma
                        await
                            _ $prisma.userImage.deleteMany
                                {
                                    { where
                                        @ userId
                        await
                            _ $prisma.user.update
                                {
                                    { where
                                        @ id userId
                                    { data
                                        { image
                                            @ create image
            return redirect('/settings/profile')
    export-default
        function PhotoRoute
            const data
                _ useLoaderData
                    :param
                        :typeof loader
            const doubleCheckDeleteImage = useDoubleCheck()
            const actionData
                _ useActionData
                    :param
                        :typeof action
            const navigation = useNavigation()
            const [form, fields]
                _ useForm
                    {
                        @ id 'profile-photo'
                        @ constraint getZodConstraint(PhotoFormSchema)
                        @ lastResult actionData?.result
                        m onValidate
                            {
                                @ formData
                            return
                                _ parseWithZod
                                    @ formData
                                    {
                                        @ schema PhotoFormSchema
                        @ shouldRevalidate 'onBlur'
            const isPending = useIsPending()
            const pendingIntent
                iif isPending
                    then navigation.formData?.get?.('intent')
                    else null
            const lastSubmissionIntent = fields.intent.value
            const [newImageSrc, setNewImageSrc]
                _ useState
                    :param
                        :union
                            :string
                            :null
                    @ null
            return
                div
                    < Form
                        @ method "POST"
                        @ encType "multipart/form-data"
                        @ className "flex flex-col items-center justify-center gap-10"
                        @ onReset
                            =>
                                _ setNewImageSrc(null)
                        ... getFormProps(form)
                        img
                            @ src
                                ??
                                    + newImageSrc
                                    ${'('}
                                        iif data.user
                                            then getUserImgSrc(data.user.image?.id)
                                            else ''
                            @ className "h-52 w-52 rounded-full object-cover"
                            @ alt {data.user?.name ?? data.user?.username}
                        < ErrorList
                            @ errors {fields.photoFile.errors}
                            @ id {fields.photoFile.id}
                        div
                            @ className "flex gap-4"
                            {
                            input
                                ...
                                    _ getInputProps
                                        @expr fields.photoFile
                                        {
                                            @ type 'file'
                                @ accept "image/*"
                                @ className "peer sr-only"
                                @ required
                                @ tabIndex
                                    iif newImageSrc
                                        then -1
                                        else 0
                                @ onChange
                                    =>
                                        param e
                                        const file = e.currentTarget.files?.[0]
                                        if file
                                            const reader = new FileReader()
                                            set reader.onload =
                                                =>
                                                    param event
                                                    _ setNewImageSrc(event.target?.result?.toString?.() ?? null)
                                            _ reader.readAsDataURL(file)
                            < Button
                                @ asChild
                                @ className "cursor-pointer peer-valid:hidden peer-focus-within:ring-2 peer-focus-visible:ring-2"
                                label
                                    @ htmlFor {fields.photoFile.id}
                                    < Icon
                                        @ name "pencil-1"
                                        + Change
                            < StatusButton
                                @ name "intent"
                                @ value "submit"
                                @ type "submit"
                                @ className "peer-invalid:hidden"
                                @ status
                                    iif pendingIntent === 'submit'
                                        then 'pending'
                                        else
                                            iif lastSubmissionIntent === 'submit'
                                                then form.status ?? 'idle'
                                                else 'idle'
                                + Save Photo
                            < Button
                                @ variant "destructive"
                                @ className "peer-invalid:hidden"
                                ... form.reset.getButtonProps()
                                < Icon
                                    @ name "trash"
                                    + Reset
                            {
                                iif data.user.image?.id
                                    then
                                        < StatusButton
                                            @ className "peer-valid:hidden"
                                            @ variant "destructive"
                                            ...
                                                _ doubleCheckDeleteImage.getButtonProps
                                                    {
                                                        @ type 'submit'
                                                        @ name 'intent'
                                                        @ value 'delete'
                                            @ status
                                                iif pendingIntent === 'delete'
                                                    then 'pending'
                                                    else
                                                        iif lastSubmissionIntent === 'delete'
                                                            then form.status ?? 'idle'
                                                            else 'idle'
                                            < Icon
                                                @ name "trash"
                                                {
                                                    iif doubleCheckDeleteImage.doubleCheck
                                                        then 'Are you sure?'
                                                        else 'Delete'
                                    else null
                        < ErrorList
                            @ errors {form.errors}