$group

    ${'$'}include set-ctx-functions
    ${'$'}
        setCtxDep ('qrcode', '^1.5.3');
        setCtxDep ('@types/qrcode', '^1.5.5');

    import
        @ getFormProps
        @ getInputProps
        @ useForm
        from '@conform-to/react'
    import
        @ getZodConstraint
        @ parseWithZod
        from '@conform-to/zod'
    import
        :type SEOHandle
        from '@nasa-gcn/remix-seo'
    import
        @ json
        @ redirect
        :type LoaderFunctionArgs
        :type ActionFunctionArgs
        from '@remix-run/node'
    import
        @ Form
        @ useActionData
        @ useLoaderData
        @ useNavigation
        from '@remix-run/react'
    import
        as QRCode
        from 'qrcode'
    import
        @ z
        from 'zod'
    import
        @ ErrorList
        @ OTPField
        from '#app/components/forms.tsx'
    import
        @ Icon
        from '#app/components/ui/icon.tsx'
    import
        @ StatusButton
        from '#app/components/ui/status-button.tsx'
    import
        @ isCodeValid
        from '#app/routes/_auth+/verify.server.ts'
    import
        @ requireUserId
        from '#app/utils/auth.server.ts'
    import
        @ prisma
        from '#app/utils/db.server.ts'
    import
        @ getDomainUrl
        @ useIsPending
        from '#app/utils/misc.tsx'
    import
        @ redirectWithToast
        from '#app/utils/toast.server.ts'
    import
        @ getTOTPAuthUri
        from '#app/utils/totp.server.ts'
    import
        :type BreadcrumbHandle
        from './profile.tsx'
    import
        @ twoFAVerificationType
        from './profile.two-factor.tsx'
    export
        const handle
            :intersect
                :ref BreadcrumbHandle
                :ref SEOHandle
            =
                {
                    @ breadcrumb
                        < Icon
                            @ name "check"
                            + Verify
                    @ getSitemapEntries
                        =>
                            + null
    const CancelSchema
        _ z.object
            {
                @ intent z.literal('cancel')
    const VerifySchema
        _ z.object
            {
                @ intent z.literal('verify')
                @ code z.string().min(6).max(6)
    const ActionSchema
        _ z.discriminatedUnion
            @ 'intent'
            [
                @ CancelSchema
                @ VerifySchema
    export
        const twoFAVerifyVerificationType = '2fa-verify'
    export
        async-function loader
            {
                @ request
                :ref LoaderFunctionArgs
            const userId
                await
                    _ requireUserId(request)
            const verification
                await
                    _ prisma.verification.findUnique
                        {
                            { where
                                { target_type
                                    @ type twoFAVerifyVerificationType
                                    @ target userId
                            { select
                                @ id true
                                @ algorithm true
                                @ secret true
                                @ period true
                                @ digits true
            if !verification
                return redirect('/settings/profile/two-factor')
            const user
                await
                    _ prisma.user.findUniqueOrThrow
                        {
                            { where
                                @ id userId
                            { select
                                @ email true
            const issuer = new URL(getDomainUrl(request)).host
            const otpUri
                _ getTOTPAuthUri
                    {
                        @ ...verification
                        @ accountName user.email
                        @ issuer
            const qrCode
                await
                    _ QRCode.toDataURL(otpUri)
            return
                _ json
                    {
                        @ otpUri
                        @ qrCode
    export
        async-function action
            {
                @ request
                :ref ActionFunctionArgs
            const userId
                await
                    _ requireUserId(request)
            const formData
                await
                    _ request.formData()
            const submission
                await
                    _ parseWithZod
                        @ formData
                        {
                            @ schema
                                =>
                                    _ ActionSchema.superRefine
                                        async=>
                                            param data
                                            param ctx
                                            if data.intent === 'cancel'
                                                return null
                                            const codeIsValid
                                                await
                                                    _ isCodeValid
                                                        {
                                                            @ code data.code
                                                            @ type twoFAVerifyVerificationType
                                                            @ target userId
                                            if !codeIsValid
                                                _ ctx.addIssue
                                                    {
                                                        [ path
                                                            @ 'code'
                                                        @ code z.ZodIssueCode.custom
                                                        @ message
                                                            template
                                                                + Invalid code
                                                return z.NEVER
                            @ async true
            if submission.status !== 'success'
                return
                    _ json
                        {
                            @ result submission.reply()
                        {
                            @ status
                                iif submission.status === 'error'
                                    then 400
                                    else 200
            switch submission.value.intent
                case 'cancel'
                    await
                        _ prisma.verification.deleteMany
                            {
                                { where
                                    @ type twoFAVerifyVerificationType
                                    @ target userId
                    return redirect('/settings/profile/two-factor')
                case 'verify'
                    await
                        _ prisma.verification.update
                            {
                                { where
                                    { target_type
                                        @ type twoFAVerifyVerificationType
                                        @ target userId
                                { data
                                    @ type twoFAVerificationType
                    return
                        _ redirectWithToast
                            @ '/settings/profile/two-factor'
                            {
                                @ type 'success'
                                @ title 'Enabled'
                                @ description 'Two-factor authentication has been enabled.'
    export-default
        function TwoFactorRoute
            const data
                _ useLoaderData
                    :param
                        :typeof loader
            const actionData
                _ useActionData
                    :param
                        :typeof action
            const navigation = useNavigation()
            const isPending = useIsPending()
            const pendingIntent
                iif isPending
                    then navigation.formData?.get?.('intent')
                    else null
            const [form, fields]
                _ useForm
                    {
                        @ id 'verify-form'
                        @ constraint getZodConstraint(ActionSchema)
                        @ lastResult actionData?.result
                        m onValidate
                            {
                                @ formData
                            return
                                _ parseWithZod
                                    @ formData
                                    {
                                        @ schema ActionSchema
            const lastSubmissionIntent = fields.intent.value
            return
                div
                    div
                        @ className "flex flex-col items-center gap-4"
                        img
                            @ alt "qr code"
                            @ src {data.qrCode}
                            @ className "h-56 w-56"
                        p
                            + Scan this QR code with your authenticator app.
                        p
                            @ className "text-sm"
                            + If you cannot scan the QR code, you can manually add this account to&lf;					your authenticator app using this code:
                        div
                            @ className "p-3"
                            pre
                                @ className "whitespace-pre-wrap break-all text-sm"
                                @ aria-label "One-time Password URI"
                                + {data.otpUri}
                        p
                            @ className "text-sm"
                            + Once you've added the account, enter the code from your authenticator&lf;					app below. Once you enable 2FA, you will need to enter a code from&lf;					your authenticator app every time you log in or perform important&lf;					actions. Do not lose access to your authenticator app, or you will&lf;					lose access to your account.
                        div
                            @ className "flex w-full max-w-xs flex-col justify-center gap-4"
                            < Form
                                @ method "POST"
                                ... getFormProps(form)
                                @ className "flex-1"
                                div
                                    @ className "flex items-center justify-center"
                                    < OTPField
                                        @ labelProps
                                            {
                                                @ htmlFor fields.code.id
                                                @ children 'Code'
                                        @ inputProps
                                            {
                                                _ ...getInputProps
                                                    @expr fields.code
                                                    {
                                                        @ type 'text'
                                                @ autoFocus true
                                                @ autoComplete 'one-time-code'
                                        @ errors {fields.code.errors}
                                div
                                    @ className "min-h-[32px] px-4 pb-3 pt-1"
                                    < ErrorList
                                        @ id {form.errorId}
                                        @ errors {form.errors}
                                div
                                    @ className "flex justify-between gap-4"
                                    < StatusButton
                                        @ className "w-full"
                                        @ status
                                            iif pendingIntent === 'verify'
                                                then 'pending'
                                                else
                                                    iif lastSubmissionIntent === 'verify'
                                                        then form.status ?? 'idle'
                                                        else 'idle'
                                        @ type "submit"
                                        @ name "intent"
                                        @ value "verify"
                                        + Submit
                                    < StatusButton
                                        @ className "w-full"
                                        @ variant "secondary"
                                        @ status
                                            iif pendingIntent === 'cancel'
                                                then 'pending'
                                                else
                                                    iif lastSubmissionIntent === 'cancel'
                                                        then form.status ?? 'idle'
                                                        else 'idle'
                                        @ type "submit"
                                        @ name "intent"
                                        @ value "cancel"
                                        @ disabled {isPending}
                                        + Cancel