$group
    import
        @ getFormProps
        @ getInputProps
        @ useForm
        from '@conform-to/react'
    import
        @ getZodConstraint
        @ parseWithZod
        from '@conform-to/zod'
    import
        @ invariantResponse
        from '@epic-web/invariant'
    import
        :type SEOHandle
        from '@nasa-gcn/remix-seo'
    import
        @ json
        :type LoaderFunctionArgs
        :type ActionFunctionArgs
        from '@remix-run/node'
    import
        @ Link
        @ useFetcher
        @ useLoaderData
        from '@remix-run/react'
    import
        @ z
        from 'zod'
    import
        @ ErrorList
        @ Field
        from '#app/components/forms.tsx'
    import
        @ Button
        from '#app/components/ui/button.tsx'
    import
        @ Icon
        from '#app/components/ui/icon.tsx'
    import
        @ StatusButton
        from '#app/components/ui/status-button.tsx'
    import
        @ requireUserId
        @ sessionKey
        from '#app/utils/auth.server.ts'
    import
        @ prisma
        from '#app/utils/db.server.ts'
    import
        @ getUserImgSrc
        @ useDoubleCheck
        from '#app/utils/misc.tsx'
    import
        @ authSessionStorage
        from '#app/utils/session.server.ts'
    import
        @ redirectWithToast
        from '#app/utils/toast.server.ts'
    import
        @ NameSchema
        @ UsernameSchema
        from '#app/utils/user-validation.ts'
    import
        @ twoFAVerificationType
        from './profile.two-factor.tsx'
    export
        const handle
            :ref SEOHandle
            =
                {
                    @ getSitemapEntries
                        =>
                            + null
    const ProfileFormSchema
        _ z.object
            {
                @ name NameSchema.optional()
                @ username UsernameSchema
    export
        async-function loader
            {
                @ request
                :ref LoaderFunctionArgs
            const userId
                await
                    _ requireUserId(request)
            const user
                await
                    _ prisma.user.findUniqueOrThrow
                        {
                            { where
                                @ id userId
                            { select
                                @ id true
                                @ name true
                                @ username true
                                @ email true
                                { image
                                    { select
                                        @ id true
                                { _count
                                    { select
                                        { sessions
                                            { where
                                                { expirationDate
                                                    @ gt new Date()
            const twoFactorVerification
                await
                    _ prisma.verification.findUnique
                        {
                            { select
                                @ id true
                            { where
                                { target_type
                                    @ type twoFAVerificationType
                                    @ target userId
            const password
                await
                    _ prisma.password.findUnique
                        {
                            { select
                                @ userId true
                            { where
                                @ userId
            return
                _ json
                    {
                        @ user
                        @ hasPassword Boolean(password)
                        @ isTwoFactorEnabled Boolean(twoFactorVerification)
    :type ProfileActionArgs
        :{
            :p request
                :ref Request
            :p userId
                :string
            :p formData
                :ref FormData
    const profileUpdateActionIntent = 'update-profile'
    const signOutOfSessionsActionIntent = 'sign-out-of-sessions'
    const deleteDataActionIntent = 'delete-data'
    export
        async-function action
            {
                @ request
                :ref ActionFunctionArgs
            const userId
                await
                    _ requireUserId(request)
            const formData
                await
                    _ request.formData()
            const intent = formData.get('intent')
            switch intent
                case profileUpdateActionIntent
                    return
                        _ profileUpdateAction
                            {
                                @ request
                                @ userId
                                @ formData
                case signOutOfSessionsActionIntent
                    return
                        _ signOutOfSessionsAction
                            {
                                @ request
                                @ userId
                                @ formData
                case deleteDataActionIntent
                    return
                        _ deleteDataAction
                            {
                                @ request
                                @ userId
                                @ formData
                default
                    throw
                        new Response
                            template
                                + Invalid intent "
                                @ intent
                                + "
                            {
                                @ status 400
    export-default
        function EditUserProfile
            const data
                _ useLoaderData
                    :param
                        :typeof loader
            return
                div
                    @ className "flex flex-col gap-12"
                    div
                        @ className "flex justify-center"
                        div
                            @ className "relative h-52 w-52"
                            img
                                @ src {getUserImgSrc(data.user.image?.id)}
                                @ alt {data.user.username}
                                @ className "h-full w-full rounded-full object-cover"
                            < Button
                                @ asChild
                                @ variant "outline"
                                @ className "absolute -right-3 top-3 flex h-10 w-10 items-center justify-center rounded-full p-0"
                                < Link
                                    @ preventScrollReset
                                    @ to "photo"
                                    @ title "Change profile photo"
                                    @ aria-label "Change profile photo"
                                    < Icon
                                        @ name "camera"
                                        @ className "h-4 w-4"
                    < UpdateProfile
                    div
                        @ className "col-span-6 my-6 h-1 border-b-[1.5px] border-foreground"
                    div
                        @ className "col-span-full flex flex-col gap-6"
                        div
                            < Link
                                @ to "change-email"
                                < Icon
                                    @ name "envelope-closed"
                                    + Change email from
                                    + {data.user.email}
                        div
                            < Link
                                @ to "two-factor"
                                {
                                    iif data.isTwoFactorEnabled
                                        then
                                            < Icon
                                                @ name "lock-closed"
                                                + 2FA is enabled
                                        else
                                            < Icon
                                                @ name "lock-open-1"
                                                + Enable 2FA
                        div
                            < Link
                                @ to
                                    iif data.hasPassword
                                        then 'password'
                                        else 'password/create'
                                < Icon
                                    @ name "dots-horizontal"
                                    {
                                        iif data.hasPassword
                                            then 'Change Password'
                                            else 'Create a Password'
                        div
                            < Link
                                @ to "connections"
                                < Icon
                                    @ name "link-2"
                                    + Manage connections
                        div
                            < Link
                                @ reloadDocument
                                @ download "my-epic-notes-data.json"
                                @ to "/resources/download-user-data"
                                < Icon
                                    @ name "download"
                                    + Download your data
                        < SignOutOfSessions
                        < DeleteData
    async-function profileUpdateAction
        {
            @ userId
            @ formData
            :ref ProfileActionArgs
        const submission
            await
                _ parseWithZod
                    @ formData
                    {
                        @ async true
                        @ schema
                            _ ProfileFormSchema.superRefine
                                async=>
                                    {
                                        @ username
                                    param ctx
                                    const existingUsername
                                        await
                                            _ prisma.user.findUnique
                                                {
                                                    { where
                                                        @ username
                                                    { select
                                                        @ id true
                                    if existingUsername && existingUsername.id !== userId
                                        _ ctx.addIssue
                                            {
                                                [ path
                                                    @ 'username'
                                                @ code z.ZodIssueCode.custom
                                                @ message 'A user already exists with this username'
        if submission.status !== 'success'
            return
                _ json
                    {
                        @ result submission.reply()
                    {
                        @ status
                            iif submission.status === 'error'
                                then 400
                                else 200
        const data = submission.value
        await
            _ prisma.user.update
                {
                    { select
                        @ username true
                    { where
                        @ id userId
                    { data
                        @ name data.name
                        @ username data.username
        return
            _ json
                {
                    @ result submission.reply()
    function UpdateProfile
        const data
            _ useLoaderData
                :param
                    :typeof loader
        const fetcher
            _ useFetcher
                :param
                    :typeof profileUpdateAction
        const [form, fields]
            _ useForm
                {
                    @ id 'edit-profile'
                    @ constraint getZodConstraint(ProfileFormSchema)
                    @ lastResult fetcher.data?.result
                    m onValidate
                        {
                            @ formData
                        return
                            _ parseWithZod
                                @ formData
                                {
                                    @ schema ProfileFormSchema
                    { defaultValue
                        @ username data.user.username
                        @ name data.user.name
        return
            < fetcher.Form
                @ method "POST"
                ... getFormProps(form)
                div
                    @ className "grid grid-cols-6 gap-x-10"
                    < Field
                        @ className "col-span-3"
                        @ labelProps
                            {
                                @ htmlFor fields.username.id
                                @ children 'Username'
                        @ inputProps
                            _ getInputProps
                                @expr fields.username
                                {
                                    @ type 'text'
                        @ errors {fields.username.errors}
                    < Field
                        @ className "col-span-3"
                        @ labelProps
                            {
                                @ htmlFor fields.name.id
                                @ children 'Name'
                        @ inputProps
                            _ getInputProps
                                @expr fields.name
                                {
                                    @ type 'text'
                        @ errors {fields.name.errors}
                < ErrorList
                    @ errors {form.errors}
                    @ id {form.errorId}
                div
                    @ className "mt-8 flex justify-center"
                    < StatusButton
                        @ type "submit"
                        @ size "wide"
                        @ name "intent"
                        @ value {profileUpdateActionIntent}
                        @ status
                            iif fetcher.state !== 'idle'
                                then 'pending'
                                else form.status ?? 'idle'
                        + Save changes
    async-function signOutOfSessionsAction
        {
            @ request
            @ userId
            :ref ProfileActionArgs
        const authSession
            await
                _ authSessionStorage.getSession(request.headers.get('cookie'))
        const sessionId = authSession.get(sessionKey)
        _ invariantResponse(sessionId, 'You must be authenticated to sign out of other sessions')
        await
            _ prisma.session.deleteMany
                {
                    { where
                        @ userId
                        { id
                            @ not sessionId
        return
            _ json
                @expr
                    {
                        @ status 'success'
                    :as
                        :ref const
    function SignOutOfSessions
        const data
            _ useLoaderData
                :param
                    :typeof loader
        const dc = useDoubleCheck()
        const fetcher
            _ useFetcher
                :param
                    :typeof signOutOfSessionsAction
        const otherSessionsCount = data.user._count.sessions - 1
        return
            div
                {
                    iif otherSessionsCount
                        then
                            < fetcher.Form
                                @ method "POST"
                                < StatusButton
                                    ...
                                        _ dc.getButtonProps
                                            {
                                                @ type 'submit'
                                                @ name 'intent'
                                                @ value signOutOfSessionsActionIntent
                                    @ variant
                                        iif dc.doubleCheck
                                            then 'destructive'
                                            else 'default'
                                    @ status
                                        iif fetcher.state !== 'idle'
                                            then 'pending'
                                            else fetcher.data?.status ?? 'idle'
                                    < Icon
                                        @ name "avatar"
                                        {
                                            iif dc.doubleCheck
                                                then
                                                    template
                                                        + Are you sure?
                                                else
                                                    template
                                                        + Sign out of&nbsp;
                                                        @ otherSessionsCount
                                                        + &nbsp;other sessions
                        else
                            < Icon
                                @ name "avatar"
                                + This is your only session
    async-function deleteDataAction
        {
            @ userId
            :ref ProfileActionArgs
        await
            _ prisma.user.delete
                {
                    { where
                        @ id userId
        return
            _ redirectWithToast
                @ '/'
                {
                    @ type 'success'
                    @ title 'Data Deleted'
                    @ description 'All of your data has been deleted'
    function DeleteData
        const dc = useDoubleCheck()
        const fetcher
            _ useFetcher
                :param
                    :typeof deleteDataAction
        return
            div
                < fetcher.Form
                    @ method "POST"
                    < StatusButton
                        ...
                            _ dc.getButtonProps
                                {
                                    @ type 'submit'
                                    @ name 'intent'
                                    @ value deleteDataActionIntent
                        @ variant
                            iif dc.doubleCheck
                                then 'destructive'
                                else 'default'
                        @ status
                            iif fetcher.state !== 'idle'
                                then 'pending'
                                else 'idle'
                        < Icon
                            @ name "trash"
                            {
                                iif dc.doubleCheck
                                    then
                                        template
                                            + Are you sure?
                                    else
                                        template
                                            + Delete all your data