$group
    import
        :type SEOHandle
        from '@nasa-gcn/remix-seo'
    import
        @ json
        :type LoaderFunctionArgs
        :type ActionFunctionArgs
        from '@remix-run/node'
    import
        @ useFetcher
        from '@remix-run/react'
    import
        @ Icon
        from '#app/components/ui/icon.tsx'
    import
        @ StatusButton
        from '#app/components/ui/status-button.tsx'
    import
        @ requireRecentVerification
        from '#app/routes/_auth+/verify.server.ts'
    import
        @ requireUserId
        from '#app/utils/auth.server.ts'
    import
        @ prisma
        from '#app/utils/db.server.ts'
    import
        @ useDoubleCheck
        from '#app/utils/misc.tsx'
    import
        @ redirectWithToast
        from '#app/utils/toast.server.ts'
    import
        :type BreadcrumbHandle
        from './profile.tsx'
    import
        @ twoFAVerificationType
        from './profile.two-factor.tsx'
    export
        const handle
            :intersect
                :ref BreadcrumbHandle
                :ref SEOHandle
            =
                {
                    @ breadcrumb
                        < Icon
                            @ name "lock-open-1"
                            + Disable
                    @ getSitemapEntries
                        =>
                            + null
    export
        async-function loader
            {
                @ request
                :ref LoaderFunctionArgs
            await
                _ requireRecentVerification(request)
            return
                _ json
                    {
    export
        async-function action
            {
                @ request
                :ref ActionFunctionArgs
            await
                _ requireRecentVerification(request)
            const userId
                await
                    _ requireUserId(request)
            await
                _ prisma.verification.delete
                    {
                        { where
                            { target_type
                                @ target userId
                                @ type twoFAVerificationType
            return
                _ redirectWithToast
                    @ '/settings/profile/two-factor'
                    {
                        @ title '2FA Disabled'
                        @ description 'Two factor authentication has been disabled.'
    export-default
        function TwoFactorDisableRoute
            const disable2FAFetcher
                _ useFetcher
                    :param
                        :typeof action
            const dc = useDoubleCheck()
            return
                div
                    @ className "mx-auto max-w-sm"
                    < disable2FAFetcher.Form
                        @ method "POST"
                        p
                            + Disabling two factor authentication is not recommended. However, if&lf;					you would like to do so, click here:
                        < StatusButton
                            @ variant "destructive"
                            @ status
                                iif disable2FAFetcher.state === 'loading'
                                    then 'pending'
                                    else 'idle'
                            ...
                                _ dc.getButtonProps
                                    {
                                        @ className 'mx-auto'
                                        @ name 'intent'
                                        @ value 'disable'
                                        @ type 'submit'
                            {
                                iif dc.doubleCheck
                                    then 'Are you sure?'
                                    else 'Disable 2FA'