$group

    ${'$'}include set-ctx-functions
    ${'$'}
        setCtxDep ('date-fns', '^3.6.0');
        
    import
        @ getFormProps
        @ useForm
        from '@conform-to/react'
    import
        @ parseWithZod
        from '@conform-to/zod'
    import
        @ invariantResponse
        from '@epic-web/invariant'
    import
        @ json
        :type LoaderFunctionArgs
        :type ActionFunctionArgs
        from '@remix-run/node'
    import
        @ Form
        @ Link
        @ useActionData
        @ useLoaderData
        :type MetaFunction
        from '@remix-run/react'
    import
        @ formatDistanceToNow
        from 'date-fns'
    import
        @ z
        from 'zod'
    import
        @ GeneralErrorBoundary
        from '#app/components/error-boundary.tsx'
    import
        @ floatingToolbarClassName
        from '#app/components/floating-toolbar.tsx'
    import
        @ ErrorList
        from '#app/components/forms.tsx'
    import
        @ Button
        from '#app/components/ui/button.tsx'
    import
        @ Icon
        from '#app/components/ui/icon.tsx'
    import
        @ StatusButton
        from '#app/components/ui/status-button.tsx'
    import
        @ requireUserId
        from '#app/utils/auth.server.ts'
    import
        @ prisma
        from '#app/utils/db.server.ts'
    import
        @ getNoteImgSrc
        @ useIsPending
        from '#app/utils/misc.tsx'
    import
        @ requireUserWithPermission
        from '#app/utils/permissions.server.ts'
    import
        @ redirectWithToast
        from '#app/utils/toast.server.ts'
    import
        @ userHasPermission
        @ useOptionalUser
        from '#app/utils/user.ts'
    import
        :type loader
            as notesLoader
        from './notes.tsx'
    export
        async-function loader
            {
                @ params
                :ref LoaderFunctionArgs
            const note
                await
                    _ prisma.note.findUnique
                        {
                            { where
                                @ id params.noteId
                            { select
                                @ id true
                                @ title true
                                @ content true
                                @ ownerId true
                                @ updatedAt true
                                { images
                                    { select
                                        @ id true
                                        @ altText true
            _ invariantResponse
                @ note
                @ 'Not found'
                {
                    @ status 404
            const date = new Date(note.updatedAt)
            const timeAgo = formatDistanceToNow(date)
            return
                _ json
                    {
                        @ note
                        @ timeAgo
    const DeleteFormSchema
        _ z.object
            {
                @ intent z.literal('delete-note')
                @ noteId z.string()
    export
        async-function action
            {
                @ request
                :ref ActionFunctionArgs
            const userId
                await
                    _ requireUserId(request)
            const formData
                await
                    _ request.formData()
            const submission
                _ parseWithZod
                    @ formData
                    {
                        @ schema DeleteFormSchema
            if submission.status !== 'success'
                return
                    _ json
                        {
                            @ result submission.reply()
                        {
                            @ status
                                iif submission.status === 'error'
                                    then 400
                                    else 200
            const
                {
                    @ noteId
                = submission.value
            const note
                await
                    _ prisma.note.findFirst
                        {
                            { select
                                @ id true
                                @ ownerId true
                                { owner
                                    { select
                                        @ username true
                            { where
                                @ id noteId
            _ invariantResponse
                @ note
                @ 'Not found'
                {
                    @ status 404
            const isOwner = note.ownerId === userId
            await
                _ requireUserWithPermission
                    @ request
                    iif isOwner
                        then
                            template
                                + delete:note:own
                        else
                            template
                                + delete:note:any
            await
                _ prisma.note.delete
                    {
                        { where
                            @ id note.id
            return
                _ redirectWithToast
                    template
                        + /users/
                        @ note.owner.username
                        + /notes
                    {
                        @ type 'success'
                        @ title 'Success'
                        @ description 'Your note has been deleted.'
    export-default
        function NoteRoute
            const data
                _ useLoaderData
                    :param
                        :typeof loader
            const user = useOptionalUser()
            const isOwner = user?.id === data.note.ownerId
            const canDelete
                _ userHasPermission
                    @ user
                    iif isOwner
                        then
                            template
                                + delete:note:own
                        else
                            template
                                + delete:note:any
            const displayBar = canDelete || isOwner
            return
                div
                    @ className "absolute inset-0 flex flex-col px-10"
                    h2
                        @ className "mb-2 pt-12 text-h2 lg:mb-6"
                        + {data.note.title}
                    div
                        @ className
                            template
                                +
                                iif displayBar
                                    then 'pb-24'
                                    else 'pb-12'
                                + &nbsp;overflow-y-auto
                        ul
                            @ className "flex flex-wrap gap-5 py-5"
                            {
                                _ data.note.images.map
                                    =>
                                        param image
                                        li
                                            @ key {image.id}
                                            a
                                                @ href {getNoteImgSrc(image.id)}
                                                img
                                                    @ src {getNoteImgSrc(image.id)}
                                                    @ alt {image.altText ?? ''}
                                                    @ className "h-32 w-32 rounded-lg object-cover"
                        p
                            @ className "whitespace-break-spaces text-sm md:text-lg"
                            + {data.note.content}
                    {
                        iif displayBar
                            then
                                div
                                    @ className {floatingToolbarClassName}
                                    span
                                        @ className "text-sm text-foreground/90 max-[524px]:hidden"
                                        < Icon
                                            @ name "clock"
                                            @ className "scale-125"
                                            + {data.timeAgo}
                                            + ago
                                    div
                                        @ className "grid flex-1 grid-cols-2 justify-end gap-2 min-[525px]:flex md:gap-4"
                                        {
                                            iif canDelete
                                                then
                                                    < DeleteNote
                                                        @ id {data.note.id}
                                                else null
                                        < Button
                                            @ asChild
                                            @ className "min-[525px]:max-md:aspect-square min-[525px]:max-md:px-0"
                                            < Link
                                                @ to "edit"
                                                < Icon
                                                    @ name "pencil-1"
                                                    @ className "scale-125 max-md:scale-150"
                                                    span
                                                        @ className "max-md:hidden"
                                                        + Edit
                            else null
    export
        function DeleteNote
            {
                @ id
                :{
                    :p id
                        :string
            const actionData
                _ useActionData
                    :param
                        :typeof action
            const isPending = useIsPending()
            const [form]
                _ useForm
                    {
                        @ id 'delete-note'
                        @ lastResult actionData?.result
            return
                < Form
                    @ method "POST"
                    ... getFormProps(form)
                    input
                        @ type "hidden"
                        @ name "noteId"
                        @ value {id}
                    < StatusButton
                        @ type "submit"
                        @ name "intent"
                        @ value "delete-note"
                        @ variant "destructive"
                        @ status
                            iif isPending
                                then 'pending'
                                else form.status ?? 'idle'
                        @ disabled {isPending}
                        @ className "w-full max-md:aspect-square max-md:px-0"
                        < Icon
                            @ name "trash"
                            @ className "scale-125 max-md:scale-150"
                            span
                                @ className "max-md:hidden"
                                + Delete
                    < ErrorList
                        @ errors {form.errors}
                        @ id {form.errorId}
    export
        const meta
            :ref MetaFunction
                :param
                    :typeof loader
                :param
                    :{
                        :p 'routes/users+/$username_+/notes'
                            :typeof notesLoader
            =
                =>
                    {
                        @ data
                        @ params
                        @ matches
                    const notesMatch
                        _ matches.find
                            =>
                                param m
                                set m.id === 'routes/users+/$username_+/notes'
                    const displayName = notesMatch?.data?.owner?.name ?? params.username
                    const noteTitle = data?.note?.title ?? 'Note'
                    const noteContentsSummary
                        iif data && data.note.content.length > 100
                            then data?.note?.content?.slice?.(0, 97) + '...'
                            else 'No content'
                    return
                        [
                            {
                                @ title
                                    template
                                        +
                                        @ noteTitle
                                        + &nbsp;|&nbsp;
                                        @ displayName
                                        + 's Notes | Epic Notes
                            {
                                @ name 'description'
                                @ content noteContentsSummary
    export
        function ErrorBoundary
            return
                < GeneralErrorBoundary
                    @ statusHandlers
                        {
                            @ 403
                                =>
                                    p
                                        + You are not allowed to do that
                            @ 404
                                =>
                                    {
                                        @ params
                                    p
                                        + No note with the id "
                                        + {params.noteId}
                                        + " exists