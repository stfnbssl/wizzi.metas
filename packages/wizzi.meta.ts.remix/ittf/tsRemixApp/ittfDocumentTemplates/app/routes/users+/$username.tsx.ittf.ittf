$group
    import
        @ invariantResponse
        from '@epic-web/invariant'
    import
        @ json
        :type LoaderFunctionArgs
        from '@remix-run/node'
    import
        @ Form
        @ Link
        @ useLoaderData
        :type MetaFunction
        from '@remix-run/react'
    import
        @ GeneralErrorBoundary
        from '#app/components/error-boundary.tsx'
    import
        @ Spacer
        from '#app/components/spacer.tsx'
    import
        @ Button
        from '#app/components/ui/button.tsx'
    import
        @ Icon
        from '#app/components/ui/icon.tsx'
    import
        @ prisma
        from '#app/utils/db.server.ts'
    import
        @ getUserImgSrc
        from '#app/utils/misc.tsx'
    import
        @ useOptionalUser
        from '#app/utils/user.ts'
    export
        async-function loader
            {
                @ params
                :ref LoaderFunctionArgs
            const user
                await
                    _ prisma.user.findFirst
                        {
                            { select
                                @ id true
                                @ name true
                                @ username true
                                @ createdAt true
                                { image
                                    { select
                                        @ id true
                            { where
                                @ username params.username
            _ invariantResponse
                @ user
                @ 'User not found'
                {
                    @ status 404
            return
                _ json
                    {
                        @ user
                        @ userJoinedDisplay user.createdAt.toLocaleDateString()
    export-default
        function ProfileRoute
            const data
                _ useLoaderData
                    :param
                        :typeof loader
            const user = data.user
            const userDisplayName = user.name ?? user.username
            const loggedInUser = useOptionalUser()
            const isLoggedInUser = data.user.id === loggedInUser?.id
            return
                div
                    @ className "container mb-48 mt-36 flex flex-col items-center justify-center"
                    < Spacer
                        @ size "4xs"
                    div
                        @ className "container flex flex-col items-center rounded-3xl bg-muted p-12"
                        div
                            @ className "relative w-52"
                            div
                                @ className "absolute -top-40"
                                div
                                    @ className "relative"
                                    img
                                        @ src {getUserImgSrc(data.user.image?.id)}
                                        @ alt {userDisplayName}
                                        @ className "h-52 w-52 rounded-full object-cover"
                        < Spacer
                            @ size "sm"
                        div
                            @ className "flex flex-col items-center"
                            div
                                @ className "flex flex-wrap items-center justify-center gap-4"
                                h1
                                    @ className "text-center text-h2"
                                    + {userDisplayName}
                            p
                                @ className "mt-2 text-center text-muted-foreground"
                                + Joined
                                + {data.userJoinedDisplay}
                            {
                                iif isLoggedInUser
                                    then
                                        < Form
                                            @ action "/logout"
                                            @ method "POST"
                                            @ className "mt-3"
                                            < Button
                                                @ type "submit"
                                                @ variant "link"
                                                @ size "pill"
                                                < Icon
                                                    @ name "exit"
                                                    @ className "scale-125 max-md:scale-150"
                                                    + Logout
                                    else null
                            div
                                @ className "mt-10 flex gap-4"
                                {
                                    iif isLoggedInUser
                                        then
                                            <
                                                < Button
                                                    @ asChild
                                                    < Link
                                                        @ to "notes"
                                                        @ prefetch "intent"
                                                        + My notes
                                                < Button
                                                    @ asChild
                                                    < Link
                                                        @ to "/settings/profile"
                                                        @ prefetch "intent"
                                                        + Edit profile
                                        else
                                            < Button
                                                @ asChild
                                                < Link
                                                    @ to "notes"
                                                    @ prefetch "intent"
                                                    + {userDisplayName}
                                                    + 's notes
    export
        const meta
            :ref MetaFunction
                :param
                    :typeof loader
            =
                =>
                    {
                        @ data
                        @ params
                    const displayName = data?.user?.name ?? params.username
                    return
                        [
                            {
                                @ title
                                    template
                                        +
                                        @ displayName
                                        + &nbsp;| Epic Notes
                            {
                                @ name 'description'
                                @ content
                                    template
                                        + Profile of&nbsp;
                                        @ displayName
                                        + &nbsp;on Epic Notes
    export
        function ErrorBoundary
            return
                < GeneralErrorBoundary
                    @ statusHandlers
                        {
                            @ 404
                                =>
                                    {
                                        @ params
                                    p
                                        + No user with the username "
                                        + {params.username}
                                        + " exists