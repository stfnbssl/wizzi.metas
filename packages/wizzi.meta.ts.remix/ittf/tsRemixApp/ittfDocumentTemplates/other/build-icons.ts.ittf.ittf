$group

    ${'$'}include set-ctx-functions
    ${'$'}
        setCtxScript ('build:icons', 'tsx ./other/build-icons.ts');
        setCtxDevDep ('node-html-parser', '^6.1.13');
        setCtxDevDep ('fs-extra', '^11.2.0');
        setCtxDevDep ('@types/fs-extra', '^11.0.4');

    import
        as path
        from 'node:path'
    import
        @
        from 'execa'
    import fsExtra from 'fs-extra'
    import
        @ glob
        from 'glob'
    import
        @ parse
        from 'node-html-parser'
    const cwd = process.cwd()
    const inputDir = path.join(cwd, 'other', 'svg-icons')
    const inputDirRelative = path.relative(cwd, inputDir)
    const outputDir = path.join(cwd, 'app', 'components', 'ui', 'icons')
    await
        _ fsExtra.ensureDir(outputDir)
    const files
        _ glob.sync
            @ '**/*.svg'
            {
                @ cwd inputDir
            ._ sort
                =>
                    param a
                    param b
                    _ a.localeCompare(b)
    const shouldVerboseLog = process.argv.includes('--log=verbose')
    const logVerbose
        iif shouldVerboseLog
            then console.log
            else
                =>
    if files.length === 0
        _ console.log
            template
                + No SVG files found in&nbsp;
                @ inputDirRelative
                +
    else
        await
            _ generateIconFiles()
    async-function generateIconFiles
        const spriteFilepath = path.join(outputDir, 'sprite.svg')
        const typeOutputFilepath = path.join(outputDir, 'name.d.ts')
        const currentSprite
            await
                _ fsExtra.readFile(spriteFilepath, 'utf8').catch
                    =>
                        + ''
        const currentTypes
            await
                _ fsExtra.readFile(typeOutputFilepath, 'utf8').catch
                    =>
                        + ''
        const iconNames
            _ files.map
                =>
                    param file
                    _ iconName(file)
        const spriteUpToDate
            _ iconNames.every
                =>
                    param name
                    _ currentSprite.includes
                        template
                            + id=
                            @ name
                            +
        const typesUpToDate
            _ iconNames.every
                =>
                    param name
                    _ currentTypes.includes
                        template
                            + "
                            @ name
                            + "
        if spriteUpToDate && typesUpToDate
            _ logVerbose
                template
                    + Icons are up to date
            return
        _ logVerbose
            template
                + Generating sprite for&nbsp;
                @ inputDirRelative
                +
        const spriteChanged
            await
                _ generateSvgSprite
                    {
                        @ files
                        @ inputDir
                        @ outputPath spriteFilepath
        for
            left
                const file
            of files
            _ logVerbose('âœ…', file)
        _ logVerbose
            template
                + Saved to&nbsp;
                _ path.relative(cwd, spriteFilepath)
                +
        const stringifiedIconNames
            _ iconNames.map
                =>
                    param name
                    _ JSON.stringify(name)
        const typeOutputContent
            template
                + // This file is generated by npm run build:icons&lf;
                + &lf;
                + export type IconName =&lf;
                + \t|&nbsp;
                _ stringifiedIconNames.join('\n\t| ')
                + ;&lf;
                +
        const typesChanged
            await
                _ writeIfChanged(typeOutputFilepath, typeOutputContent)
        _ logVerbose
            template
                + Manifest saved to&nbsp;
                _ path.relative(cwd, typeOutputFilepath)
                +
        const readmeChanged
            await
                _ writeIfChanged
                    _ path.join(outputDir, 'README.md')
                    template
                        + # Icons&lf;
                        + &lf;
                        + This directory contains SVG icons that are used by the app.&lf;
                        + &lf;
                        + Everything in this directory is generated by \`npm run build:icons\`.&lf;
                        +
        if spriteChanged || typesChanged || readmeChanged
            _ console.log
                template
                    + Generated&nbsp;
                    @ files.length
                    + &nbsp;icons
    function iconName
        param file
            :string
        return file.replace(/\.svg$/, '')
    async-function generateSvgSprite
        {
            @ files
            @ inputDir
            @ outputPath
            :{
                :p files
                    :[
                        :string
                :p inputDir
                    :string
                :p outputPath
                    :string
        const symbols
            await
                _ Promise.all
                    _ files.map
                        async=>
                            param file
                            const input
                                await
                                    _ fsExtra.readFile(path.join(inputDir, file), 'utf8')
                            const root = parse(input)
                            const svg = root.querySelector('svg')
                            if !svg
                                throw new Error('No SVG element found')
                            set svg.tagName = 'symbol'
                            _ svg.setAttribute('id', iconName(file))
                            _ svg.removeAttribute('xmlns')
                            _ svg.removeAttribute('xmlns:xlink')
                            _ svg.removeAttribute('version')
                            _ svg.removeAttribute('width')
                            _ svg.removeAttribute('height')
                            return svg.toString().trim()
            # Each SVG becomes a symbol and we wrap them all in a single SVG
        const output
            [
                template
                    + <?xml version="1.0" encoding="UTF-8"?>
                template
                    + <!-- This file is generated by npm run build:icons -->
                template
                    + <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="0" height="0">
                template
                    + <defs>
                ... symbols
                    $if false $$ TODO
                        # for semantics: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/defs
                template
                    + </defs>
                template
                    + </svg>
                @ ''
                ._ join
                    @ '\n'
        return writeIfChanged(outputPath, output)
        #
            # *
            # Creates a single SVG file that contains all the icons
            #
    async-function writeIfChanged
        param filepath
            :string
        param newContent
            :string
        const currentContent
            await
                _ fsExtra.readFile(filepath, 'utf8').catch
                    =>
                        + ''
        if currentContent === newContent
            return false
        await
            _ fsExtra.writeFile(filepath, newContent, 'utf8')
        await
            _`
                + prettier --write&nbsp;
                @ filepath
                + &nbsp;--ignore-unknown
        return true