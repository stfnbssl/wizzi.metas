$group

    ${'$'}include set-ctx-functions
    ${'$'}
        setCtxDep ('set-cookie-parser', '^2.6.0');
        setCtxDevDep ('@types/set-cookie-parser', '^2.4.7');
        setCtxDevDep ('@playwright/test', '^1.42.1');

    import
        @ test
            as base
        from '@playwright/test'
    import
        :type User
            as UserModel
        from '@prisma/client'
    import
        as setCookieParser
        from 'set-cookie-parser'
    import
        @ getPasswordHash
        @ getSessionExpirationDate
        @ sessionKey
        from '#app/utils/auth.server.ts'
    import
        @ prisma
        from '#app/utils/db.server.ts'
    import
        @ authSessionStorage
        from '#app/utils/session.server.ts'
    import
        @ createUser
        from './db-utils.ts'
    export *
        from './db-utils.ts'
    :type GetOrInsertUserOptions
        :{
            :p id
                :optional
                :string
            :p username
                :optional
                :[]
                    :ref UserModel
                    :literal 'username'
            :p password
                :optional
                :string
            :p email
                :optional
                :[]
                    :ref UserModel
                    :literal 'email'
    :type User
        :{
            :p id
                :string
            :p email
                :string
            :p username
                :string
            :p name
                :union
                    :string
                    :null
    async-function getOrInsertUser
        {
            @ id
            @ username
            @ password
            @ email
            :ref GetOrInsertUserOptions
            =
        :return
            :ref Promise
                :param
                    :ref User
        const select
            {
                @ id true
                @ email true
                @ username true
                @ name true
        if id
            return
                await
                    _ prisma.user.findUniqueOrThrow
                        {
                            @ select
                            { where
                                @ id
        else
            const userData = createUser()
            set username ??= userData.username
            set password ??= userData.username
            set email ??= userData.email
            return
                await
                    _ prisma.user.create
                        {
                            @ select
                            { data
                                @ ...userData
                                @ email
                                @ username
                                { roles
                                    { connect
                                        @ name 'user'
                                { password
                                    { create
                                        @ hash
                                            await
                                                _ getPasswordHash(password)
    export
        const test
            _ base.extend
                :param
                    :{
                        :m insertNewUser
                            :ref Promise
                                :param
                                    :ref User
                            param options
                                :ref GetOrInsertUserOptions
                                :optional
                        :m login
                            :ref Promise
                                :param
                                    :ref User
                            param options
                                :ref GetOrInsertUserOptions
                                :optional
                {
                    @ insertNewUser
                        async=>
                            { {}
                            param use
                            let userId
                                :union
                                    :string
                                    :undefined
                                = undefined
                            await
                                _ use
                                    async=>
                                        param options
                                        const user
                                            await
                                                _ getOrInsertUser(options)
                                        set userId = user.id
                                        return user
                            await
                                _ prisma.user.delete
                                    {
                                        { where
                                            @ id userId
                                    ._ catch
                                        =>
                    @ login
                        async=>
                            {
                                @ page
                            param use
                            let userId
                                :union
                                    :string
                                    :undefined
                                = undefined
                            await
                                _ use
                                    async=>
                                        param options
                                        const user
                                            await
                                                _ getOrInsertUser(options)
                                        set userId = user.id
                                        const session
                                            await
                                                _ prisma.session.create
                                                    {
                                                        { data
                                                            @ expirationDate getSessionExpirationDate()
                                                            @ userId user.id
                                                        { select
                                                            @ id true
                                        const authSession
                                            await
                                                _ authSessionStorage.getSession()
                                        _ authSession.set(sessionKey, session.id)
                                        const cookieConfig
                                            @expr
                                                _ setCookieParser.parseString
                                                    await
                                                        _ authSessionStorage.commitSession(authSession)
                                                :as
                                                    :any
                                        await
                                            _ page.context().addCookies
                                                [
                                                    {
                                                        @ ...cookieConfig
                                                        @ domain 'localhost'
                                        return user
                            await
                                _ prisma.user.deleteMany
                                    {
                                        { where
                                            @ id userId
    export
        const
            {
                @ expect
            = test
    export
        async-function waitFor
            :< ReturnValue
            param cb
                :=>
                    :union
                        :ref ReturnValue
                        :ref Promise
                            :param
                                :ref ReturnValue
            {
                @ errorMessage
                @ timeout
                    = 5000
                :{
                    :p errorMessage
                        :optional
                        :string
                    :p timeout
                        :optional
                        :number
                =
            const endTime = Date.now() + timeout
            let lastError
                :unknown
                = new Error(errorMessage)
            while Date.now() < endTime
                try
                    const response
                        await
                            _ cb()
                    if response
                        return response
                catch e
                    set lastError = e
                await
                    new Promise
                        =>
                            param r
                            _ setTimeout(r, 100)
            throw lastError
        #
            # 
            # This allows you to wait for something (like an email to be available).
            #
            # It calls the callback every 50ms until it returns a value (and does not throw
            # an error). After the timeout, it will throw the last error that was thrown or
            # throw the error message provided as a fallback
            #