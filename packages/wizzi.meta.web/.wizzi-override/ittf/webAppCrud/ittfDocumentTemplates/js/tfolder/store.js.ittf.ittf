$group
    ${'$'}
      var myName = 'Store';
      //
    
    iife_window${'('} app, ${'$'}{myName})
        # globals api.Wizzi, mvc.LocalObjectStore
        function ${'$'}{myName}
            param name
            set this.name = name
            set this.wzApi = api.Wizzi
            set this.ls${metaCtx.webAppCrud.Name} = new mvc.LocalObjectStore('app-crud-${metaCtx.webAppCrud.Name}')
            set this.${metaCtx.webAppCrud.name}Items = null
            set this.tabelle = null
            set this.databaseName = "${metaCtx.webAppCrud.name}db"
            set this.tableName = "${metaCtx.webAppCrud.name}"
            set this.db = new db.LocalStorageDb(this.databaseName, localStorage)


        set ${'$'}{myName}.prototype.findTabelle
            function 
                param_callback${'('} required, Method: ${'$'}{myName}.findTabelle )
                if this.tabelle
                  return
                    _ callback
                      @ this.tabelle
                _ this.findAll${metaCtx.webAppCrud.Name}
                    =>
                        param ${metaCtx.webAppCrud.name}Items
                        const categories = {}
                        foreach item in ${metaCtx.webAppCrud.name}Items
                            set categories[item.categoria] = item.categoria
                        set this.tabelle
                            {
                                @ categories categories
                        _ callback
                            @ this.tabelle

        set ${'$'}{myName}.prototype.findAll${metaCtx.webAppCrud.Name}
            function 
                param_callback${'('} required, Method: ${'$'}{myName}.findAll${metaCtx.webAppCrud.Name} )
                info "${'$'}{myName}.prototype.findAll${metaCtx.webAppCrud.Name}, current items", this.${metaCtx.webAppCrud.name}Items
                if this.${metaCtx.webAppCrud.name}Items
                    return
                        _ callback
                            @ this.${metaCtx.webAppCrud.name}Items
                else
                    if this.db.tableExists(this.tableName)                
                        set this.${metaCtx.webAppCrud.name}Items
                            _ this.db.queryAll(this.tableName)
                        foreach item in this.${metaCtx.webAppCrud.name}Items
                            set item.id = item.ID
                        _ callback
                            @ this.${metaCtx.webAppCrud.name}Items
                    else
                        _ callback
                            [

                ${'$'}*
                _ fetch('/~/stfnbssl/works-biga.json').then
                    => 
                        param response
                        if !response.ok
                            throw new Error("HTTP error " + response.status)
                        return response.json()
                    ._ then
                        => 
                            param json
                            const items = []
                            foreach video in json.videos
                                foreach item in video.items
                                    _ items.push
                                        {
                                            @ id video.id + '/' + item.name
                                            @ categoria video.categoria
                                            @ kind  "video"
                                            @ videoKind video.kind
                                            @ videoId video.id
                                            @ author video.author
                                            @ videoAuthorId video.authorId
                                            @ title video.title || video.name
                                            @ name item.name
                                            @ time item.time
                            info "${metaCtx.webAppCrud.name}Items", items
                            set this.${metaCtx.webAppCrud.name}Items = items
                            _ callback
                              @ items
                    ._ catch
                        function 
                            set this.dataError = true
                *${'$'}

        set ${'$'}{myName}.prototype.find${metaCtx.webAppCrud.Name}Item
            function 
                param id
                param_callback${'('} required, Method: ${'$'}{myName}.find${metaCtx.webAppCrud.Name}Item )
                _ this.findAll${metaCtx.webAppCrud.Name}
                    =>
                        param items
                        foreach item in items
                            if item.id == id
                                return
                                    _ callback
                                        @ item
                        throw new Error('${'$'}{myName}.find${metaCtx.webAppCrud.Name}Item.err not found: ' + id)
        

        set ${'$'}{myName}.prototype.insert${metaCtx.webAppCrud.Name}Item
            function 
                param objItem
                param_callback${'('} required, Method: ${'$'}{myName}.find${metaCtx.webAppCrud.Name}Item )
                info "${'$'}{myName}.prototype.insert${metaCtx.webAppCrud.Name}Item, objItem", objItem
                if !this.db.tableExists(this.tableName)
                    _ this.db.createTable
                        @ this.tableName
                        [ 
                            $foreach field in metaCtx.webAppCrud.fields
                                @ "${field.name}"
                var result
                    _ this.db.insert
                        @ this.tableName
                        @ objItem
                _ this.db.commit()
                _ callback
                    @ result

        set ${'$'}{myName}.prototype.getLocalValue
            function 
                param name
                param defaultValue
                var lsStore = this.ls${metaCtx.webAppCrud.Name}
                return
                  _ lsStore.getValue
                    @ name
                    @ defaultValue

        set ${'$'}{myName}.prototype.setLocalValue
            function 
                param name
                param value
                var lsStore = this.ls${metaCtx.webAppCrud.Name}
                return
                  _ lsStore.setValue
                    @ name
                    @ value

        function compareTitolo
            param a
            param b
            const at = parseInt(a.titolo)
            const bt = parseInt(b.titolo)
            if at < bt
                return 1
            if at > bt
                return -1
            return 0
