$group
    ${'$'}
      var myName = 'Control';
      //
    
    iife_window${'('} mvc, ${'$'}{myName}, increment, Underscore)

      set ${'$'}{myName}.disposables = {}

      set ${'$'}{myName}.build
        function
            param __html
            param ctx
            param_array${'('} __html, required, Function mvc.${'$'}{myName}.build )
            param_object${'('} ctx, required, Function mvc.${'$'}{myName}.build )
            
            let options = []
            if ctx.type == 'group'
                var direction = ctx.direction || 'row'
                foreach item in ctx.controls
                    set item.__form = ctx.__form
                    var aOptions = []
                    _ ${'$'}{myName}.build
                        @ aOptions
                        @ item
                    _ options.push
                        _ aOptions.join('\n')
                div {{ options.join('\n') }}
                    class control-group grid-{{ direction }}-{{ ctx.controls.length }}

                return
            elif ctx.type == 'select'
                foreach item in ctx.options
                    var aOptions = []
                    _ select_option
                        @ aOptions
                        @ item
                    _ options.push
                        _ aOptions.join('')
            elif ctx.type == 'radio'
                foreach item in ctx.options
                    var aOptions = []
                    _ radio_option
                        @ aOptions
                        @ ctx
                        @ item
                    _ options.push
                        _ aOptions.join('')
            
            div
                class single-control row row-space
                label {{ ctx.label }}
                    @ for {{ ctx.id }}
                    class control-label {{ (ctx.required ? 'required' : '') }} 
                div
                    class input-group
                    if ctx.type == 'static'
                        div
                            class form-control-static
                            id {{ ctx.__form.id + '-' +  ctx.id }}
                    elif ctx.type == 'text'
                        input
                            class input--style-2
                            type text
                            placeholder {{ ctx.label }}
                            name {{ ctx.id }}
                    elif ctx.type == 'select'
                        div
                            class rs-select2 js-select-simple select--no-search
                            select {{ options.join('\n') }}
                                name {{ ctx.id }}
                            ${'$'}*
                            div
                                id {{ ctx.id }}-dropdown
                                class select-dropdown
                            *${'$'}
                    elif ctx.type == 'date'
                        ${'$'}*
                        input
                            class input--style-2 js-datepicker
                            type text
                            placeholder {{ ctx.label }}
                            name {{ ctx.id }}
                        i
                            class zmdi zmdi-calendar-note input-icon js-btn-calendar
                        *${'$'}
                        div
                            class form-container
                            div
                                class form
                                i 
                                    class far fa-calendar-alt
                                input 
                                    type text
                                    placeholder Pick a date
                                    class date-input
                                    name {{ ctx.id }}

                    elif ctx.type == 'checkbox'
                        div
                            class checkbox-item
                            input
                                class input--style-2
                                type checkbox
                                placeholder {{ ctx.label }}
                                name {{ ctx.id }}
                    elif ctx.type == 'radio'
                        div {{ options.join('\n') }}
                            class radio-group
                    elif ctx.type == 'slider'
                        div
                            class slider-group ui-slider ui-slider-horizontal
                            div
                                class slider-item
                                id {{ ctx.id }}
                            span
                                class donate-value
                                id value-lower
                    elif ctx.type == 'range-slider'
                        div
                            class slider
                            id {{ ctx.id }}
                            @ se-min {{ (ctx.min || 0) }}
                            @ se-step {{ (ctx.step || 1) }}
                            @ se-min-value {{ (ctx.minValue || 50) }}
                            @ se-max-value {{ (ctx.maxValue || 50) }}
                            @ se-max {{ (ctx.max || 100) }}
                            div
                              class slider-touch-left
                              span 
                            div
                              class slider-touch-right
                              span 
                            div
                              class slider-line
                              span 
                    elif ctx.type == 'code'
                        div
                            id {{ ctx.id }}
                    elif ctx.type == 'ittf-editor'
                        div
                            id {{ ctx.id }}
                            @ style height:{{ (ctx.height || '400') }}px;width:100%;

                          ${'$'}*
                          @ style display:flex;flex:1;flex-direction:column;height:{{ (ctx.height || '400px') }};width:100%;
                          div $$ ResizeDetector
                              @ style display:flex;flex:1;flex-direction:column;min-width:0;min-height:0;position:relative
                              iframe
                                  id {{ ctx.id }}-horizontal
                                  @ style display:block;position:absolute;left:0;top:0;pointer-events:none;opacity:0;width:100%;height:1px;
                              iframe
                                  id {{ ctx.id }}-vertical
                                  @ style display:block;position:absolute;left:0;top:0;pointer-events:none;opacity:0;height:100%;width:1px;
                              div $$ MonacoEditor
                                  id {{ ctx.id }}
                                  @ style height:100%;width:100%;
                          *${'$'}
                label &nbsp;
                    @ id {{ ctx.id }}-error
                    @ for {{ ctx.id }}
                    class control-error

        function select_option
            param __html
            param ctx
            _ __html.push('<option')
            _ __html.push(' value="' + ctx.value + '"')
            if ctx.selected
                _ __html.push(' selected="selected"')
            _ __html.push('>')
            _ __html.push(ctx.label)
            _ __html.push('</option>')   

        function radio_option
            param __html
            param radio
            param ctx
            div
                class radio-item
                input 
                    type radio
                    name {{ radio.id }}
                    id {{ ctx.id }}
                    value {{ ctx.value }}
                    checked 
                label {{ ctx.label }}
                    @ for {{ ctx.id }}
                span 
                    class check

      set ${'$'}{myName}.start
          function
              param $
              param item
              param context
              param_object${'('} item, required, Function mvc.${'$'}{myName}.start )
              param_object${'('} context, required, Function mvc.${'$'}{myName}.start )

              if item.type == 'group'
                  foreach child in item.controls
                      set child.__form = item.__form
                      _ ${'$'}{myName}.start
                          @ $
                          @ child
                          @ context
                  return
              elif item.type == 'static'
                  try 
                      var el = $('#' + item.__form.id + '-' + item.id)
                      set el.innerHTML = context.originalValues[item.id]
                  catch err
                      error err
              elif item.type == 'text'
                  try 
                      var el = $('input[name="' + item.id + '"]')
                      if typeof context.originalValues[item.id] != "undefined"
                        set el.value = context.originalValues[item.id]
                      if context.onChange
                          _ $on
                              @ el
                              @ 'change'
                              =>
                                  param event
                                  $$ loog "value changed", el
                                  _  context.onChange
                                      @ item.id
                                      @ el.value
                  catch err
                      error err
              elif item.type == 'select'
                  try 
                      var selectBox = $('select[name="' + item.id + '"]')
                      if item.isSearcheable
                          _ controls.NiceSelect.bind(selectBox, {searchable: true})
                      else
                          _ controls.NiceSelect.bind(selectBox)
                      var el = $('select[name="' + item.id + '"]')
                      if typeof context.originalValues[item.id] != "undefined"
                        set el.value = context.originalValues[item.id]
                      if context.onChange
                          _ $on
                              @ el
                              @ 'change'
                              =>
                                  param event
                                  $$ loog "value changed", el
                                  _  context.onChange
                                      @ item.id
                                      @ el.value
                  catch err
                      error err
              elif item.type == 'checkbox'
                  try 
                      var el = $('input[name="' + item.id + '"]')
                      if typeof context.originalValues[item.id] != "undefined"
                        set el.checked = context.originalValues[item.id]
                      if context.onChange
                          _ $on
                              @ el
                              @ 'change'
                              =>
                                  param event
                                  _  context.onChange
                                      @ item.id
                                      @ el.checked
                  catch err
                    error err
              elif item.type == 'radio'
                  try 
                      # original value set in build
                      var els
                        _ document.querySelectorAll
                          @ 'input[type=radio][name="' + item.id + '"]'
                      _ els.forEach
                        =>
                          param el
                          if context.onChange
                            _ $on
                                @ el
                                @ 'change'
                                =>
                                    param event
                                    _  context.onChange
                                        @ item.id
                                        @ el.value
                  catch err
                      error err
              elif item.type == 'date'
                  try 
                      var el = $('input[name="' + item.id + '"]')
                      if typeof context.originalValues[item.id] != "undefined"
                        set el.value = context.originalValues[item.id]
                      if context.onChange
                        ${'$'}*
                        _ $('input[name="' + item.id + '"]').daterangepicker
                            { 
                                @ "singleDatePicker" true
                                @ "showDropdowns" true
                                @ "autoUpdateInput" true
                                @ "autoApply" true
                                { locale
                                    @ format 'DD/MM/YYYY'
                        _ $('input[name="' + item.id + '"]').on
                            @ 'apply.daterangepicker'
                            function 
                                param ev
                                param picker
                                _ $(this).val(picker.startDate.format('DD/MM/YYYY'))
                        $$ loog 'datepicker', item.id, 'activated'
                        *${'$'}
                        _ $on
                            @ el
                            @ 'change'
                            =>
                                param event
                                _  context.onChange
                                    @ item.id
                                    @ el.value
                        var dateControl
                            new controls.CodepenDatePicker(".date-input")
                  catch err
                      error err

              elif item.type == 'slider'
                  try 
                      _ noUiSlider.create
                          @ $('#' + item.id)[0]
                          { 
                              [ start
                                  @ item.start
                              @ step item.step
                              [ connect
                                  @ true
                                  @ false
                              [ tooltips
                                  @ true
                              { range
                                  @ 'min' item.range.min
                                  @ 'max' item.range.max
                              @ format
                                  _ wNumb
                                      { 
                                          @ decimals 0
                                          @ thousand ','
                                          @ prefix '$ '
                  catch err
                      error err

              elif item.type == 'range-slider'
                  # original value set in build
                  if context.onChange
                      try 
                          var newRangeSlider = new controls.RangeSlider(item.id)
                          set newRangeSlider.onChange =
                              function 
                                  param min
                                  param max
                                  _  context.onChange
                                          @ item.id
                                          @ min + ';' + max
                          set newRangeSlider.didChanged
                              function 
                                  param min
                                  param max
                                  _  context.onChange
                                          @ item.id
                                          @ min + ';' + max
                      catch err
                          error err
                  # call reset if needed
                  # newRangeSlider.reset();
              elif item.type == 'code'
                  try 
                      var editor
                          _ CodeMirror
                              @ $('#' + item.id)[0]
                              { 
                                  @ mode "text/html"
                                  @ theme "dracula"
                                  @ lineWrapping false
                                  @ lineNumbers true
                                  @ styleActiveLine true
                                  @ matchBrackets true
                                  @ viewportMargin Infinity
                                  { extraKeys
                                      @ "Ctrl-Space" "autocomplete"
                                  @ value "<!doctype html>\n<html>\n  " + $('#' + item.id)[0].innerHTML + "\n</html>"
                  catch err
                      error err
              elif item.type == 'ittf-editor'
                  try 
                      _ editors.MonacoEditor.setup
                          function
                              var monacoEditor = new editors.MonacoEditor()
                              _ monacoEditor.setProps
                                  {
                                      @ container item.id
                                      { files
                                        { ['file.ittf']
                                          @ type 'CODE'
                                          @ contents context.originalValues[item.id] || ''
                                      @ selectedFileName 'file.ittf'
                                      @ autoFocus true
                                      @ automaticLayout true
                                      @ updateFiles
                                        =>
                                            param data
                                            if context.onChange
                                              $$ loog 'monacoEditor.updateFiles.data', data()
                                              _ context.onChange
                                                  @ item.id
                                                  @ data()['file.ittf'].contents
                                      @ readOnly false
                              set ${'$'}{myName}.disposables[item.id]
                                [
                                  @ monacoEditor
                              _ monacoEditor.render
                  catch err
                      error err

      set ${'$'}{myName}.start_validation
          function
              param $
              param item
              param rules
              param_object${'('} item, required, Function mvc.${'$'}{myName}.start_validation )
              param_object${'('} rules, required, Function mvc.${'$'}{myName}.start_validation )

              if item.type == 'group'
                  foreach child in item.controls
                      _ ${'$'}{myName}.start_validation
                          @ $
                          @ child
                          @ rules
                  return
              
              var errorEl = item.required || item.validate ? 
                  \b $('#' + item.id + '-error') : null
              if item.required
                  set rules[item.id] = rules[item.id] || []
                  _ rules[item.id].push
                    {
                      @ kind "required"
                      @ $error errorEl
              if item.validate
                  set rules[item.id] = rules[item.id] || []
                  _ rules[item.id].push
                    {
                      @ kind "function"
                      @ validate item.validate
                      @ $error errorEl

      set ${'$'}{myName}.validate
          function
              param item
              param formRules
              param context
              param invalids
              if item.type == 'group'
                  foreach child in item.controls
                      _ ${'$'}{myName}.validate
                          @ child
                          @ formRules
                          @ context
                          @ invalids
                  return
              var rules = formRules[item.id]
              $$ loog item.id, 'rules', rules
              if rules && rules.length > 0
                const value = context.currentValues[item.id]
                foreach rule in rules
                  if rule.kind == 'required'
                    if typeof value == 'undefined' || value == 'null' || value.length == 0
                      _ invalids.push
                        @ item
                      set rule.$error.innerHTML = 'Please enter the ' + item.label + ' value.'
                  else
                    set rule.$error.innerHTML = '&nbsp;'

      set ${'$'}{myName}.dispose
        function
            param $
            param item
            const dispArray = ${'$'}{myName}.disposables[item.id]
            if dispArray
              foreach disp in dispArray
                  _ disp.dispose








