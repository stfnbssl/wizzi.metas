$group
    ${'$'}
      var myName = 'LocalCollectionStore';
      //
    
    iife_window${'('} mvc, ${'$'}{myName})
        function ${'$'}{myName}
            param name
            param_callback${'('})
            set this._dbName = name
            if !localStorage.getItem(name)
                var items = []
                _ localStorage.setItem(name, JSON.stringify(items))
            _ callback.call(this, JSON.parse(localStorage.getItem(name)))
            #
                # 
                # Creates a new client side local storage object and will create an empty
                # collection if no collection already exists.
                # 
                # @param {string} name The name of our DB we want to use
                # @param {function} callback Our local storage DB uses callbacks
                # 
        set ${'$'}{myName}.prototype.find =
            function 
                param query
                param_callback${'('} required, Method: ${'$'}{myName}.find )
                var items = JSON.parse(localStorage.getItem(this._dbName) || '[]')
                _ callback.call
                    @ this
                    _ items.filter
                        function 
                            param item
                            for var q in query
                                if query[q] !== item[q]
                                    return false
                            return true
            #
                # 
                # Finds items based on a query given as a JS object
                # 
                # @param {object} query The query to match against (i.e. {foo: 'bar'})
                # @param {function} callback	 The callback to fire when the query has
                # completed running
                # 
                # @example
                # db.find({foo: 'bar', hello: 'world'}, function (data) {
                #  // data will return any items that have foo: bar and
                #  // hello: world in their properties
                # });
                # 
        set ${'$'}{myName}.prototype.findAll =
            function 
                param_callback${'('} required, Method: ${'$'}{myName}.findAll )
                _ callback.call(this, JSON.parse(localStorage.getItem(this._dbName) || '[]'))
            #
                # 
                # Will retrieve all data from the collection
                # 
                # @param {function} callback The callback to fire upon retrieving data
                # 
        set ${'$'}{myName}.prototype.save =
            function 
                param updateData
                param id
                param_callback${'('})
                var items = JSON.parse(localStorage.getItem(this._dbName) || '[]')
                if id
                    $$ loog '${'$'}{myName}.prototype.save', id
                    var matched = false
                    for var i = 0; i < items.length; i++
                        if items[i].id === id
                            set matched = true
                            $$ loog '${'$'}{myName}.prototype.save', 'matched', id
                            for var key in updateData
                                set items[i][key] = updateData[key]
                            break 
                    if !matched
                      set updateData.id = id
                          # Generate an ID
                      _ items.push(updateData)
                    _ localStorage.setItem(this._dbName, JSON.stringify(items))
                    _ callback.call(this, items)
                    # If an ID was actually given, find the item and update each property
                else
                    set updateData.id = new Date().getTime()
                        # Generate an ID
                    _ items.push(updateData)
                    _ localStorage.setItem(this._dbName, JSON.stringify(items))
                    _ callback.call
                        @ this
                        [ 
                            @ updateData
            #
                # 
                # Will save the given data to the DB. If no item exists it will create a new
                # item, otherwise it'll simply update an existing item's properties
                # 
                # @param {object} updateData The data to save back into the DB
                # @param {function} callback The callback to fire after saving
                # @param {number} id An optional param to enter an ID of an item to update
                # 
        set ${'$'}{myName}.prototype.remove =
            function 
                param id
                param_callback${'('})
                var items = JSON.parse(localStorage.getItem(this._dbName) || '[]')
                for var i = 0; i < items.length; i++
                    if items[i].id == id
                        _ items.splice(i, 1)
                        break 
                _ localStorage.setItem(this._dbName, JSON.stringify(items))
                _ callback.call(this, items)
            #
                # 
                # Will remove an item from the ${'$'}{myName} based on its ID
                # 
                # @param {number} id The ID of the item you want to remove
                # @param {function} callback The callback to fire after saving
                # 
        set ${'$'}{myName}.prototype.drop =
            function 
                param_callback${'('})
                var items = []
                _ localStorage.setItem(this._dbName, JSON.stringify(items))
                _ callback.call(this, items)
            #
                # 
                # Will drop all storage and start fresh
                # 
                # @param {function} callback The callback to fire after dropping the data
                # 
        set ${'$'}{myName}.prototype.replace
            function 
                param items
                param_callback${'('})
                _ localStorage.setItem(this._dbName, JSON.stringify(items))
                _ callback.call(this, items)
            #
                # 
                # Will replace the entire items collection
                # 
                # @param {array} [items] new items collection
                # @param {function} callback The callback to fire after replacing the data
                #                 