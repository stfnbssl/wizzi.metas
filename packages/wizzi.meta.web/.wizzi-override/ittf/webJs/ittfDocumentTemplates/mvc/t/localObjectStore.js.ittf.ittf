$group
    ${'$'}
      var myName = 'LocalObjectStore';
      //
    
    iife_window${'('} mvc, ${'$'}{myName})
        function ${'$'}{myName}
            param name
            param_callback${'('})
            set this._dbName = name
            set this.itemColl = new mvc.LocalCollectionStore(name + '_objColl')
            if !localStorage.getItem(name)
                var itemObj = {}
                _ localStorage.setItem(name, JSON.stringify(itemObj))
            _ callback.call(this, JSON.parse(localStorage.getItem(name)))
            #
                # 
                # Creates a new client side local storage object plus collection 
                # and will create an empty object and collection if no one already exist.
                # 
                # @param {string} name The name of our DB we want to use
                # @param {function} callback Our local storage DB uses callbacks
                # 
        set ${'$'}{myName}.prototype.setValue =
            function 
                param name
                param value
                var itemObj = JSON.parse(localStorage.getItem(this._dbName) || '{}')
                set itemObj[name] = value
                _ localStorage.setItem(this._dbName, JSON.stringify(itemObj))
                return itemObj
            #
                # 
                # Set an object property value
                # 
                # @param {string} name The property name
                # @param {string} value The property value
                # @return {object} Returns the entire saved object
                # 
        set ${'$'}{myName}.prototype.getValue =
            function 
                param name
                param defaultValue
                var itemObj = JSON.parse(localStorage.getItem(this._dbName) || '{}')
                $$ loog '${'$'}{myName}.getValue', name, defaultValue, name in itemObj, itemObj
                if name in itemObj
                  $$ loog '${'$'}{myName}.getValue.return', itemObj[name]
                  return itemObj[name]
                elif typeof(defaultValue) != 'undefined'
                  $$ loog '${'$'}{myName}.getValue.return', defaultValue
                  return defaultValue
                else
                  $$ loog '${'$'}{myName}.getValue.return', null
                  return null
            #
                # 
                # Get an object property value
                # 
                # @param {string} [name] The property name
                # @param {string} [defaultValue] Optional. 
                # -               The value to set if the value of name is missing
                # @return {any} The property value or defaultValue or null
                # 
        set ${'$'}{myName}.prototype.find =
            function 
                param query
                param_callback${'('} required, Method: ${'$'}{myName}.find )
                _ this.itemColl.find
                  @ query
                  @ callback
            #
                # 
                # Finds object items based on a query given as a JS object
                # 
                # @param {object} query The query to match against (i.e. {foo: 'bar'})
                # @param {function} callback	 The callback to fire when the query has
                # completed running
                # 
                # @example
                # db.find({foo: 'bar', hello: 'world'}, function (data) {
                #  // data will return any items that have foo: bar and
                #  // hello: world in their properties
                # });
                # 
        set ${'$'}{myName}.prototype.findAll =
            function 
                param_callback${'('} required, Method: ${'$'}{myName}.findAll )
                _ this.itemColl.findAll
                  @ callback
            #
                # 
                # Will retrieve all data from the object items collection
                # 
                # @param {function} callback The callback to fire upon retrieving data
                # 
        set ${'$'}{myName}.prototype.save =
            function 
                param updateData
                param id
                param_callback${'('})
                $$ loog '${'$'}{myName}.prototype.save', id, updateData
                _ this.itemColl.save
                  @ updateData
                  @ id
                  @ callback
            #
                # 
                # Will save the given data to the object items. If no item exists it will create a new
                # item, otherwise it'll simply update an existing item's properties
                # 
                # @param {object} updateData The data to save back into the DB
                # @param {function} callback The callback to fire after saving
                # @param {number} id An optional param to enter an ID of an item to update
                # 
        set ${'$'}{myName}.prototype.remove =
            function 
                param id
                param_callback${'('})
                _ this.itemColl.drop
                  @ id
                  @ callback
            #
                # 
                # Will remove an item from the object items
                # 
                # @param {number} id The ID of the item you want to remove
                # @param {function} callback The callback to fire after saving
                # 
        set ${'$'}{myName}.prototype.drop =
            function 
                param_callback${'('})
                _ this.itemColl.drop
                  @ callback
            #
                # 
                # Will drop all object items
                # 
                # @param {function} callback The callback to fire after dropping the data
                # 
        set ${'$'}{myName}.prototype.replace =
            function 
                param_callback${'('})
                _ this.itemColl.replace
                  @ callback
            #
                # 
                # Will replace the entire items collection
                # 
                # @param {array} [items] new items collection
                # @param {function} callback The callback to fire after replacing the data
                #                 