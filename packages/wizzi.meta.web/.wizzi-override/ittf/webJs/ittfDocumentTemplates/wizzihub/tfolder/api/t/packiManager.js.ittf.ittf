$group
    $
        var myName = 'Wizzi';
        //

    iife_window( api, ${myName}, increment )

      class PackiManager
        ctor
          param packiFiles
          set this.packiFiles = packiFiles || {}
          set this.dmp = new diff_match_patch()
        
        m getFileContent
          param filePath
          const file = this.packiFiles[filePath] 
          return file ? file.contents : null

        m putFile
          param filePath
          param type
          param contents
          set this.packiFiles[filePath] 
            {
              @ type type
              @ contents contents

        m putCodeFile
          param filePath
          param contents
          _ this.putFile
            @ filePath
            @ 'CODE'
            @ contents
        
        m deleteFile
          param filePath
          delete this.packiFiles[filePath]

        m getFileDiffs
          param filePath
          param newContent
          const diffs
            _ this._diffLineMode
              @ this.packiFiles[filePath].contents
              @ newContent
          return diffs

        m applyFileDiffs
          param filePath
          param diffs
          const textToPatch = this.packiFiles[filePath].contents
          const patches
            _ this.dmp.patch_make
              @ textToPatch
              @ diffs
          const [patchedText, results]
            _ this.dmp.patch_apply(patches, textToPatch)
          set this.packiFiles[filePath].contents = patchedText

        m getPackiFilesDiffs
          param packiFiles
          const matches = {}
          foreach key in Object.keys(packiFiles)
            if this.packiFiles[key]
              set matches[key]
                {
                  @ d 0
                  @ diffs
                    _ this._diffLineMode
                      @ this.packiFiles[key].contents
                      @ packiFiles[key].contents
            else
              set matches[key]
                {
                  @ d 1
                  @ type packiFiles[key].type
                  @ contents packiFiles[key].contents
          foreach key in Object.keys(this.packiFiles)
            if !packiFiles[key]
              set matches[key]
                {
                  @ d -1
          return matches

        m applyPatch
          param packiDiffs
          const patchedFiles = {}
          foreach key in Object.keys(packiDiffs)
            if packiDiffs[key].d == 1
              set patchedFiles[key]
                {
                  @ type packiDiffs[key].type
                  @ contents packiDiffs[key].contents
            elif packiDiffs[key].d == 0
              const textToPatch = this.packiFiles[key].contents
              const patches 
                _ this.dmp.patch_make
                  @ textToPatch
                  @ packiDiffs[key].diffs
              $$ loog 'applyPatch.key.patches', key, patches
              const [patchedText, results]
                _ this.dmp.patch_apply(patches, textToPatch)
              set patchedFiles[key]
                {
                  @ type this.packiFiles[key].type
                  @ contents patchedText
          set this.packiFiles = patchedFiles

        m equals
          param packiFiles
          const matches = {}
          foreach key in Object.keys(packiFiles)
            if this.packiFiles[key]
              if this.packiFiles[key].type != packiFiles[key].type
                return false
              if this.packiFiles[key].contents != packiFiles[key].contents
                return false
              set matches[key]
                {
            else
              return false
          foreach key in Object.keys(this.packiFiles)
            if !packiFiles[key]
              return false
          return true

        m _diffLineMode
          param text1
          param text2
          var a = this.dmp.diff_linesToChars_(text1, text2)
          var lineText1 = a.chars1
          var lineText2 = a.chars2
          var lineArray = a.lineArray
          var diffs = this.dmp.diff_main(lineText1, lineText2, false)
          _ this.dmp.diff_charsToLines_(diffs, lineArray)
          return diffs    
      
      set ${myName}.PackiManager = PackiManager


