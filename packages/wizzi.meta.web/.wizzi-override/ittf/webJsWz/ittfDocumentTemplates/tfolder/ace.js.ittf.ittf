$group

	var AceEditor_mimemap
		{
			@ js 'javascript'

	var AceEditor_defaults
		{
			@ key 'ace'
			@ editorElementId 'aceEditor'
			@ mode 'text'
			@ theme 'monokai'
			@ fontSize '11pt'
			
	class AceEditor
		ctor
			param options
			#
				# params
				# { options
				#   string editorElementId
				#   string mode
				#   string theme
				#   number width
				#   number height
			set this.options
				_ Object.assign
					@ AceEditor_defaults
					@ options
			set this.elementId = this.options.editorElementId
			set this.key = this.options.key
			set this.editor = null
			set this.events = {}

		m getValue
			if this.editor
				return this.editor.getValue()

		m setValue
			param value
			if !this.editor
				_ this.initialize()
			_ this.editor.setValue(value, 1)
			
		m setMime
			param value
			_ this.setMode
				@ AceEditor_mimemap[value] || value

		m setMode
			param value
			if this.editor
				_ this.editor.getSession().setMode
					@ "ace/mode/" + value

		m setTheme
			param value
			if this.editor
				_ this.editor.setTheme
					@ "ace/theme/" + value

		m readOnly
			param value
			if typeof value === 'undefined'
				return 
					_ this.editor.getReadOnly()
			else
				_ this.editor.setReadOnly(value)

		m onChange
			param handler
			set this.onChange = handler

		m initialize
			if this.editor
				return
			# loog 'AceEditor.initialize start on', this.options.editorElementId
			if typeof ace === 'undefined' || !ace.edit
				throw new Error('wz.ace initialize methods requires the `ace` component. Check that the ace script has been included.')
			set this.element = wz.element('#' + this.options.editorElementId)
			if !this.element
				throw new Error('wz.ace initialize methods requires an existing `options.editorElementId` : ' + this.options.editorElementId + ' html element.')
			_ wz.style(this.element, 'width', this.options.width)
			_ wz.style(this.element, 'height', this.options.height)
			
			set this.editor
				_ ace.edit
					@ this.options.editorElementId
			
			_ this.editor.setOptions
				{
					@ fontSize this.options.fontSize
			
			_ this.setMode
				@ this.options.mode
			
			_ this.setTheme
				@ this.options.theme
			
			var that = this
			_ this.editor.getSession().on
				@ 'change'
				function
					_ that.fire
						@ 'change'
						[
							_ that.getValue
			
			# loog 'AceEditor.initialize end'

		m on
			param name
			param handler
			if this.events.hasOwnProperty(name)
				_ this.events[name].push(handler)
			else
				set this.events[name] =	[handler]

		m off
			param name
			param handler
			if !this.events.hasOwnProperty(name)
				return 
			var index = this.events[name].indexOf(handler)
			if index != -1
				_ this.events[name].splice(index, 1)
		
		m fire
			param name
			param args
			if !this.events.hasOwnProperty(name)
				return 
			if !args || !args.length
				set args = []
			foreach ev in this.events[name]
				_ ev.apply(null, args)

