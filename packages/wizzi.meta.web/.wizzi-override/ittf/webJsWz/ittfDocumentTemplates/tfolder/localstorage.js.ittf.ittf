$group
    class LocalStorage

        ctor
            param keyprefix
            set this.keyprefix = keyprefix

        m k
            param key
            return this.keyprefix + '.' + key

        m getAllKeys
            var ret = []
            var lskeys = Object.keys(localStorage)
            foreach key in lskeys
                if key.startsWith(this.keyprefix + '.')
                    _ ret.push(key.substring((this.keyprefix + '.').length))
            return ret

        m get
            param key
            param defaultValue
            param setDefault
            set key = this.k(key)
            var ret = localStorage.getItem(key)
            if ret === null
                if typeof defaultValue !== 'undefined'
                    set ret = defaultValue
                    if setDefault
                        set localStorage[key] = defaultValue
            try
                set ret = JSON.parse(ret)
                return ret;
            catch ex
            return ret

        m set
            param key
            param value
            set key = this.k(key)
            set value = typeof value === 'undefined' ? null : value
            if value === null
                set localStorage[key] = value
            else
                set localStorage[key] = JSON.stringify(value)
            return value

        m append
            param key
            param value
            set key = this.k(key)
            var s = this.get(key, '', true);
            _ this.set(key, s + value)

        m replace
            param key
            param search
            param replace
            set key = this.k(key)
            var value = this.get(key)
            if typeof value === 'string'
                _ this.set(key, value.replace(search, replace))

        m remove
            param key
            set key = this.k(key)
            _ localStorage.removeItem(key)

        m isTrue
            param key
            param value
            set key = this.k(key)
            if typeof value === 'undefined'
                return this.get(key) === 'true'
            else
                _ this.set(key, value ? 'true' : 'false')

        m float
            param key
            param value
            set key = this.k(key)
            if typeof value === 'undefined'
                return parseFloat(this.get(key))
            else
                _ this.set(key, value)

        m increment
            param key
            set key = this.k(key)
            set value = this.get(key, "0", true);
            set value = parseFloat(value) + 1
            _ this.set(key, value)

        m unique
            param collectionName
            param propertyName
            param baseValue
            var items = this.get(collectionName)
            var item = this._find(items, propertyName, baseValue)
            if item === null
                return baseValue
            else
                var n = 1
                while item !== null
                    set n++
                    set item = this._find(items, propertyName, baseValue + n)
                return baseValue + n

        m _find
            param collection
            param propertyName
            param value
            foreach item in collection
                if item[propertyName] === value
                    return item
            return null;

