$group

	#
		# dependencies
		# . js/wz/standalone.js.ittf
		#   - wz.fs.infoByPath
		# params
		# { ctx
		#   { fsAdapter (BrowserFilesystem, ...)
	class TreeFileSystem
		ctor
			param ctx
			set this.fsAdapter = ctx.fsAdapter
			# the fs item
			set this.copyCutItem = null
			# the TreeNode containing the copy/cut fs item
			set this.copyCutContext = null
			# oneOf( 'copy', 'cut' )
			set this.copyCutOper = null

		m getChildName
			param item
			param name
			var c = 0
			var result, ok = false
			while ok == false
				set result = name + (c == 0 ? '' : c)
				set ok = true
				foreach child in item.children
					if child.name === result
						set ok = false
				set c++
			return result

		m getFolderRoot
			param callback
			_ this.fsAdapter.getFolderItem
				@ callback

		m populateFolderItem
			param parentItem
			param callback
			_ this.fsAdapter.getFolderItem
				@ parentItem
				@ callback

		m createFolder
			param parentItem
			param callback
			var newName
				_ this.getChildName
					@ parentItem
					@ 'new folder'
			var newPath = parentItem.path + '/' + newName
			_ this.fsAdapter.createFolder
				@ newPath
				a_cb_throw${'('} result )
					var newItem
						_ wz.fs.infoByPath
							@ newPath
							@ true
					set newItem.name = newItem.basename
					set newItem.children = []
					_ callback
						@ null
						@ newItem

		m deleteFolder
			param item
			param callback
			_ this.fsAdapter.deleteFolder
				@ item.path
				@ callback

		m createFile
			param parentItem
			param callback
			var newName
				_ this.getChildName
					@ parentItem
					@ 'new file'
			var newPath = parentItem.path + '/' + newName
			var newContent = '...'
			_ this.fsAdapter.writeFile
				@ newPath
				@ newContent
				a_cb_throw${'('} result )
					var newItem
						_ wz.fs.infoByPath
							@ newPath
							@ false
					set newItem.name = newItem.basename
					set newItem.children = []
					_ callback
						@ null
						@ newItem

		m updateFile
			param item
			param content
			param callback
			_ this.fsAdapter.writeFile
				@ item.path
				@ content
				@ callback

		m deleteFile
			param item
			param callback
			_ this.fsAdapter.deleteFile
				@ item.path
				@ callback

		m rename
			param item
			param newName
			param callback
			# loog 'treeFileSystem.rename', item, newName
			if item.isFolder
				_ this.fsAdapter.renameFolder
					@ item.path
					@ item.dirname + '/' + newName
					@ callback
			else
				_ this.fsAdapter.renameFile
					@ item.path
					@ item.dirname + '/' + newName
					@ callback

		m copyCutStart
			param item
			param context
			param oper
			#
				# params
				# { item
					# is a TreeNode.item
				# { context
					# is a TreeNode
				# { item
					# oneOf( 'copy', 'cut' )
			set this.copyCutItem = item
			set this.copyCutContext = context
			set this.copyCutOper = oper

		m copyCutClear
			set this.copyCutItem = null
			set this.copyCutContext = null
			set this.copyCutOper = null

		m pasteTo
			param item
			param callback
			
			# loog 'TreeFileSystem.pasteTo', item, 'from', this.copyCutItem
			
			var action
			if this.copyCutOper === 'copy'
				if this.copyCutItem.isFolder
					set action = 'copyFolder'
				else
					set action = 'copyFile'
			else
				if this.copyCutItem.isFolder
					set action = 'moveFolder'
				else
					set action = 'moveFile'

			_ this.fsAdapter[action]
				@ this.copyCutItem.path
				@ item.path + '/' + this.copyCutItem.basename
				a_cb${'('} result )
					_ callback
						@ null
						{
							@ item this.copyCutItem
							@ context this.copyCutContext
							@ oper this.copyCutOper
							@ action action
					_ this.copyCutClear

		m folderContextmenuItems
			param item
			var canPaste = this.copyCutItem && item !== this.copyCutItem
			var items
				[
					{
						@ label 'create folder'
					{
						@ label 'create file'
					{
						@ label 'clone repo'
					{
						@ label 'checkout repo'
			if canPaste
				_ items.push
					{
						@ label 'paste'
			set items
				_ items.concat
					[
						{
							@ label 'copy'
						{
							@ label 'cut'
						{
							@ label 'rename'
						{
							@ label 'delete'
			return items

		m fileContextmenuItems
			param item
			var canPaste = this.copyCutItem && item !== this.copyCutItem
			var items = []
			if canPaste
				_ items.push
					{
						@ label 'paste'
			set items
				_ items.concat
					[
						{
							@ label 'copy'
						{
							@ label 'cut'
						{
							@ label 'rename'
						{
							@ label 'delete'
			return items