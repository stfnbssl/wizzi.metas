$group

    react FlexibleModal
        
        ctor 
            set this.state =
                { 
                    @ isDragging false
                    @ isResizing false
                    @ top
                        iif this.props.top !== undefined
                            then this.props.top
                            else
                                iif this.props.initHeight
                                    then window.innerHeight / 2 - this.props.initHeight / 2 - 50
                                    else window.innerHeight / 2 - 400 / 2 - 50
                    @ left
                        iif this.props.left !== undefined
                            then this.props.left
                            else
                                iif this.props.initWidth
                                    then window.innerWidth / 2 - this.props.initWidth / 2 - 21
                                    else window.innerWidth / 2 - 800 / 2 - 21
                    @ width
                        iif this.props.initWidth
                            then this.props.initWidth
                            else "inherit"
                    @ height
                        iif this.props.initHeight
                            then this.props.initHeight
                            else "inherit"
                    @ rel null
            set this.updateStateResizing = this.updateStateResizing.bind(this)
            set this.funcResizing = this.funcResizing.bind(this)
            set this.resize = this.resize.bind(this)
            set this.onMouseMove = this.onMouseMove.bind(this)
            set this.onMouseUp = this.onMouseUp.bind(this)
            set this.onMouseDown = this.onMouseDown.bind(this)
            set this.pressKey = this.pressKey.bind(this)
            set this.updateStateDragging = this.updateStateDragging.bind(this)
        
        m componentDidMount
            const 
                { 
                    @ disableKeystroke
                = this.props
            _ document.addEventListener('mouseup', this.onMouseUp)
            if !disableKeystroke
                _ document.addEventListener('keydown', this.pressKey)
        
        m componentWillUnmount
            const 
                { 
                    @ disableKeystroke
                = this.props
            if document.removeEventListener
                _ document.removeEventListener('mousemove', this.onMouseMove)
                _ document.removeEventListener('mouseup', this.onMouseUp)
                if !disableKeystroke
                    _ document.removeEventListener('keydown', this.pressKey)
        
        m onMouseDown
            param e
            _ document.addEventListener('mousemove', this.onMouseMove)
            if e.button !== 0
                return 
            var pos = ReactDOM.findDOMNode(this.node_modal)
            _ this.setState
                { 
                    @ mouseEv e
                    @ isDragging true
                    { rel
                        @ x e.pageX - pos.offsetLeft
                        @ y e.pageY - pos.offsetTop
            _ e.stopPropagation()
            _ e.preventDefault()
        
        m onMouseUp
            param e
            _ document.removeEventListener('mousemove', this.onMouseMove)
            _ this.setState
                { 
                    @ mouseEv e
                    @ isDragging false
                    @ isResizing false
            _ e.stopPropagation()
                # e.preventDefault();
        
        m onMouseMove
            param e
            const 
                { 
                    @ disableMove
                    @ disableVerticalMove
                    @ disableHorizontalMove
                = this.props
            if this.state.isDragging
                if disableMove
                else
                    if disableVerticalMove && disableHorizontalMove
                    else
                        if !disableVerticalMove && disableHorizontalMove
                            _ this.setState
                                { 
                                    @ mouseEv e
                                    @ top e.pageY - this.state.rel.y
                        else
                            if disableVerticalMove && !disableHorizontalMove
                                _ this.setState
                                    { 
                                        @ mouseEv e
                                        @ left e.pageX - this.state.rel.x
                            else
                                if !disableVerticalMove && !disableHorizontalMove
                                    _ this.setState
                                        { 
                                            @ mouseEv e
                                            @ left e.pageX - this.state.rel.x
                                            @ top e.pageY - this.state.rel.y
            else
                if this.state.isResizing
                    _ this.funcResizing(e.clientX, e.clientY)
                else
                    return 
            _ e.stopPropagation()
            _ e.preventDefault()
        
        m updateStateResizing
            param isResizing
            _ document.addEventListener('mousemove', this.onMouseMove)
            _ this.setState
                { 
                    @ isResizing
        
        m funcResizing
            param clientX
            param clientY
            const 
                { 
                    @ minWidth mWidth
                    @ minHeight mHeight
                    @ disableVerticalResize
                    @ disableHorizontalResize
                = this.props
            let node = ReactDOM.findDOMNode(this.node_modal)
            let minWidth
                iif mWidth
                    then mWidth
                    else 200
            let minHeight
                iif mHeight
                    then mHeight
                    else 100
            if !disableHorizontalResize && clientX > node.offsetLeft + minWidth
                _ this.setState
                    { 
                        @ width clientX - node.offsetLeft + 16 / 2
            if !disableVerticalResize && clientY > node.offsetTop + minHeight
                _ this.setState
                    { 
                        @ height clientY - node.offsetTop + 16 / 2
        
        m updateStateDragging
            param isDragging
            _ this.setState
                { 
                    @ isDragging
        
        m pressKey
            param e
            const 
                { 
                    @ onRequestClose
                    @ disableResize
                    @ disableMove
                    @ disableVerticalMove
                    @ disableHorizontalMove
                = this.props
            if e.ctrlKey
                switch e.keyCode
            else
                switch e.keyCode
        
        m resize
            param width
            param height
            _ this.setState
                => 
                    param prevState
                    (
                        { 
                            @ width width || prevState.width
                            @ height height || prevState.height
        
        m render
            const 
                { 
                    @ isOpen
                    @ isMinimised
                    @ onRequestClose
                    @ onRequestMinimise
                    @ onRequestRecover
                    @ disableResize
                    @ className
                    @ onFocus
                = this.props
            return 
                div 
                    { 
                        && 
                            + isOpen && !isMinimised
                            div 
                                @ onClick
                                    iif onRequestMinimise
                                        then onRequestMinimise
                                        else onRequestClose
                                @ className "flexible-modal-mask"
                    < Modal 
                        @ className {className}
                        @ onFocus {onFocus}
                        @ width {this.state.width}
                        @ height {this.state.height}
                        @ top {this.state.top}
                        @ left {this.state.left}
                        @ isDragging {this.state.isDragging}
                        @ onRequestRecover {onRequestRecover}
                        @ isMinimised {isMinimised}
                        @ isOpen {isOpen}
                        @ updateStateDragging {this.updateStateDragging}
                        @ transitionName "modal-anim"
                        @ ref
                            => 
                                param node
                                set this.node_modal = node
                        + {this.props.children}
                        div 
                            @ onMouseDown {this.onMouseDown}
                            @ className "flexible-modal-drag-area"
                            @ style
                                { 
                                    @ width this.state.width
                            @ ref
                                => 
                                    param dragArea
                                    set this.dragArea = dragArea
                        div 
                            @ onMouseDown {this.onMouseDown}
                            @ className "flexible-modal-drag-area-left"
                            @ style
                                { 
                                    @ height this.state.height
                            @ ref
                                => 
                                    param dragArea
                                    set this.dragArea2 = dragArea
                        div 
                            @ onMouseDown {this.onMouseDown}
                            @ className "flexible-modal-drag-area-bottom"
                            @ style
                                { 
                                    @ width this.state.width
                            @ ref
                                => 
                                    param dragArea
                                    set this.dragArea3 = dragArea
                        div 
                            @ onMouseDown {this.onMouseDown}
                            @ className "flexible-modal-drag-area-right"
                            @ style
                                { 
                                    @ height this.state.height
                            @ ref
                                => 
                                    param dragArea
                                    set this.dragArea4 = dragArea
                        { 
                            && 
                                + !disableResize
                                < Resizer 
                                    @ updateStateResizing {this.updateStateResizing}