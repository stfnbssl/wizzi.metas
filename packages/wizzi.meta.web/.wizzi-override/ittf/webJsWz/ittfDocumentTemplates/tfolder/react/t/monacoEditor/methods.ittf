$group

    => getTheme
        param theme
        param filePath
        # loog 'MonacoEditor.getTheme, theme, filePath', theme, filePath
        if filePath && filePath.endsWith('.ittf')
            return theme == 'ligth' ? 'ittfLight' : 'ittfDark'
        else
            return theme

    => _initializeDocument
        param path
        param value
        # loog 'MonacoEditor._initializeDocument, path, value', path, value
        let model = findModel(path)
        if model && !model.isDisposed()
            _ model.pushEditOperations
                [ 
                [ 
                    { 
                        @ range model.getFullModelRange()
                        @ text value
                # If a model exists, we need to update it's value
                # This is needed because the content for the file might have been modified externally
                # Use `pushEditOperations` instead of `setValue` or `applyEdits` to preserve undo stack
        else
            if path.endsWith('.ittf')
                set model =
                    _ monaco.editor.createModel
                        @ value
                        @ 'ittf'
                        _ monaco.Uri.from
                            { 
                                @ scheme 'file'
                                @ path
            else
                set model =
                    _ monaco.editor.createModel
                        @ value
                        @ undefined
                        _ monaco.Uri.from
                            { 
                                @ scheme 'file'
                                @ path
            _ model.updateOptions
                { 
                    @ tabSize 2
                    @ insertSpaces true

    => _openDocument
        param path
        param value
        param focus
        # loog 'MonacoEditor._openDocument, path, value, focus', path, value, focus
        _ this._initializeDocument(path, value)
        const model = findModel(path)
        if this._editor && model
            _ this._editor.setModel(model)
            const editorState = MonacoEditor_editorStates.get(path)
            if editorState
                _ this._editor.restoreViewState(editorState)
            if focus
                _ this._editor.focus()
