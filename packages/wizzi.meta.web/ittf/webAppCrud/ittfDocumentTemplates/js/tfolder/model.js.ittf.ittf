$group
    ${'$'}
      var myName = 'Model';
      //

    iife_window${'('} app, ${'$'}{myName})
        
        function ${'$'}{myName}
            param storage
            param defaults
            set this.storage = storage
            set this.defaults = defaults || {}
            set this.wzApi = api.Wizzi

        set ${'$'}{myName}.prototype.getTabelle
            function 
                param_callback${'('} required, Method: ${'$'}{myName}.getTabelle )
                _ this.storage.findTabelle
                  =>
                    param item
                    _ callback
                      @ item


        set ${'$'}{myName}.prototype.get${metaCtx.webAppCrud.Name}
            function 
                param activeSearchTerm
                param activeCategoria
                param_callback${'('} required, Method: ${'$'}{myName}.get${metaCtx.webAppCrud.Name} )
                info "${'$'}{myName}.prototype.get${metaCtx.webAppCrud.Name}, activeSearchTerm", activeSearchTerm, "activeCategoria", activeCategoria
                _ this.storage.findAll${metaCtx.webAppCrud.Name}
                    =>
                        param items
                        info "${'$'}{myName}.prototype.get${metaCtx.webAppCrud.Name}.findAll.result", items
                        _ callback
                            @ items
                            ${'$'}*
                            _ items.filter
                                =>
                                    param item
                                    ${'$'}${'$'} $$ loog '${'$'}{myName}.getProduction.item', item.__selected, viewKind
                                    var okCatTit = true
                                    if activeCategoria != '0'
                                        set okCatTit = okCatTit && item.categoria == activeCategoria
                                    var ok = okCatTit
                                    if ok && activeSearchTerm && activeSearchTerm.length > 0
                                        set ok = containsTerm(item.name, activeSearchTerm)
                                            \b || containsTerm(item.categoria, activeSearchTerm)
                                    return ok
                            *${'$'}

        set ${'$'}{myName}.prototype.get${metaCtx.webAppCrud.Name}Item
            function 
                param id
                param_callback${'('} required, Method: ${'$'}{myName}.get${metaCtx.webAppCrud.Name}Item )
                _ this.storage.find${metaCtx.webAppCrud.Name}Item
                    @ id
                    =>
                        param item
                        _ callback
                            @ item

        set ${'$'}{myName}.prototype.create${metaCtx.webAppCrud.Name}Item
            function 
                param values
                param_callback${'('} required, Method: ${'$'}{myName}.create${metaCtx.webAppCrud.Name}Item )
                info "${'$'}{myName}.prototype.create${metaCtx.webAppCrud.Name}Item, values", values
                _ this.storage.insert${metaCtx.webAppCrud.Name}Item
                    @ values
                    =>
                        param item
                        _ callback
                            @ item

        set ${'$'}{myName}.prototype.get${metaCtx.webAppCrud.Name}Value
            function 
                param name
                param defaultValue
                return
                    _ this.storage.getLocalValue
                        @ name
                        @ defaultValue

        set ${'$'}{myName}.prototype.set${metaCtx.webAppCrud.Name}Value
            function 
                param name
                param value
                _ this.storage.setLocalValue
                    @ name
                    @ value

        function containsTerm
            param str
            param term
            set str = str || ""
            set term = term || ""
            return str.toLowerCase().indexOf(term.toLowerCase()) > -1