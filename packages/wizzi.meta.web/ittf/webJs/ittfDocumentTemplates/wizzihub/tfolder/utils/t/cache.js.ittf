$group
    $
      var myName = 'Cache';
      //
    
    iife_window( utils, ${myName})
        function ${myName}
          param name
          set this.name = name
          set this.cache = {}
        set ${myName}.prototype.set
            function 
                param key
                param value
                set this.cache[key] = value
        set ${myName}.prototype.get
            function 
                param key
                param value
                return this.cache[key]
        set ${myName}.prototype.memoize
            function 
                param fn
                var self = this
                return 
                    function 
                        var keyparts = []
                        foreach arg in arguments
                            _ keyparts.push
                                @ arg ? arg.toString() : ''
                        var key = keyparts.join('_')
                        if !(key in self.cache)
                            _ self.set
                              @ key
                              _ fn.apply(this, arguments)
                            $$ loog 'key ', key, 'retrieved by function and set in cache', self.name
                        else
                            $$ loog 'key ', key, 'returned from cache', self.name
                        return
                            _ self.get(key)
        set ${myName}.prototype.memoizePromise
            function 
                param fnName
                param fn
                var self = this
                return 
                    function 
                        r_promise()
                          var keyparts = [fnName]
                          foreach arg in arguments
                              _ keyparts.push
                                  @ arg ? arg.toString() : ''
                          var key = keyparts.join('_')
                          if !(key in self.cache)
                              _ fn.apply
                                  @ this
                                  @ arguments
                                  ._ then
                                      =>
                                          param result
                                          _ self.set
                                              @ key
                                              @ result
                                          $$ loog 'key ', key, 'retrieved by function and set in cache', self.name
                                          return
                                              _ resolve
                                                  @ result
                                  ._ catch
                                      =>
                                          param err
                                          return
                                              _ reject
                                                  @ err
                          else
                              $$ loog 'key ', key, 'returned from cache', self.name
                              return
                                  _ resolve
                                      _ self.get(key)