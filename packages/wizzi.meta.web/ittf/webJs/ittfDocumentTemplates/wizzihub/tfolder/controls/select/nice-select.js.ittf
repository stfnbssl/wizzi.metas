$group
    $
      var myName = 'NiceSelect'; 
      //
    
    iife_window( controls, ${myName} )
        function triggerClick
            param el
            var event = document.createEvent("MouseEvents")
            _ event.initEvent("click", true, false)
            _ el.dispatchEvent(event)
            # utility functions
        function triggerChange
            param el
            var event = document.createEvent("HTMLEvents")
            _ event.initEvent("change", true, false)
            _ el.dispatchEvent(event)
        function triggerFocusIn
            param el
            var event = document.createEvent("FocusEvent")
            _ event.initEvent("focusin", true, false)
            _ el.dispatchEvent(event)
        function triggerFocusOut
            param el
            var event = document.createEvent("FocusEvent")
            _ event.initEvent("focusout", true, false)
            _ el.dispatchEvent(event)
        function attr
            param el
            param key
            return el.getAttribute(key)
        function data
            param el
            param key
            return el.getAttribute("data-" + key)
        function hasClass
            param el
            param className
            if el
                return el.classList.contains(className)
            else
                return false
        function addClass
            param el
            param className
            if el
                return el.classList.add(className)
        function removeClass
            param el
            param className
            if el
                return el.classList.remove(className)
        var defaultOptions
            { 
                @ data null
                @ searchable false
        function ${myName}
            param element
            param options
            set this.el = element
            set this.config =
                _ Object.assign
                    { 
                    @ defaultOptions
                    || 
                        + options
                        { 
            set this.data = this.config.data
            set this.selectedOptions = []
            set this.placeholder = attr(this.el, "placeholder") || this.config.placeholder || "Select an option"
            set this.dropdown = null
            set this.multiple = attr(this.el, "multiple")
            set this.disabled = attr(this.el, "disabled")
            _ this.create()
        set ${myName}.prototype.create =
            function 
                set this.el.style.display = "none"
                if this.data
                    _ this.processData(this.data)
                else
                    _ this.extractData()
                _ this.renderDropdown()
                _ this.bindEvent()
        set ${myName}.prototype.processData =
            function 
                param data
                var options = []
                _ data.forEach
                    => 
                        param item
                        _ options.push
                            { 
                                @ data item
                                { attributes
                                    @ selected false
                                    @ disabled false
                                    @ optgroup item.value == 'optgroup'
                set this.options = options
        set ${myName}.prototype.extractData =
            function 
                var options = this.el.querySelectorAll("option,optgroup")
                var data = []
                var allOptions = []
                var selectedOptions = []
                _ options.forEach
                    => 
                        param item
                        if item.tagName == 'OPTGROUP'
                            var itemData
                                { 
                                    @ text item.label
                                    @ value 'optgroup'
                        else
                            var itemData
                                { 
                                    @ text item.innerText
                                    @ value item.value
                        var attributes
                            { 
                                @ selected item.getAttribute("selected") != null
                                @ disabled item.getAttribute("disabled") != null
                                @ optgroup item.tagName == 'OPTGROUP'
                        _ data.push(itemData)
                        _ allOptions.push
                            { 
                                @ data itemData
                                @ attributes
                set this.data = data
                set this.options = allOptions
                _ this.options.forEach
                    function 
                        param item
                        if item.attributes.selected
                            _ selectedOptions.push(item)
                set this.selectedOptions = selectedOptions
        set ${myName}.prototype.renderDropdown =
            function 
                var classes
                    [ 
                        @ "nice-select"
                        @ attr(this.el, "class") || ""
                        iif this.disabled
                            then "disabled"
                            else ""
                        iif this.multiple
                            then "has-multiple"
                            else ""
                let searchHtml
                    `lit 
                        + <div class="nice-select-search-box">&lf;
                        + <input type="text" class="nice-select-search" placeholder="Search..."/>&lf;
                        + </div>
                var html
                    `lit 
                        + <div class="
                        _ classes.join(" ")
                        + " tabindex="
                        iif this.disabled
                            then null
                            else 0
                        + ">&lf;
                        + &nbsp; <span class="
                        iif this.multiple
                            then "multiple-options"
                            else "current"
                        + "></span>&lf;
                        + &nbsp; <div class="nice-select-dropdown">&lf;
                        + &nbsp;&nbsp;
                        iif this.config.searchable
                            then searchHtml
                            else ""
                        + &lf;
                        + &nbsp; <ul class="list"></ul>&lf;
                        + &nbsp; </div></div>&lf;
                        + 
                _ this.el.insertAdjacentHTML("afterend", html)
                set this.dropdown = this.el.nextElementSibling
                _ this._renderSelectedItems()
                _ this._renderItems()
        set ${myName}.prototype._renderSelectedItems =
            function 
                if this.multiple
                    var selectedHtml = ""
                    if window.getComputedStyle(this.dropdown).width == 'auto' || this.selectedOptions.length < 2
                        _ this.selectedOptions.forEach
                            function 
                                param item
                                set selectedHtml +=
                                    `lit 
                                        + <span class="current">
                                        @ item.data.text
                                        + </span>
                        set selectedHtml =
                            iif selectedHtml == ""
                                then this.placeholder
                                else selectedHtml
                    else
                        set selectedHtml = this.selectedOptions.length + ' selected'
                    set this.dropdown.querySelector(".multiple-options").innerHTML = selectedHtml
                else
                    var html
                        iif this.selectedOptions.length > 0
                            then this.selectedOptions[0].data.text
                            else this.placeholder
                    set this.dropdown.querySelector(".current").innerHTML = html
        set ${myName}.prototype._renderItems =
            function 
                var ul = this.dropdown.querySelector("ul")
                _ this.options.forEach
                    => 
                        param item
                        _ ul.appendChild(this._renderItem(item))
        set ${myName}.prototype._renderItem =
            function 
                param option
                var el = document.createElement("li")
                set el.innerHTML = option.data.text
                if option.attributes.optgroup
                    _ el.classList.add('optgroup')
                else
                    _ el.setAttribute("data-value", option.data.value)
                    var classList
                        [ 
                            @ "option"
                            iif option.attributes.selected
                                then "selected"
                                else null
                            iif option.attributes.disabled
                                then "disabled"
                                else null
                    _ el.addEventListener("click", this._onItemClicked.bind(this, option))
                    _ el.classList.add(...classList)
                set option.element = el
                return el
        set ${myName}.prototype.update =
            function 
                _ this.extractData()
                if this.dropdown
                    var open = hasClass(this.dropdown, "open")
                    _ this.dropdown.parentNode.removeChild(this.dropdown)
                    _ this.create()
                    if open
                        _ triggerClick(this.dropdown)
        set ${myName}.prototype.disable =
            function 
                if !this.disabled
                    set this.disabled = true
                    _ addClass(this.dropdown, "disabled")
        set ${myName}.prototype.enable =
            function 
                if this.disabled
                    set this.disabled = false
                    _ removeClass(this.dropdown, "disabled")
        set ${myName}.prototype.clear =
            function 
                set this.selectedOptions = []
                _ this._renderSelectedItems()
                _ this.updateSelectValue()
                _ triggerChange(this.el)
        set ${myName}.prototype.destroy =
            function 
                if this.dropdown
                    _ this.dropdown.parentNode.removeChild(this.dropdown)
                    set this.el.style.display = ""
        set ${myName}.prototype.bindEvent =
            function 
                var $this = this
                _ this.dropdown.addEventListener("click", this._onClicked.bind(this))
                _ this.dropdown.addEventListener("keydown", this._onKeyPressed.bind(this))
                _ this.dropdown.addEventListener("focusin", triggerFocusIn.bind(this, this.el))
                _ this.dropdown.addEventListener("focusout", triggerFocusOut.bind(this, this.el))
                _ window.addEventListener("click", this._onClickedOutside.bind(this))
                if this.config.searchable
                    _ this._bindSearchEvent()
        set ${myName}.prototype._bindSearchEvent =
            function 
                var searchBox = this.dropdown.querySelector(".nice-select-search")
                if searchBox
                    _ searchBox.addEventListener
                        @ "click"
                        function 
                            param e
                            _ e.stopPropagation()
                            return false
                _ searchBox.addEventListener("input", this._onSearchChanged.bind(this))
        set ${myName}.prototype._onClicked =
            function 
                param e
                if this.multiple
                    _ this.dropdown.classList.add("open")
                else
                    _ this.dropdown.classList.toggle("open")
                if this.dropdown.classList.contains("open")
                    var search = this.dropdown.querySelector(".nice-select-search")
                    if search
                        set search.value = ""
                        _ search.focus()
                    var t = this.dropdown.querySelector(".focus")
                    _ removeClass(t, "focus")
                    set t = this.dropdown.querySelector(".selected")
                    _ addClass(t, "focus")
                    _ this.dropdown.querySelectorAll("ul li").forEach
                        function 
                            param item
                            set item.style.display = ""
                else
                    _ this.dropdown.focus()
        set ${myName}.prototype._onItemClicked =
            function 
                param option
                param e
                var optionEl = e.target
                if !hasClass(optionEl, "disabled")
                    if this.multiple
                        if hasClass(optionEl, "selected")
                            _ removeClass(optionEl, "selected")
                            _ this.selectedOptions.splice(this.selectedOptions.indexOf(option), 1)
                            set this.el.querySelector('option[value="' + optionEl.dataset.value + '"]').selected = false
                        else
                            _ addClass(optionEl, "selected")
                            _ this.selectedOptions.push(option)
                    else
                        _ this.selectedOptions.forEach
                            function 
                                param item
                                _ removeClass(item.element, "selected")
                        _ addClass(optionEl, "selected")
                        set this.selectedOptions =
                            [ 
                                @ option
                    _ this._renderSelectedItems()
                    _ this.updateSelectValue()
        set ${myName}.prototype.updateSelectValue =
            function 
                if this.multiple
                    var select = this.el
                    _ this.selectedOptions.forEach
                        function 
                            param item
                            var el = select.querySelector('option[value="' + item.data.value + '"]')
                            if el
                                _ el.setAttribute("selected", true)
                else
                    if this.selectedOptions.length > 0
                        set this.el.value = this.selectedOptions[0].data.value
                _ triggerChange(this.el)
        set ${myName}.prototype._onClickedOutside =
            function 
                param e
                if !this.dropdown.contains(e.target)
                    _ this.dropdown.classList.remove("open")
        set ${myName}.prototype._onKeyPressed =
            function 
                param e
                var focusedOption = this.dropdown.querySelector(".focus")
                    # Keyboard events
                var open = this.dropdown.classList.contains("open")
                    # Space or Enter
                if e.keyCode == 32 || e.keyCode == 13
                    if open
                        _ triggerClick(focusedOption)
                    else
                        _ triggerClick(this.dropdown)
                else
                    if e.keyCode == 40
                        if !open
                            _ triggerClick(this.dropdown)
                        else
                            var next = this._findNext(focusedOption)
                            if next
                                var t = this.dropdown.querySelector(".focus")
                                _ removeClass(t, "focus")
                                _ addClass(next, "focus")
                        _ e.preventDefault()
                    else
                        if e.keyCode == 38
                            if !open
                                _ triggerClick(this.dropdown)
                            else
                                var prev = this._findPrev(focusedOption)
                                if prev
                                    var t = this.dropdown.querySelector(".focus")
                                    _ removeClass(t, "focus")
                                    _ addClass(prev, "focus")
                            _ e.preventDefault()
                        else
                            if e.keyCode == 27 && open
                                _ triggerClick(this.dropdown)
                return false
        set ${myName}.prototype._findNext =
            function 
                param el
                if el
                    set el = el.nextElementSibling
                else
                    set el = this.dropdown.querySelector(".list .option")
                while el
                    if !hasClass(el, "disabled") && el.style.display != "none"
                        return el
                    set el = el.nextElementSibling
                return null
        set ${myName}.prototype._findPrev =
            function 
                param el
                if el
                    set el = el.previousElementSibling
                else
                    set el = this.dropdown.querySelector(".list .option:last-child")
                while el
                    if !hasClass(el, "disabled") && el.style.display != "none"
                        return el
                    set el = el.previousElementSibling
                return null
        set ${myName}.prototype._onSearchChanged =
            function 
                param e
                var open = this.dropdown.classList.contains("open")
                var text = e.target.value
                set text = text.toLowerCase()
                if text == ""
                    _ this.options.forEach
                        function 
                            param item
                            set item.element.style.display = ""
                else
                    if open
                        var matchReg = new RegExp(text)
                        _ this.options.forEach
                            function 
                                param item
                                var optionText = item.data.text.toLowerCase()
                                var matched = matchReg.test(optionText)
                                set item.element.style.display =
                                    iif matched
                                        then ""
                                        else "none"
                _ this.dropdown.querySelectorAll(".focus").forEach
                    function 
                        param item
                        _ removeClass(item, "focus")
                var firstEl = this._findNext(null)
                _ addClass(firstEl, "focus")
        set ${myName}.bind
            function
                param el
                param options
                return new ${myName}(el, options)