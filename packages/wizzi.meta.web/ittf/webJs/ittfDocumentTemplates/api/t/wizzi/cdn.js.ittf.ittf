$group
    ${'$'}params &md
    iife_window${'('} api, ${'$'}{md.ApiName}, increment )
        
        set ${'$'}{md.ApiName}.createCdnResource
          function
              param owner
              param name
              param contents
              $$ loog '${'$'}{md.ApiName}.createCdnResource', 'owner', owner, 'name', name, 'contents', contents
              r_promise${'('})
                  _ api.Fetch.post
                      { 
                          @ url '${'$'}{md.apiUrl}/cdn/' + encodeURIComponent(owner) + '/' + encodeURIComponent(name)
                          { body
                            @ contents
                      ._ then
                          =>
                              param response
                              info 'createCdnResource.response', response
                              _ resolve
                                  @ response
                      catch_reject${'('} createCdnResource )
          #
              # 
              # Creates a new CdnResource item
              # 
              # @param {string} [owner] The owner of the production item
              # @param {string} [name] The name of the production item
              # @param {string} [contents] The contents of the resource
              #          

        set ${'$'}{md.ApiName}.updateCdnResource
          function
              param name
              param type
              $$ loog '${'$'}{md.ApiName}.updateCdnResource', 'owner', owner, 'name', name 
              r_promise${'('})
                  _ api.Fetch.put
                      { 
                          @ url '${'$'}{md.apiUrl}/cdn/' + encodeURIComponent(owner) + '/' + encodeURIComponent(name)
                          { body
                            @ contents
                      ._ then
                          =>
                              param response
                              info 'updateCdnResource.response', response
                              _ resolve
                                  @ response
                      catch_reject${'('} updateCdnResource )
          #
              # 
              # Updates a CdnResource item
              # 
              # @param {string} [owner] The owner of the production item
              # @param {string} [name] The name of the production item
              # @param {string} [contents] The contents of the resource
              #

        set ${'$'}{md.ApiName}.deleteCdnResource
          function
              param name
              param type
              $$ loog 'og 'og 'og '${'$'}{md.ApiName}.deleteCdnResource', 'owner', owner, 'name', name 
              r_promise${'('})
                  _ api.Fetch.delete
                      { 
                          @ url '${'$'}{md.apiUrl}/cdn/' + encodeURIComponent(owner) + '/' + encodeURIComponent(name)
                          { body
                            @ contents
                      ._ then
                          =>
                              param response
                              info 'putResource.response', response
                              _ resolve
                                  @ response
                      catch_reject${'('} deleteCdnResource )
          #
              # 
              # Deletes a CdnResource item
              # 
              # @param {string} [owner] The owner of the production item
              # @param {string} [name] The name of the production item
              #              