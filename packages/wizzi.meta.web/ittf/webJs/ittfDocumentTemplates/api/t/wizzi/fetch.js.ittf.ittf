$group
    ${'$'}params &md
    iife_window${'('} api, ${'$'}{md.ApiName}, increment )
        set ${'$'}{md.ApiName}.get${'$'}{md.Prod}
          _ ${'$'}{md.ApiName}.cache.memoizePromise
            @ '${'$'}{md.Prod}'
            function
                param owner
                param name
                let url = '${'$'}{md.apiUrl}/production/${'$'}{md.prod}/' + encodeURIComponent(owner)
                if name && name.length > 0
                    set url += '/' + name
                r_promise${'('})
                    _ api.Fetch.get
                        @ url
                        ._ then
                            =>
                                param response
                                info 'get${'$'}{md.Prod}List.response', response
                                return 
                                    _ resolve 
                                        @ response
                        catch_reject${'('} get${'$'}{md.Prod} )
          #
              # 
              # Fetches an ${'$'}{md.Prod}Production collection or item
              # 
              # @param {string} owner The owner of the production
              # @param {string} name Optional. The name of the production, 
              # -                              if null returns all owner's productions
              #                       
        
        set ${'$'}{md.ApiName}.put${'$'}{md.Prod}
          function
              param id
              param packiFiles
              param options
              ${'$'}${'$'} updateArtifactProduction${'('}request.params.id, request.body.owner, request.body.name, request.body.description, request.body.mainIttf, request.body.wizziSchema, JSON.stringify(request.body.packiFiles))
              $$ loog '${'$'}{md.ApiName}.put${'$'}{md.Prod}', 'id', id, 'packiFiles', Object.keys(packiFiles), 'options', options
              r_promise${'('})
                  _ api.Fetch.put
                      { 
                          @ url '${'$'}{md.apiUrl}/production/${'$'}{md.prod}/' + encodeURIComponent(id)
                          { body
                            @ packiFiles
                            @ options
                      ._ then
                          =>
                              param response
                              info 'put${'$'}{md.Prod}.response', response
                              _ resolve
                                  @ response
                      catch_reject${'('} put${'$'}{md.Prod} )
          #
              # 
              # Updates a ${'$'}{md.Prod}Production item
              # 
              # @param {string} id The id of the production item
              # @param {PackiFiles} packiFiles. A PackiFiles object, contains all the production's files.
              #     

        set ${'$'}{md.ApiName}.put${'$'}{md.Prod}PackiDiffs
          function
              param id
              param packiDiffs
              param options
              ${'$'}${'$'} updateArtifactProduction${'('}request.params.id, request.body.owner, request.body.name, request.body.description, request.body.mainIttf, request.body.wizziSchema, JSON.stringify(request.body.packiFiles))
              $$ loog '${'$'}{md.ApiName}.put${'$'}{md.Prod}PackiDiffs', 'id', id, 'packiDiffs', Object.keys(packiDiffs), 'options', options
              r_promise${'('})
                  _ api.Fetch.put
                      { 
                          @ url '${'$'}{md.apiUrl}/production/${'$'}{md.prod}/packidiffs/' + encodeURIComponent(id)
                          { body
                            @ packiDiffs
                            @ options
                      ._ then
                          =>
                              param response
                              info 'put${'$'}{md.Prod}PackiDiffs.response', response
                              _ resolve
                                  @ response
                      catch_reject${'('} put${'$'}{md.Prod}PackiDiffs )
          #
              # 
              # Updates a ${'$'}{md.Prod}Production applying a diff object
              # 
              # @param {string} id The id of the production item
              # @param {PackiFiles} packiDiffs. A diff object, contains insert, deletes and updates.
              #     

        set ${'$'}{md.ApiName}.create${'$'}{md.Prod}
          function
              param owner
              param name
              param packiFiles
              param options
              set options = options || {}
              ${'$'}${'$'} updateArtifactProduction${'('}request.params.id, request.body.owner, request.body.name, request.body.description, request.body.mainIttf, request.body.wizziSchema, JSON.stringify(request.body.packiFiles))
              $$ loog '${'$'}{md.ApiName}.create${'$'}{md.Prod}', 'owner', owner, 'name', name, 'packiFiles', Object.keys(packiFiles), 'options', options
              const
                {
                  @ description
                  ${'$'}if md.Prod == 'Artifact'
                    @ wizziSchema
                    @ mainIttf
                  ... rest
                = options
              r_promise${'('})
                  _ api.Fetch.put
                      { 
                          @ url '${'$'}{md.apiUrl}/production/${'$'}{md.prod}/' + encodeURIComponent(owner) + '/' + encodeURIComponent(name)
                          { body
                            @ description
                            ${'$'}if md.Prod == 'Artifact'
                              @ wizziSchema
                              @ mainIttf
                            @ packiFiles
                            @ options rest
                      ._ then
                          =>
                              param response
                              info 'create${'$'}{md.Prod}.response', response
                              _ resolve
                                  @ response
                      catch_reject${'('} create${'$'}{md.Prod} )
          #
              # 
              # Creates a new ${'$'}{md.Prod}Production item
              # 
              # @param {string} [owner] The owner of the production item
              # @param {string} [name] The name of the production item
              # @param {PackiFiles} packiFiles. A PackiFiles object, contains all the production's files.
              #                       



          