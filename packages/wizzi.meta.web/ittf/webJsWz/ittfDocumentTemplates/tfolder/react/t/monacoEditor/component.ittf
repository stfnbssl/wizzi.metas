$group
    
    did-mount
        const 
            { 
                @ files
                @ selectedFile
                @ autoFocus
                @ updateFiles
                @ onSelectFile
                ... rest
            = this.props
        
        $* TODO
        set codeEditorService.openCodeEditor =
            async=> 
                { 
                    @ resource
                    @ options
                    :any 
                param editor
                    :ref monaco.editor.IStandaloneCodeEditor
                _ this.props.onSelectFile(resource.path.replace(/^\//, ''))
                    # Remove the leading slash added by the Uri
                _ editor.setSelection(options.selection)
                _ editor.revealLine(options.selection.startLineNumber)
                return 
                    { 
                        @ getControl
                            => 
                                + editor
            # The methods provided by the service are on it's prototype
            # So spreading this object doesn't work, we must mutate it
        *$

        const options
            _ Object.assign
                {
                {
                    @ language 'ittfLanguage'
                    @ theme 'ittfDark'
                    @ automaticLayout true
                {
                    @ ...rest
                    @ theme this.getTheme(rest.theme, selectedFile)
        var that = this
        _ require
            [
                @ 'vs/editor/editor.main'
            function
                # loog 'mounting MonacoEditor', options
                $include js/monaco/ittf_monarch
                const editor
                    _ monaco.editor.create
                        @ that._node.current
                        @ options
                        $$ @ codeEditorService
                set that._editor = editor
                # loog 'mounted MonacoEditor'
                set that._disposables =
                    [ 
                        @ editor
                _ that._disposables.push(editor.onDidChangeModelContent(that._handleEditFile))
                if files && selectedFile
                    _ that._openDocument
                        @ selectedFile
                        @ files[selectedFile].contents
                        @ autoFocus
                    for const path in files
                        const file = files[path]
                        if file.type === 'CODE'
                            _ that._initializeDocument(path, file.contents)
                        # Load all the files so the editor can provide proper intellisense

    did-update
        
        const 
            { 
                @ selectedFile
                @ files
                @ autoFocus
                @ theme
                @ updateFiles
                @ onSelectFile
                ... rest
            = this.props
        
        if files && selectedFile
            const options
                {
                    @ ...rest
                    @ theme this.getTheme(theme, selectedFile)
            
            if this._editor
                _ this._editor.updateOptions(options)
                # loog "MonacoEditor.ComponentDidUpdate, selectedFile, files", selectedFile, files
                const model = this._editor.getModel()
                const value = files[selectedFile].contents
                if selectedFile !== prevProps.selectedFile
                    _ MonacoEditor_editorStates.set(prevProps.selectedFile, this._editor.saveViewState())
                        # Save the editor state for the previous file so we can restore it when it's re-opened
                    _ this._openDocument(selectedFile, value, autoFocus)
                else
                    if model && value !== model.getValue()
                        _ this._editor.executeEdits
                            @ null
                            [ 
                                { 
                                    @ range model.getFullModelRange()
                                    @ text value
                            # @ts-ignore
            
            if theme !== prevProps.theme || selectedFile !== prevProps.selectedFile
                _ monaco.editor.setTheme
                    _ this.getTheme
                        @ theme
                        @ selectedFile
            
            if this.props.files && prevProps.files !== this.props.files
                for const path in this.props.files
                    const file = this.props.files[path]
                    # loog 'MonacoEditor.ComponentDidUpdate, path, file', path, file
                    const prevContents = prevProps.files && prevProps.files[path] ? prevProps.files[path].contents : null
                    if file.type === 'CODE' && file.contents !== prevContents && path !== selectedFile
                        _ this._initializeDocument(path, file.contents)
                        # Load the file so the editor can provide proper intellisense