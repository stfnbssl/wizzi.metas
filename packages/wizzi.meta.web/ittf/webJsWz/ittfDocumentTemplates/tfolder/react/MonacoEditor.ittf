$group

    const MonacoEditor_container_style
        { 
            @ display 'flex'
            @ flex 1
            @ flexDirection 'column'
            @ height '100%'
            @ width '100%'
    
    const MonacoEditor_editor_style
        { 
            @ height '100%'
            @ width '100%'

    var MonacoEditor_defaults
		{
			@ key 'monaco'

    const MonacoEditor_editorStates = new Map()
        # Store editor states such as cursor position, selection and scroll position for each model

    const findModel
        => 
            param path
            _ monaco.editor.getModels().find
                => 
                    param model
                    === 
                        + model.uri.path
                        `lit 
                            + /
                            @ path
                            + 
    
    react MonacoEditor
        ctor
            set this._disposables = []
            set this._editor = null
            set this._node = React.createRef()
            set this.updateDebounced
                _ wz.debounce
                    => 
                        param value
                        _ this.props.updateFiles
                            { 
                                { [this.props.selectedFile]
                                    @ type 'CODE'
                                    @ contents value
                    @ 1000

        $include monacoEditor/component
        $include monacoEditor/methods
        $include monacoEditor/handlers

        m render
            return 
                div 
                    @ style {MonacoEditor_container_style}
                    < ResizeDetector 
                        @ onResize {this._handleResize}
                        div 
                            @ ref {this._node}
                            @ style {MonacoEditor_editor_style}