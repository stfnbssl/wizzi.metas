$group

    $$ TODO For ittf(s) documents, user SHOULD BE set in the global Artifact Generation Context

    ${'$'}
        var opt = {
        }
		for (var i = 0; i < wzCtx.webapis.length; i++) {
			var api = wzCtx.webapis[i];
			api._id = api.method + _.replace(_.replace(api.url, ':', '_'), '/', '_');
		}

    layouts/site${'('} &opt )

        ${'$'}append head-styles-2
            $$ css ./styles.css.ittf
            style

                < body
                    font-size 15px

                < li
                    list-style none
                < a
                    text-decoration none

                . d-container
                    display flex

                . d-left-aside
                    position fixed
                    top 100px
                    bottom 0
                    height 100%
                    left 0
                    min-width 20rem
                    overflow auto
                    padding-right 1rem
                    < ul
                        < li
                            padding 2px
                            < a
                                color #000
                                & :hover
                                    color #fff
                                    background-color #555

                . d-main-content
                    position fixed
                    top 100px
                    bottom 0
                    height 100%
                    left 20rem
                    padding-left 1rem
                    overflow auto

                . d-right-aside
                    position fixed
                    top 100px
                    bottom 0
                    height 100%
                    right 0
                    max-width 40rem
                    overflow auto

                . d-api-prop
                    display flex
                    padding 0.5rem 1rem
                    font-size 1.2rem

                . d-api-prop-name
                    min-width 12rem
                    font-style italic

                . d-api-prop-value
                    font-weight bold

                . d-params-panel
                    margin-top 0.2rem
                    border 1px solid #ddd

                . d-param
                    display flex
                    margin 0.2rem 0
                    width 100%

                . d-param-label
                    min-width 10rem
                    padding 0.2rem
                    background-color #ddd

                . d-param-input
                    padding 0.2rem
                    width 100%
                    < input
                        padding 0.2rem
                        width 32rem
                        font-weight 700


        . d-container
            . d-left-aside
                ul
                    ${'$'}foreach api in wzCtx.webapis
                        li
                            a ${'$'}{api.title}
                                href #api_id_${'$'}{api.url}
            . d-main-content
                ${'$'}foreach api in wzCtx.webapis
                    . d-api
                        id api_id_${'$'}{api.url}
                        h3 ${'$'}{api.title}
                        d-prop${'('} method, ${'$'}{api.method}
                        d-prop${'('} url, ${'$'}{api.url}

                        ${'$'}if api.parameters.length > 0
                            h4 Parameters
                            . d-params-panel
                                ${'$'}foreach p in api.parameters
                                    d-control${'('} ${'$'}{p.type},
                                        \b param_${'$'}{ api._id + '_' + p.name },
                                        \b ${'$'}{p.label},
                                        \b ${'$'}{_.replace(p.demoValue, ',', '${'$'}')}

                        . d-buttons
                            button Exec
                                id btn_${'$'}{ api._id }
                    hr
            . d-right-aside
                . container
                    pre
                        code
                            id output

        ${'$'}append body-scripts
            js /public/wz.js
            script
                module
                    var btn
                    ${'$'}foreach api in wzCtx.webapis
                        set btn = document.querySelector("#" + 'btn_${'$'}{ api._id }')
                        _ btn.addEventListener
                            @ 'click'
                            function
                                ${'$'}if api.method == 'get'
                                    var url = '${'$'}{api.url}'
                                    ${'$'}foreach p in api.parameters
                                        var param_${'$'}{p.name} = get_value('param_${'$'}{ api._id + '_' + p.name }')
                                        ${'$'}if p.paramType == 'url'
                                            set url = url.replaceAll(':${'$'}{p.name}', encodeURIComponent(param_${'$'}{p.name}))
                                        ${'$'}else
                                            ${'$'}if p_index == 0
                                                set url += '?${'$'}{p.name}=' + param_${'$'}{p.name}
                                            ${'$'}else
                                                set url += '&${'$'}{p.name}=' + param_${'$'}{p.name}
                                    _ exec_get
                                        @ url
                                ${'$'}elif api.method == 'post' || api.method == 'put'
                                    var url = '${'$'}{api.url}'
                                    var payload = {}
                                    ${'$'}foreach p in api.parameters
                                        var param_${'$'}{p.name} = get_value('param_${'$'}{ api._id + '_' + p.name }')
                                        ${'$'}if p.paramType == 'url'
                                            set url = url.replaceAll(':${'$'}{p.name}', encodeURIComponent(param_${'$'}{p.name}))
                                        ${'$'}else
                                            ${'$'}if p.type == 'object'
                                                $$ loog 'JSON.parse(param_${'$'}{p.name})', param_${'$'}{p.name}
                                                set payload['${'$'}{p.name}'] = JSON.parse(param_${'$'}{p.name})
                                            ${'$'}else
                                                set payload['${'$'}{p.name}'] = param_${'$'}{p.name}
                                    _ exec_with_payload
                                        @ '${'$'}{api.method}'
                                        @ url
                                        @ payload 
                                ${'$'}else
                                    _ alert('${'$'}{api.method} ${'$'}{api.url}')

                    function get_value
                        param id
                        var el = document.querySelector("#" + id)
                        return el.value

                    function exec_get
                        param url
                        param payload
                        $$ loog 'url', url
                        var output = document.querySelector("#output")
                        _ fetch
                            @ url
                            ._ then
                                =>
                                    param response
                                    if !response.ok
                                        throw Error(response.statusText)
                                    return response.json()
                            ._ then
                                =>
                                    param json
                                    set output.className = 'container'
                                    set output.innerHTML = wz.escapeHtml(JSON.stringify(json, null, 2))
                                    $$ loog 'exec_.response.json', json
                                    $*
                                    if getApiId === "/api/studio/document" || getApiId === "/api/studio/fragment"
                                        set document.getElementById('content').value = json.data.data
                                    *$
                            ._ catch
                                function 
                                    param err
                                    $$ loog 'exec_.response.err', err
                                    set output.className = 'container text-danger'
                                    set output.innerHTML = err && err.constructor && err.constructor.name === "Object" ? JSON.stringify(err, null, 2) : err

                    function exec_with_payload
                        param method
                        param url
                        param payload 
                        $$ loog 'url', url
                        $$ loog 'payload ', payload 
                        var output = document.querySelector("#output")
                        _ fetch
                            @ url
                            {
                                @ method method
                                { headers
                                    @ 'Accept' 'application/json'
                                    @ 'Content-Type' 'application/json'
                                @ body JSON.stringify(payload)
                            ._ then
                                =>
                                    param response
                                    return response.json()
                            ._ then
                                =>
                                    param json
                                    $$ loog 'exec_with_payload.response.json', json
                                    set output.className = 'container'
                                    set output.innerHTML = wz.escapeHtml(JSON.stringify(json, null, 2))
                            ._ catch
                                function 
                                    param err
                                    set output.className = 'container text-danger'
                                    set output.innerHTML = err.message || JSON.stringify({ err: err.error }, null, 2)