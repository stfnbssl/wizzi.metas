md
    h1 
        + With Docker Compose
    p 
        + This example contains everything needed to get a Next.js development and production environment up and running with Docker Compose.
    br 
    h2 
        + Benefits of Docker Compose
    ul 
        li 
            + Develop locally without Node.js or TypeScript installed âœ¨
        li 
            + Easy to run, consistent development environment across macOS, Windows, and Linux teams
        li 
            + Run multiple Next.js apps, databases, and other microservices in a single deployment
        li 
            + Multistage builds combined with
            a 
                href https://nextjs.org/docs/advanced-features/output-file-tracing#automatically-copying-traced-files
                title 
                + Output Standalone
            + outputs up to 85% smaller apps (Approximately 110 MB compared to 1 GB with create-next-app)
        li 
            + Easy configuration with YAML files
    br 
    h2 
        + How to use
    p 
        + Execute
        a 
            href https://github.com/vercel/next.js/tree/canary/packages/create-next-app
            title 
            code create-next-app
        + with
        a 
            href https://docs.npmjs.com/cli/init
            title 
            + npm
        + ,
        a 
            href https://yarnpkg.com/lang/en/docs/cli/create/
            title 
            + Yarn
        + , or
        a 
            href https://pnpm.io
            title 
            + pnpm
        + to bootstrap the example:
    br 
    code 
        lang bash
        + npx create-next-app --example with-docker-compose with-docker-compose-app
    br 
    code 
        lang bash
        + yarn create next-app --example with-docker-compose with-docker-compose-app
    br 
    code 
        lang bash
        + pnpm create next-app --example with-docker-compose with-docker-compose-app
    br 
    p 
        + Optionally, after the installation is complete:
    br 
    ul 
        li 
            + Run
            code cd next-app
            + , then run
            code npm install
            + or
            code yarn install
            + or
            code pnpm install
            + to generate a lockfile.
    br 
    p 
        + It is recommended to commit a lockfile to version control. Although the example will work without one, build errors are more likely to occur when using the latest version of all dependencies. This way, we&#39;re always using a known good configuration to develop and run in production.
    br 
    h2 
        + Prerequisites
    p 
        + Install
        a 
            href https://docs.docker.com/get-docker
            title 
            + Docker Desktop
        + for Mac, Windows, or Linux. Docker Desktop includes Docker Compose as part of the installation.
    br 
    h2 
        + Development
    p 
        + First, run the development server:
    br 
    code 
        lang bash
        + # Create a network, which allows containers to communicate
        + # with each other, by using their container name as a hostname
        + docker network create my_network
        + 
        + # Build dev
        + # Note: Keep v1 command until "Use Docker Compose v2" is enabled by default for Docker Desktop for Linux
        + # Docker aliases `docker-compose` (v1 command) to `docker compose` (v2 command), but not the other way around
        + docker-compose -f docker-compose.dev.yml build
        + 
        + # Up dev
        + docker-compose -f docker-compose.dev.yml up
    br 
    p 
        + Open
        a 
            href http://localhost:3000
            title 
            + http://localhost:3000
        + with your browser to see the result.
    br 
    p 
        + You can start editing the page by modifying
        code pages/index.tsx
        + . The page auto-updates as you edit the file.
    br 
    h2 
        + Production
    p 
        + Multistage builds are highly recommended in production. Combined with the Next
        a 
            href https://nextjs.org/docs/advanced-features/output-file-tracing#automatically-copying-traced-files
            title 
            + Output Standalone
        + feature, only
        code node_modules
        + files required for production are copied into the final Docker image.
    br 
    p 
        + First, run the production server (Final image approximately 110 MB).
    br 
    code 
        lang bash
        + # Create a network, which allows containers to communicate
        + # with each other, by using their container name as a hostname
        + docker network create my_network
        + 
        + # Build prod
        + docker-compose -f docker-compose.prod.yml build
        + 
        + # Up prod in detached mode
        + docker-compose -f docker-compose.prod.yml up -d
    br 
    p 
        + Alternatively, run the production server without without multistage builds (Final image approximately 1 GB).
    br 
    code 
        lang bash
        + # Create a network, which allows containers to communicate
        + # with each other, by using their container name as a hostname
        + docker network create my_network
        + 
        + # Build prod without multistage
        + docker-compose -f docker-compose.prod-without-multistage.yml build
        + 
        + # Up prod without multistage in detached mode
        + docker-compose -f docker-compose.prod-without-multistage.yml up -d
    br 
    p 
        + Open
        a 
            href http://localhost:3000
            title 
            + http://localhost:3000
        + .
    br 
    h2 
        + Useful commands
    code 
        lang bash
        + # Stop all running containers
        + docker kill $(docker ps -aq) && docker rm $(docker ps -aq)
        + 
        + # Free space
        + docker system prune -af --volumes
