module
    kind react
    :import-type 
        @ GetStaticProps
        @ NextPage
        from 'next'
    import Head from 'next/head'
    import 
        @ useRouter
        from 'next/router'
    import Carousel from '../../components/Carousel'
    import getResults from '../../utils/cachedImages'
    import cloudinary from '../../utils/cloudinary'
    import getBase64ImageUrl from '../../utils/generateBlurPlaceholder'
    :import-type 
        @ ImageProps
        from '../../utils/types'
    const Home
        :ref NextPage
        =
            => 
                { 
                    @ currentPhoto
                    :{ 
                        :p currentPhoto
                            :ref ImageProps
                const router = useRouter()
                const 
                    { 
                        @ photoId
                    = router.query
                let index = Number(photoId)
                const currentPhotoUrl
                    `lit 
                        + https://res.cloudinary.com/
                        @ process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME
                        + /image/upload/c_scale,w_2560/
                        @ currentPhoto.public_id
                        + .
                        @ currentPhoto.format
                        + 
                return 
                    < React.Fragment
                        < Head 
                            < title 
                                + Next.js Conf 2022 Photos
                            meta 
                                @ property "og:image"
                                @ content {currentPhotoUrl}
                            meta 
                                @ name "twitter:image"
                                @ content {currentPhotoUrl}
                        main 
                            @ className "mx-auto max-w-[1960px] p-4"
                            < Carousel 
                                @ currentPhoto {currentPhoto}
                                @ index {index}
    export-default Home
    export 
        const getStaticProps
            :ref GetStaticProps
            =
                async=> 
                    param context
                    const results
                        await 
                            _ getResults()
                    let reducedResults
                        :[ 
                            :ref ImageProps
                        = []
                    let i = 0
                    for 
                        left
                            let result
                        of results.resources
                        _ reducedResults.push
                            { 
                                @ id i
                                @ height result.height
                                @ width result.width
                                @ public_id result.public_id
                                @ format result.format
                        set i++
                    const currentPhoto
                        _ reducedResults.find
                            => 
                                param img
                                set img.id === Number(context.params.photoId)
                    set currentPhoto.blurDataUrl =
                        await 
                            _ getBase64ImageUrl(currentPhoto)
                    return 
                        { 
                            { props
                                @ currentPhoto
    export 
        async-function getStaticPaths
            const results
                await 
                    _ cloudinary.v2.search.expression
                        `lit 
                            + folder:
                            @ process.env.CLOUDINARY_FOLDER
                            + /*
                        ._ sort_by
                            @ 'public_id'
                            @ 'desc'
                        ._ max_results
                            @ 400
                        ._ execute
            let fullPaths = []
            for let i = 0; i < results.resources.length; i++
                _ fullPaths.push
                    { 
                        { params
                            @ photoId i.toString()
            return 
                { 
                    @ paths fullPaths
                    @ fallback false
