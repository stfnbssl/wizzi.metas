module
    kind react
    import 
        @ IncomingMessage
        @ ServerResponse
        from 'http'
    import 
        @ useMemo
        from 'react'
    import 
        @ ApolloClient
        @ InMemoryCache
        @ NormalizedCacheObject
        from '@apollo/client'
    import resolvers from './resolvers'
    import typeDefs from './schema'
    let apolloClient
        :union 
            :ref ApolloClient
                :param 
                    :ref NormalizedCacheObject
            :undefined 
    export 
        :type ResolverContext
            :{ 
                :p req
                    :optional 
                    :ref IncomingMessage
                :p res
                    :optional 
                    :ref ServerResponse
    function createIsomorphLink
        param context
            :ref ResolverContext
            = 
        if typeof window === 'undefined'
            const 
                { 
                    @ SchemaLink
                = require('@apollo/client/link/schema')
            const 
                { 
                    @ makeExecutableSchema
                = require('@graphql-tools/schema')
            const schema
                _ makeExecutableSchema
                    { 
                        @ typeDefs
                        @ resolvers
            return 
                new SchemaLink
                    { 
                        @ schema
                        @ context
        else
            const 
                { 
                    @ HttpLink
                = require('@apollo/client')
            return 
                new HttpLink
                    { 
                        @ uri '/api/graphql'
                        @ credentials 'same-origin'
    function createApolloClient
        param context
            :ref ResolverContext
            :optional 
        return 
            new ApolloClient
                { 
                    @ ssrMode typeof window === 'undefined'
                    @ link createIsomorphLink(context)
                    @ cache new InMemoryCache()
    export 
        function initializeApollo
            param initialState
                :any 
                = null
            param context
                :ref ResolverContext
                :optional 
                # Pages with Next.js data fetching methods, like `getStaticProps`, can send
                # a custom context which will be used by `SchemaLink` to server render pages
            const _apolloClient = apolloClient ?? createApolloClient(context)
                # If your page has Next.js data fetching methods that use Apollo Client, the initial state
                # get hydrated here
            if initialState
                _ _apolloClient.cache.restore(initialState)
            if typeof window === 'undefined'
                return _apolloClient
            if !apolloClient
                set apolloClient = _apolloClient
            return _apolloClient
    export 
        function useApollo
            param initialState
                :any 
            const store
                _ useMemo
                    => 
                        _ initializeApollo(initialState)
                    [ 
                        @ initialState
            return store
