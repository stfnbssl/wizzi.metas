module
    kind react
    import Head from 'next/head'
    import Image from 'next/image'
    import React
        @ ChangeEvent
        @ useEffect
        @ useRef
        @ useState
        from 'react'
    import Card from '../../components/Card'
    import 
        @ VideoUploader
        @ VideoUploadResponse
        from '@api.video/video-uploader'
    import Status from '../../components/Status'
    import 
        @ useRouter
        from 'next/router'
    export-default 
        function Uploader
            const [uploadToken, setUploadToken]
                _ useState
                    :param 
                        :union 
                            :{ 
                                :p token
                                    :string 
                            :undefined 
                    @ undefined
            const [uploadProgress, setUploadProgress]
                _ useState
                    :param 
                        :union 
                            :number 
                            :undefined 
                    @ undefined
            const [video, setVideo]
                _ useState
                    :param 
                        :union 
                            :ref VideoUploadResponse
                            :undefined 
                    @ undefined
            const [ready, setReady]
                _ useState
                    :param boolean
                    @ false
            const [playable, setPlayable]
                _ useState
                    :param boolean
                    @ false
            const inputRef
                _ useRef
                    :param 
                        :ref HTMLInputElement
                    @ null
            const router = useRouter()
            _ useEffect
                => 
                    _ fetch('/api/uploadToken').then
                        => 
                            param res
                            _ res.json()
                        ._ then
                            => 
                                param res
                                _ setUploadToken(res)
                [ 
            const handleSelectFile
                async=> 
                    param e
                        :ref ChangeEvent
                            :param 
                                :ref HTMLInputElement
                    :return
                        :ref Promise
                            :param void
                    _ e.preventDefault()
                    if !uploadToken || !uploadToken.token
                        return 
                    const clearState
                        => 
                            :return
                                :void 
                            _ setReady(false)
                            _ setPlayable(false)
                            _ setVideo(undefined)
                            _ setUploadProgress(undefined)
                    _ clearState()
                    if !e.target.files || !uploadToken
                        return 
                    const file = e.target.files[0]
                    const uploader
                        new VideoUploader
                            { 
                                @ file
                                @ uploadToken uploadToken.token
                    _ uploader.onProgress
                        => 
                            param e
                            _ setUploadProgress(Math.round((e.uploadedBytes * 100) / e.totalBytes))
                    _ uploader.onPlayable
                        => 
                            _ setPlayable(true)
                            _ setReady(true)
                    const video
                        await 
                            _ uploader.upload()
                    _ setVideo(video)
            const handleNavigate
                => 
                    :return
                        :void 
                    if !video
                        return 
                    _ router.push
                        `lit 
                            + /videos/
                            @ video.videoId
                            + ?uploaded=1
            return 
                div 
                    @ className "global-container"
                    < Head 
                        < title 
                            + Video Uploader
                        meta 
                            @ name "description"
                            @ content "Generated by create next app & created by api.video"
                        link 
                            @ rel "icon"
                            @ href "/favicon.ico"
                    header 
                        span 
                            + api.video uploader
                        + 🚀
                    main 
                        div 
                            @ className "texts-container"
                            p 
                                + Hey fellow dev! 👋
                                br 
                                + Welcome to this basic example of video uploader provided by
                                + {' '}
                                a 
                                    @ href "https://api.video"
                                    @ target "_blank"
                                    @ rel "noopener noreferrer"
                                    + api.video
                                + {' '}
                                + and powered by
                                + {' '}
                                a 
                                    @ href "https://nextjs.org/"
                                    @ target "_blank"
                                    @ rel "noopener noreferrer"
                                    + Vercel & Next.js
                                + .
                            p 
                                + api.video provides APIs and clients to handle all your video needs.
                                br 
                                + This app is built with the
                                + {' '}
                                a 
                                    @ href "https://github.com/apivideo/api.video-nodejs-client"
                                    @ target "_blank"
                                    @ rel "noopener noreferrer"
                                    + api.video Node.js client
                                + {' '}
                                + and the
                                + {' '}
                                a 
                                    @ href "https://github.com/apivideo/api.video-typescript-uploader"
                                    @ target "_blank"
                                    @ rel "noopener noreferrer"
                                    + Typescript uploader
                                + .
                            p 
                                + You can
                                + {' '}
                                a 
                                    @ href "https://github.com/vercel/next.js/tree/canary/examples/with-apivideo-upload"
                                    @ target "_blank"
                                    @ rel "noopener noreferrer"
                                    + check the source code on GitHub
                                + .
                            p 
                                + Please add a video to upload and let the power of the API do the&lf;            rest 🎩
                        { 
                            iif !uploadProgress
                                then
                                    < React.Fragment
                                        button 
                                            @ className "upload"
                                            @ onClick
                                                => 
                                                    _ inputRef.current?.click?.()
                                            + Select a file
                                        input 
                                            @ ref {inputRef}
                                            @ hidden
                                            @ type "file"
                                            @ accept "mp4"
                                            @ onChange {handleSelectFile}
                                else
                                    < React.Fragment
                                        div 
                                            @ className "status-container"
                                            < Status 
                                                @ title "Uploaded"
                                                @ done {uploadProgress >= 100}
                                            span 
                                            < Status 
                                                @ title "Ingested"
                                                @ done {uploadProgress >= 100}
                                            span 
                                            < Status 
                                                @ title "Playable"
                                                @ done {playable}
                                        < Card 
                                            @ content "https://ws.api.video/videos/{videoId}/source"
                                            @ url "https://docs.api.video/reference/post_videos-videoid-source"
                                            @ method "post"
                        { 
                            && 
                                + ready && video
                                button 
                                    @ className "upload"
                                    @ onClick {handleNavigate}
                                    + Watch it 🍿
                    footer 
                        a 
                            @ href "https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
                            @ target "_blank"
                            @ rel "noopener noreferrer"
                            + Powered by
                            + {' '}
                            span 
                                < Image 
                                    @ src "/vercel.svg"
                                    @ alt "Vercel Logo"
                                    @ width {72}
                                    @ height {16}
                        span 
                            + and
                        a 
                            @ href "https://api.video"
                            @ target "_blank"
                            @ rel "noopener noreferrer"
                            + api.video
