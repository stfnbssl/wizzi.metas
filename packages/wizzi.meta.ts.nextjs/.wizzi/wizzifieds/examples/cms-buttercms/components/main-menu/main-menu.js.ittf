module
    kind react
    import 
        @ useEffect
        @ useState
        @ useRef
        from 'react'
    import MainMenuLink from './main-menu-link'
    export-default 
        function ManiMenu
            { 
                @ mainMenuLinks
            const [activeMenuLink, setActiveMenuLink]
                _ useState
                    iif mainMenuLinks.length
                        then mainMenuLinks[0].url
                        else ''
            function highlightLinks
                const sections = document.querySelectorAll('.page-scroll')
                const scrollPos = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop
                _ sections.forEach
                    => 
                        param currLink
                        const val = currLink.getAttribute('href').slice(1)
                        if val[0] !== '#'
                            return 
                        const refElement = document.querySelector(val)
                        if !refElement
                            return 
                        const scrollTopMinus = scrollPos + 73
                        if refElement.offsetTop <= scrollTopMinus && refElement.offsetTop + refElement.offsetHeight > scrollTopMinus
                            _ setActiveMenuLink(val)
            _ useEffect
                => 
                    _ window.addEventListener('scroll', highlightLinks)
                    return 
                        => 
                            _ window.removeEventListener('scroll', highlightLinks)
                [ 
            const [isMenuActive, setMenuActive] = useState(false)
            const menuLinksEl = useRef(null)
            function inactivateMenu
                _ setMenuActive(false)
                if menuLinksEl.current
                    _ menuLinksEl.current.classList.remove('show')
            return 
                < React.Fragment
                    button 
                        @ className
                            `lit 
                                + navbar-toggler&nbsp;
                                iif isMenuActive
                                    then 'active'
                                    else ''
                                + 
                        @ type "button"
                        @ data-bs-toggle "collapse"
                        @ data-bs-target "#navbarSupportedContent"
                        @ aria-controls "navbarSupportedContent"
                        @ aria-expanded "false"
                        @ aria-label "Toggle navigation"
                        @ onClick
                            => 
                                _ setMenuActive(!isMenuActive)
                        span 
                            @ className "toggler-icon"
                        span 
                            @ className "toggler-icon"
                        span 
                            @ className "toggler-icon"
                    div 
                        @ className "collapse navbar-collapse sub-menu-bar"
                        @ ref {menuLinksEl}
                        @ id "navbarSupportedContent"
                        div 
                            @ className "ms-auto"
                            ul 
                                @ id "nav"
                                @ className "navbar-nav ms-auto"
                                { 
                                    _ mainMenuLinks.map
                                        => 
                                            param navLink
                                            < MainMenuLink 
                                                @ key {navLink.url}
                                                @ url {navLink.url}
                                                @ label {navLink.label}
                                                @ active {navLink.url === activeMenuLink}
                                                @ callbackOnClick {inactivateMenu}
