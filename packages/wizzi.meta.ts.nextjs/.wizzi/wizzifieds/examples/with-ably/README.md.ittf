md
    h1 
        + Realtime Edge Messaging with
        a 
            href https://ably.com/
            title 
            + Ably
    p 
        b 
            + Demo:
        + 
        a 
            href https://next-and-ably.vercel.app/
            title 
            + https://next-and-ably.vercel.app/
    br 
    p 
        + Add realtime data and interactive multi-user experiences to your Next.js apps with
        a 
            href https://ably.com/
            title 
            + Ably
        + , without the infrastructure overhead.
    br 
    p 
        + Use Ably in your Next.js application using idiomatic, easy to use hooks.
    br 
    p 
        + Using this demo you can:
    br 
    ul 
        li 
            a 
                href https://ably.com/docs/realtime/messages
                title 
                + Send and receive
            + realtime messages
        li 
            + Get notifications of
            a 
                href https://ably.com/docs/realtime/presence
                title 
                + user presence
            + on channels
        li 
            + Send
            a 
                href https://ably.com/docs/api/realtime-sdk/presence#update
                title 
                + presence updates
            + when a new client joins or leaves the demo
    br 
    p 
        + This demo is uses the
        a 
            href https://www.npmjs.com/package/@ably-labs/react-hooks
            title 
            + Ably React Hooks package
        + , a simplified syntax for interacting with Ably, which manages the lifecycle of the Ably SDK instances for you taking care to subscribe and unsubscribe to channels and events when your components re-render).
    br 
    h2 
        + Deploy your own
    p 
        + Deploy the example using
        a 
            href https://vercel.com?utm_source=github&utm_medium=readme&utm_campaign=next-example
            title 
            + Vercel
        + or preview live with
        a 
            href https://stackblitz.com/github/vercel/next.js/tree/canary/examples/with-ably
            title 
            + StackBlitz
    br 
    p 
        b 
            + You will need an Ably API key to run this demo,
            a 
                href #ably-setup
                title 
                + see below for details
    br 
    p 
        a 
            href https://vercel.com/new/clone?repository-url=https://github.com/vercel/next.js/tree/canary/examples/with-ably&project-name=with-ably&repository-name=with-ably
            title 
            img 
                href https://vercel.com/button
                title 
    br 
    h2 
        + How to use
    p 
        + Execute
        a 
            href https://github.com/vercel/next.js/tree/canary/packages/create-next-app
            title 
            code create-next-app
        + with
        a 
            href https://docs.npmjs.com/cli/init
            title 
            + npm
        + ,
        a 
            href https://yarnpkg.com/lang/en/docs/cli/create/
            title 
            + Yarn
        + , or
        a 
            href https://pnpm.io
            title 
            + pnpm
        + to bootstrap the example:
    br 
    code 
        lang bash
        + npx create-next-app --example with-ably with-ably-app
    br 
    code 
        lang bash
        + yarn create next-app --example with-ably with-ably-app
    br 
    code 
        lang bash
        + pnpm create next-app --example with-ably with-ably-app
    br 
    p 
        + Deploy it to the cloud with
        a 
            href https://vercel.com/new?utm_source=github&utm_medium=readme&utm_campaign=next-example
            title 
            + Vercel
        + (
        a 
            href https://nextjs.org/docs/deployment
            title 
            + Documentation
        + ).
    br 
    p 
        b 
            + When deployed, ensure that you set your environment variables (the Ably API key and the deployed Vercel API root) in your Vercel settings
    br 
    h2 
        + Notes
    h3 
        + Ably Setup
    p 
        + In order to send and receive messages you will need an Ably API key.
        + If you are not already signed up, you can
        a 
            href https://www.ably.com/signup
            title 
            + sign up now for a free Ably account
        + . Once you have an Ably account:
    br 
    ul 
        ordered 
        li 
            + Log into your app dashboard.
        li 
            + Under
            b 
                + “Your apps”
            + , click on
            b 
                + “Manage app”
            + for any app you wish to use for this tutorial, or create a new one with the “Create New App” button.
        li 
            + Click on the
            b 
                + “API Keys”
            + tab.
        li 
            + Copy the secret
            b 
                + “API Key”
            + value from your Root key.
        li 
            + Create a .env file in the root of the demo repository
        li 
            + Paste the API key into your new env file, along with a env variable for your localhost:
    br 
    code 
        lang bash
        + ABLY_API_KEY=your-ably-api-key:goes-here
        + API_ROOT=http://localhost:3000
    br 
    h3 
        + How it Works/Using Ably
    h4 
        + Configuration
    p 
        a 
            href pages/_app.js
            title 
            + pages/
            escape 
            + app.js
        + is where the Ably SDK is configured:
    br 
    code 
        lang js
        + import { configureAbly } from '@ably-labs/react-hooks'
        + 
        + const prefix = process.env.API_ROOT || ''
        + const clientId =
        + Math.random().toString(36).substring(2, 15) +
        + Math.random().toString(36).substring(2, 15)
        + 
        + configureAbly({
        + authUrl: `${prefix}/api/createTokenRequest?clientId=${clientId}`,
        + clientId: clientId,
        + })
        + 
        + function MyApp({ Component, pageProps }) {
        + return <Component {...pageProps} />
        + }
        + 
        + export default MyApp
    br 
    p 
        code configureAbly
        + matches the method signature of the Ably SDK - and requires either a string or a
        a 
            href https://ably.com/docs/api/realtime-sdk#client-options
            title 
            + AblyClientOptions
        + object. You can use this configuration object to setup your
        a 
            href https://ably.com/docs/core-features/authentication#token-authentication
            title 
            + tokenAuthentication
        + . If you want to use the usePresence function, you&#39;ll need to explicitly provide a
        code clientId
        + .
    br 
    p 
        + You can do this anywhere in your code before the rest of the library is used.
    br 
    h4 
        + useChannel (Publishing and Subscribing to Messages)
    p 
        + The
        code useChannel
        + hook lets you subscribe to a channel and receive messages from it:
    br 
    code 
        lang js
        + import { useState } from 'react'
        + import { useChannel } from '@ably-labs/react-hooks'
        + 
        + export default function Home() {
        + const [channel] = useChannel('your-channel', async (message) => {
        + console.log('Received Ably message', message)
        + })
        + }
    br 
    p 
        + Every time a message is sent to
        code your-channel
        + it will be logged to the console. You can do whatever you need to with those messages.
    br 
    h5 
        + Publishing a message
    p 
        + The
        code channel
        + instance returned by
        code useChannel
        + can be used to send messages to the channel. It is a regular Ably JavaScript SDK
        code channel
        + instance.
    br 
    code 
        lang javascript
        + channel.publish('test-message', { text: 'message text' })
    br 
    h4 
        + usePresence
    p 
        + The
        code usePresence
        + hook lets you subscribe to presence events on a channel - this will allow you to get notified when a user joins or leaves the channel. The presence data is automatically updated and your component re-rendered when presence changes:
    br 
    code 
        lang js
        + import { useState } from 'react'
        + import { usePresence } from '@ably-labs/react-hooks'
        + 
        + export default function Home() {
        + const [presenceData, updateStatus] = usePresence('your-channel-name')
        + 
        + const presentClients = presenceData.map((msg, index) => (
        + <li key={index}>
        + {msg.clientId}: {msg.data}
        + </li>
        + ))
        + 
        + return <ul>{presentClients}</ul>
        + }
    br 
    p 
        + You can read more about the hooks available with the Ably Hooks package on the
        a 
            href https://www.npmjs.com/package/@ably-labs/react-hooks
            title 
            + @ably-labs/ably-hooks documentation on npm
        + .
