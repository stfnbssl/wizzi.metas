module
    kind react
    :import-type 
        @ DataModelFromSchemaDefinition
        from "convex/schema"
        #
            # eslint-disable
        #
            # *
            # * Generated data model types.
            # *
            # * THIS CODE IS AUTOMATICALLY GENERATED.
            # *
            # * Generated by convex@0.12.0.
            # * To regenerate, run `npx convex codegen`.
            # * @module
            # 
    :import-type 
        @ DocumentByName
        @ TableNamesInDataModel
        from "convex/server"
    import 
        @ GenericId
        @ GenericIdConstructor
        from "convex/values"
    import schema from "../schema"
        #
            # *
            # * The names of all of your Convex tables.
            # 
    export 
        :type TableNames
            :ref TableNamesInDataModel
                :param 
                    :ref DataModel
        #
            # *
            # * The names of all of your Convex tables.
            # 
        #
            # *
            # * The type of a document stored in Convex.
            # *
            # * @typeParam TableName - A string literal type of the table name (like "users").
            # 
    export 
        :type Doc
            :< TableName
                :ref TableNames
            :ref DocumentByName
                :param 
                    :ref DataModel
                :param 
                    :ref TableName
        #
            # *
            # * The type of a document stored in Convex.
            # *
            # * @typeParam TableName - A string literal type of the table name (like "users").
            # 
        #
            # *
            # * An identifier for a document in Convex.
            # *
            # * Convex documents are uniquely identified by their `Id`, which is accessible
            # * on the `_id` field. To learn more, see [Document IDs](https://docs.convex.dev/using/document-ids).
            # *
            # * Documents can be loaded using `db.get(id)` in query and mutation functions.
            # *
            # * **Important**: Use `myId.equals(otherId)` to check for equality.
            # * Using `===` will not work because two different instances of `Id` can refer
            # * to the same document.
            # *
            # * @typeParam TableName - A string literal type of the table name (like "users").
            # 
    export 
        :type Id
            :< TableName
                :ref TableNames
            :ref GenericId
                :param 
                    :ref TableName
        #
            # *
            # * An identifier for a document in Convex.
            # *
            # * Convex documents are uniquely identified by their `Id`, which is accessible
            # * on the `_id` field. To learn more, see [Document IDs](https://docs.convex.dev/using/document-ids).
            # *
            # * Documents can be loaded using `db.get(id)` in query and mutation functions.
            # *
            # * **Important**: Use `myId.equals(otherId)` to check for equality.
            # * Using `===` will not work because two different instances of `Id` can refer
            # * to the same document.
            # *
            # * @typeParam TableName - A string literal type of the table name (like "users").
            # 
        #
            # *
            # * An identifier for a document in Convex.
            # *
            # * Convex documents are uniquely identified by their `Id`, which is accessible
            # * on the `_id` field. To learn more, see [Document IDs](https://docs.convex.dev/using/document-ids).
            # *
            # * Documents can be loaded using `db.get(id)` in query and mutation functions.
            # *
            # * **Important**: Use `myId.equals(otherId)` to check for equality.
            # * Using `===` will not work because two different instances of `Id` can refer
            # * to the same document.
            # 
    export 
        :declare 
            const Id
                :ref GenericIdConstructor
                    :param 
                        :ref TableNames
        #
            # *
            # * An identifier for a document in Convex.
            # *
            # * Convex documents are uniquely identified by their `Id`, which is accessible
            # * on the `_id` field. To learn more, see [Document IDs](https://docs.convex.dev/using/document-ids).
            # *
            # * Documents can be loaded using `db.get(id)` in query and mutation functions.
            # *
            # * **Important**: Use `myId.equals(otherId)` to check for equality.
            # * Using `===` will not work because two different instances of `Id` can refer
            # * to the same document.
            # 
        #
            # *
            # * A type describing your Convex data model.
            # *
            # * This type includes information about what tables you have, the type of
            # * documents stored in those tables, and the indexes defined on them.
            # *
            # * This type is used to parameterize methods like `queryGeneric` and
            # * `mutationGeneric` to make them type-safe.
            # 
    export 
        :type DataModel
            :ref DataModelFromSchemaDefinition
                :param 
                    :typeof schema
        #
            # *
            # * A type describing your Convex data model.
            # *
            # * This type includes information about what tables you have, the type of
            # * documents stored in those tables, and the indexes defined on them.
            # *
            # * This type is used to parameterize methods like `queryGeneric` and
            # * `mutationGeneric` to make them type-safe.
            # 
