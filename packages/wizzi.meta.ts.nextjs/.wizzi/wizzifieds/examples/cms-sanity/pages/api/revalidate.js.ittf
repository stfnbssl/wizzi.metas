module
    kind react
    import 
        @ isValidSignature
        @ SIGNATURE_HEADER_NAME
        from '@sanity/webhook'
    import 
        @ sanityClient
        from '../../lib/sanity.server'
        # Next.js will by default parse the body, which can lead to invalid signatures
    export 
        const config
            { 
                { api
                    @ bodyParser false
        # Next.js will by default parse the body, which can lead to invalid signatures
    const AUTHOR_UPDATED_QUERY
        `lit 
            + &lf;
            + &nbsp; *[_type == "author" && _id == $id] {&lf;
            + &nbsp;   "slug": *[_type == "post" && references(^._id)].slug.current&lf;
            + &nbsp; }["slug"][]
            #
                # groq
    const POST_UPDATED_QUERY
        `lit 
            + *[_type == "post" && _id == $id].slug.current
            #
                # groq
    const getQueryForType
        => 
            param type
            switch type
                case 'author'
                    return AUTHOR_UPDATED_QUERY
                case 'post'
                    return POST_UPDATED_QUERY
                default 
                    throw 
                        new TypeError
                            `lit 
                                + Unknown type:&nbsp;
                                @ type
                                + 
    const log
        => 
            param msg
            param error
            _ console
                .[
                    iif error
                        then 'error'
                        else 'log'
                (
                    `lit 
                        + [revalidate]&nbsp;
                        @ msg
                        + 
    async-function readBody
        param readable
        const chunks = []
        for 
            left
                const chunk
            of readable
            await
            _ chunks.push
                iif typeof chunk === 'string'
                    then Buffer.from(chunk)
                    else chunk
        return Buffer.concat(chunks).toString('utf8')
    export-default 
        async-function revalidate
            param req
            param res
            const signature = req.headers[SIGNATURE_HEADER_NAME]
            const body
                await 
                    _ readBody(req)
                # Read the body into a string
            if !isValidSignature(body, signature, process.env.SANITY_REVALIDATE_SECRET?.trim?.())
                const invalidSignature = 'Invalid signature'
                _ log(invalidSignature, true)
                _ res.status(401).json
                    { 
                        @ success false
                        @ message invalidSignature
                return 
            const jsonBody = JSON.parse(body)
            const 
                { 
                    @ _id id
                    @ _type
                = jsonBody
            if typeof id !== 'string' || !id
                const invalidId = 'Invalid _id'
                _ log(invalidId, true)
                return 
                    _ res.status(400).json
                        { 
                            @ message invalidId
            _ log
                `lit 
                    + Querying post slug for _id '
                    @ id
                    + ', type '
                    @ _type
                    + ' ..
            const slug
                await 
                    _ sanityClient.fetch
                        _ getQueryForType(_type)
                        { 
                            @ id
            const slugs
                _ 
                    ( 
                        iif Array.isArray(slug)
                            then slug
                            else
                                [ 
                                    @ slug
                    ._ map
                        => 
                            param _slug
                            `lit 
                                + /posts/
                                @ _slug
                                + 
            const staleRoutes
                [ 
                    @ '/'
                    @ ...slugs
            try 
                await 
                    _ Promise.all
                        _ staleRoutes.map
                            => 
                                param route
                                _ res.revalidate(route)
                const updatedRoutes
                    `lit 
                        + Updated routes:&nbsp;
                        _ staleRoutes.join(', ')
                        + 
                _ log(updatedRoutes)
                return 
                    _ res.status(200).json
                        { 
                            @ message updatedRoutes
            catch err
                _ log(err.message, true)
                return 
                    _ res.status(500).json
                        { 
                            @ message err.message
