module
    kind react
    import 
        @ useRouter
        from 'next/router'
    import Link
        @ LinkProps
        from 'next/link'
    import React
        @ PropsWithChildren
        @ useState
        @ useEffect
        from 'react'
    :type ActiveLinkProps
        :intersect 
            :ref LinkProps
            :{ 
                :p className
                    :optional 
                    :string 
                :p activeClassName
                    :string 
    const ActiveLink
        => 
            { 
                @ children
                @ activeClassName
                @ className
                ... props
                :ref PropsWithChildren
                    :param 
                        :ref ActiveLinkProps
            const 
                { 
                    @ asPath
                    @ isReady
                = useRouter()
            const [computedClassName, setComputedClassName] = useState(className)
            _ useEffect
                => 
                    if isReady
                        const linkPathname
                            new URL
                                @expr (props.as || props.href)
                                    :as 
                                        :string 
                                @expr location.href
                                . pathname
                            # Dynamic route will be matched via props.as
                            # Static route will be matched via props.href
                            # Using URL().pathname to get rid of query and hash
                        const activePathname = new URL(asPath, location.href).pathname
                            # Using URL().pathname to get rid of query and hash
                        const newClassName
                            iif linkPathname === activePathname
                                then
                                    _ 
                                        `lit 
                                            + 
                                            @ className
                                            + &nbsp;
                                            @ activeClassName
                                            + 
                                        ._ trim
                                else className
                        if newClassName !== computedClassName
                            _ setComputedClassName(newClassName)
                [ 
                    @ asPath
                    @ isReady
                    @ props.as
                    @ props.href
                    @ activeClassName
                    @ className
                    @ computedClassName
            return 
                < Link 
                    @ className {computedClassName}
                    @ {...props}
                    + {children}
    export-default ActiveLink
