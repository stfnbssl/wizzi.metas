module
    kind react
    import 
        @ Component
        from 'react'
    import 
        @ Editor
        @ EditorState
        @ RichUtils
        @ convertToRaw
        @ convertFromRaw
        from 'draft-js'
    const initialData
        { 
            [ blocks
                { 
                    @ key '16d0k'
                    @ text 'You can edit this text.'
                    @ type 'unstyled'
                    @ depth 0
                    [ inlineStyleRanges
                        { 
                            @ offset 0
                            @ length 23
                            @ style 'BOLD'
                    @ entityRanges []
                    { data
                { 
                    @ key '98peq'
                    @ text ''
                    @ type 'unstyled'
                    @ depth 0
                    @ inlineStyleRanges []
                    @ entityRanges []
                    { data
                { 
                    @ key 'ecmnc'
                    @ text 'Luke Skywalker has vanished. In his absence, the sinister FIRST ORDER has risen from the ashes of the Empire and will not rest until Skywalker, the last Jedi, has been destroyed.'
                    @ type 'unstyled'
                    @ depth 0
                    [ inlineStyleRanges
                        { 
                            @ offset 0
                            @ length 14
                            @ style 'BOLD'
                        { 
                            @ offset 133
                            @ length 9
                            @ style 'BOLD'
                    @ entityRanges []
                    { data
                { 
                    @ key 'fe2gn'
                    @ text ''
                    @ type 'unstyled'
                    @ depth 0
                    @ inlineStyleRanges []
                    @ entityRanges []
                    { data
                { 
                    @ key '4481k'
                    @ text 'With the support of the REPUBLIC, General Leia Organa leads a brave RESISTANCE. She is desperate to find her brother Luke and gain his help in restoring peace and justice to the galaxy.'
                    @ type 'unstyled'
                    @ depth 0
                    [ inlineStyleRanges
                        { 
                            @ offset 34
                            @ length 19
                            @ style 'BOLD'
                        { 
                            @ offset 117
                            @ length 4
                            @ style 'BOLD'
                        { 
                            @ offset 68
                            @ length 10
                            @ style 'ANYCUSTOMSTYLE'
                    @ entityRanges []
                    { data
            { entityMap
        # Custom overrides for each style
    const styleMap
        { 
            { CODE
                @ backgroundColor 'rgba(0, 0, 0, 0.05)'
                @ fontFamily '"Inconsolata", "Menlo", "Consolas", monospace'
                @ fontSize 16
                @ padding 4
            { BOLD
                @ color '#395296'
                @ fontWeight 'bold'
            { ANYCUSTOMSTYLE
                @ color '#00e400'
        # Custom overrides for each style
    export-default 
        class App
            super Component
            ctor 
                param props
                _ super(props)
                set this.state =
                    { 
                        @ editorState EditorState.createWithContent(convertFromRaw(initialData))
                        @ showToolbar false
                        @ windowWidth 0
                        { toolbarMeasures
                            @ w 0
                            @ h 0
                        { selectionMeasures
                            @ w 0
                            @ h 0
                        { selectionCoordinates
                            @ x 0
                            @ y 0
                        { toolbarCoordinates
                            @ x 0
                            @ y 0
                        @ showRawData false
                set this.focus =
                    => 
                        _ this.editor.focus()
                set this.onChange =
                    => 
                        param editorState
                        _ this.setState
                            { 
                                @ editorState
            p onClickEditor
                => 
                    _ this.focus()
                    _ this.checkSelectedText()
                # 1- Check if some text is selected
            p checkSelectedText
                => 
                    if typeof window !== 'undefined'
                        const text = window.getSelection().toString()
                        if text !== ''
                            _ this.setSelectionXY()
                        else
                            _ this.setState
                                { 
                                    @ showToolbar false
                                # Hide the toolbar if nothing is selected
                # 1- Check if some text is selected
                # 2- Identify the selection coordinates
            p setSelectionXY
                => 
                    var r = window.getSelection().getRangeAt(0).getBoundingClientRect()
                    var relative = document.body.parentNode.getBoundingClientRect()
                        # 2-a Set the selection coordinates in the state
                    _ this.setState
                        { 
                            @ selectionCoordinates r
                            @ windowWidth relative.width
                            { selectionMeasures
                                @ w r.width
                                @ h r.height
                        => 
                            _ this.showToolbar()
                        # 2-a Set the selection coordinates in the state
                # 2- Identify the selection coordinates
                # 3- Show the toolbar
            p showToolbar
                => 
                    _ this.setState
                        { 
                            @ showToolbar true
                        => 
                            _ this.measureToolbar()
                # 3- Show the toolbar
                # 4- The toolbar was hidden until now
            p measureToolbar
                => 
                    _ this.setState
                        { 
                            { toolbarMeasures
                                @ w this.elemWidth
                                @ h this.elemHeight
                        => 
                            _ this.setToolbarXY()
                        # 4-a Define the toolbar width and height, as it is now visible
                # 4- The toolbar was hidden until now
                # 5- Now that we have all measures, define toolbar coordinates
            p setToolbarXY
                => 
                    let coordinates
                        { 
                    const 
                        { 
                            @ selectionMeasures
                            @ selectionCoordinates
                            @ toolbarMeasures
                            @ windowWidth
                        = this.state
                    const hiddenTop = selectionCoordinates.y < toolbarMeasures.h
                    const hiddenRight = windowWidth - selectionCoordinates.x < toolbarMeasures.w / 2
                    const hiddenLeft = selectionCoordinates.x < toolbarMeasures.w / 2
                    const normalX = selectionCoordinates.x - toolbarMeasures.w / 2 + selectionMeasures.w / 2
                    const normalY = selectionCoordinates.y - toolbarMeasures.h
                    const invertedY = selectionCoordinates.y + selectionMeasures.h
                    const moveXToLeft = windowWidth - toolbarMeasures.w
                    const moveXToRight = 0
                    set coordinates =
                        { 
                            @ x normalX
                            @ y normalY
                    if hiddenTop
                        set coordinates.y = invertedY
                    if hiddenRight
                        set coordinates.x = moveXToLeft
                    if hiddenLeft
                        set coordinates.x = moveXToRight
                    _ this.setState
                        { 
                            @ toolbarCoordinates coordinates
                # 5- Now that we have all measures, define toolbar coordinates
            p handleKeyCommand
                => 
                    param command
                    const 
                        { 
                            @ editorState
                        = this.state
                    const newState = RichUtils.handleKeyCommand(editorState, command)
                    if newState
                        _ this.onChange(newState)
                        return true
                    return false
            p toggleToolbar
                => 
                    param inlineStyle
                    _ this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, inlineStyle))
            m render
                const 
                    { 
                        @ editorState
                    = this.state
                    # Make sure we're not on the ssr
                if typeof window !== 'undefined'
                    _ window.addEventListener('resize', this.checkSelectedText)
                const toolbarStyle
                    { 
                        @ display
                            iif this.state.showToolbar
                                then 'block'
                                else 'none'
                        @ backgroundColor 'black'
                        @ color 'white'
                        @ position 'absolute'
                        @ left this.state.toolbarCoordinates.x
                        @ top this.state.toolbarCoordinates.y
                        @ zIndex 999
                        @ padding 10
                return 
                    div 
                        div 
                            @ ref
                                => 
                                    param elem
                                    set this.elemWidth =
                                        iif elem
                                            then elem.clientWidth
                                            else 0
                                    set this.elemHeight =
                                        iif elem
                                            then elem.clientHeight
                                            else 0
                            @ style {toolbarStyle}
                            < ToolBar 
                                @ editorState {editorState}
                                @ onToggle {this.toggleToolbar}
                        div 
                            @ onClick {this.onClickEditor}
                            @ onBlur {this.checkSelectedText}
                            < Editor 
                                @ customStyleMap {styleMap}
                                @ editorState {editorState}
                                @ handleKeyCommand {this.handleKeyCommand}
                                @ onChange {this.onChange}
                                @ placeholder "Tell a story..."
                                @ editorKey "foobar"
                                @ spellCheck {false}
                                @ ref
                                    => 
                                        param element
                                        set this.editor = element
                        div 
                            @ style
                                { 
                                    @ marginTop 40
                            button 
                                @ onClick
                                    => 
                                        _ this.setState
                                            { 
                                                @ showRawData !this.state.showRawData
                                { 
                                    iif !this.state.showRawData
                                        then 'Show'
                                        else 'Hide'
                                + Raw Data
                            br 
                            + {this.state.showRawData && JSON.stringify(convertToRaw(editorState.getCurrentContent()))}
    class ToolbarButton
        super Component
        ctor 
            _ super()
            set this.onToggle =
                => 
                    param e
                    _ e.preventDefault()
                    _ this.props.onToggle(this.props.style)
        m render
            const buttonStyle
                { 
                    @ padding 10
            return 
                span 
                    @ onMouseDown {this.onToggle}
                    @ style {buttonStyle}
                    + {this.props.label}
    var toolbarItems
        [ 
            { 
                @ label 'Bold'
                @ style 'BOLD'
            { 
                @ label 'Italic'
                @ style 'ITALIC'
            { 
                @ label 'Underline'
                @ style 'UNDERLINE'
            { 
                @ label 'Code'
                @ style 'CODE'
            { 
                @ label 'Surprise'
                @ style 'ANYCUSTOMSTYLE'
    const ToolBar
        => 
            param props
            var currentStyle = props.editorState.getCurrentInlineStyle()
            return 
                div 
                    { 
                        _ toolbarItems.map
                            => 
                                param toolbarItem
                                < ToolbarButton 
                                    @ key {toolbarItem.label}
                                    @ active {currentStyle.has(toolbarItem.style)}
                                    @ label {toolbarItem.label}
                                    @ onToggle {props.onToggle}
                                    @ style {toolbarItem.style}
