module
    kind react
    import agility from '@agility/content-fetch'
    import 
        @ CMS_LANG
        @ CMS_CHANNEL
        from './constants'
    import 
        @ asyncForEach
        from './utils'
    export 
        @ validatePreview
        from './preview'
    import 
        @ normalizePosts
        from './normalize'
    import 
        @ requireComponentDependancyByName
        from './dependancies'
        # Our LIVE API client
    const liveClient
        _ agility.getApi
            { 
                @ guid process.env.AGILITY_CMS_GUID
                @ apiKey process.env.AGILITY_CMS_API_FETCH_KEY
        # Our LIVE API client
        # Our PREVIEW API client
    const previewClient
        _ agility.getApi
            { 
                @ guid process.env.AGILITY_CMS_GUID
                @ apiKey process.env.AGILITY_CMS_API_PREVIEW_KEY
                @ isPreview true
        # Our PREVIEW API client
    export 
        const getClient
            => 
                param preview = false
                iif preview
                    then previewClient
                    else liveClient
        # This client is used by nested components to fetch additional data within `getStaticProps`
    export 
        class APIClient
            p preview
                :public 
                :any 
            p client
                :public 
                :any 
            ctor 
                { 
                    @ preview
                        = false
                set this.preview = preview
                set this.client = getClient(preview)
            m getAllPosts
                async
                param take
                const data
                    await 
                        _ this.client.getContentList
                            { 
                                @ referenceName
                                    `lit 
                                        + posts
                                @ languageCode CMS_LANG
                                @ contentLinkDepth 1
                                @ take
                                    # TODO: Implement pagination
                return data.items
            m getLatestPost
                async
                const data
                    await 
                        _ this.getAllPosts(1)
                const normalizedPosts = normalizePosts(data)
                return normalizedPosts[0] || null
            m getPostDetails
                async
                { 
                    @ contentID
                    @ preview
                const post
                    await 
                        _ this.client.getContentItem
                            { 
                                @ contentID
                                @ languageCode CMS_LANG
                                @ contentLinkDepth 1
                const normalizedPost
                    _ normalizePosts
                        [ 
                            @ post
                        .[ 0
                return normalizedPost
            m getPostsForMoreStories
                async
                { 
                    @ postToExcludeContentID
                let allPosts
                    await 
                        _ this.getAllPosts(5)
                    # if we don't have a post to exclude, assume we should exclude the latest one
                if postToExcludeContentID < 0
                    _ allPosts.shift()
                const postsLessThisPost
                    _ allPosts.filter
                        => 
                            param p
                            return p.contentID !== postToExcludeContentID
                const normalizedMorePosts = normalizePosts(postsLessThisPost)
                return normalizedMorePosts
        # This client is used by nested components to fetch additional data within `getStaticProps`
    export 
        async-function getAgilityPaths
            _ console.log
                `lit 
                    + Agility CMS => Fetching sitemap for getAgilityPaths...
            const sitemapFlat
                await 
                    _ getClient().getSitemapFlat
                        { 
                            @ channelName CMS_CHANNEL
                            @ languageCode CMS_LANG
                # returns an array of paths as a string (i.e.  ['/home', '/posts']
                # skips folders...
            const paths
                _ Object.keys(sitemapFlat).filter
                    => 
                        param s
                        set sitemapFlat[s].isFolder !== true
                    ._ map
                        => 
                            param s
                            return s
                # returns an array of paths as a string (i.e.  ['/home', '/posts']
                # skips folders...
            return paths
    export 
        async-function getAgilityPageProps
            { 
                @ params
                @ preview
            const client = getClient(preview)
                # determine if we are in preview mode
            let path = '/'
            if params
                set path = ''
                    # build path by iterating through slugs
                _ params.slug.forEach
                    => 
                        param slug
                        set path += '/' + slug
            _ console.log
                `lit 
                    + Agility CMS => Getting page props for '
                    @ path
                    + '...
                # get sitemap
            const sitemap
                await 
                    _ client.getSitemapFlat
                        { 
                            @ channelName CMS_CHANNEL
                            @ languageCode CMS_LANG
                # get sitemap
            let pageInSitemap = sitemap[path]
            let page = null
            if path === '/'
                let firstPagePathInSitemap = Object.keys(sitemap)[0]
                set pageInSitemap = sitemap[firstPagePathInSitemap]
            if pageInSitemap
                set page =
                    await 
                        _ client.getPage
                            { 
                                @ pageID pageInSitemap.pageID
                                @ languageCode CMS_LANG
                                @ contentLinkDepth 1
                    # get the page
            else
                _ console.error('page [' + path + '] not found in sitemap.')
                    # Could not find page
                return 
            if !page
                _ console.error('page [' + path + '] not found in getpage method.')
                return 
            let pageTemplateName = page.templateName.replace(/[^0-9a-zA-Z]/g, '')
                # resolve the page template
                # resolve the modules per content zone
            await 
                _ asyncForEach
                    _ Object.keys(page.zones)
                    async=> 
                        param zoneName
                        let modules = []
                            # grab the modules for this content zone
                        const modulesForThisContentZone = page.zones[zoneName]
                            # grab the modules for this content zone
                            # loop through the zone's modules
                        await 
                            _ asyncForEach
                                @ modulesForThisContentZone
                                async=> 
                                    param moduleItem
                                    let ModuleComponentToRender = requireComponentDependancyByName(moduleItem.module)
                                    if ModuleComponentToRender
                                        let moduleData = null
                                            # resolve any additional data for the modules
                                        if ModuleComponentToRender.getCustomInitialProps
                                            _ console.log
                                                `lit 
                                                    + Agility CMS => Fetching additional data via getCustomInitialProps for&nbsp;
                                                    @ moduleItem.module
                                                    + ...
                                                # we have some additional data in the module we'll need, execute that method now, so it can be included in SSG
                                            set moduleData =
                                                await 
                                                    _ ModuleComponentToRender.getCustomInitialProps
                                                        { 
                                                            @ client
                                                                new APIClient
                                                                    { 
                                                                        @ preview
                                                            @ item moduleItem.item
                                                            @ languageCode CMS_LANG
                                                            @ channelName CMS_CHANNEL
                                                            @ pageInSitemap
                                        if moduleData != null
                                            set moduleItem.item = moduleData
                                        _ modules.push
                                            { 
                                                @ moduleName moduleItem.module
                                                @ item moduleItem.item
                                    else
                                        _ console.error
                                            `lit 
                                                + No react component found for the module "
                                                @ moduleItem.module
                                                + ". Cannot render module.
                            # loop through the zone's modules
                            # store as dictionary
                        set page.zones[zoneName] = modules
                            # store as dictionary
                # resolve the modules per content zone
            return 
                { 
                    @ sitemapNode pageInSitemap
                    @ page
                    @ pageTemplateName
                    @ languageCode CMS_LANG
                    @ channelName CMS_CHANNEL
