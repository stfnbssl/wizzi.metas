module
    kind react
    import 
        @ useState
        @ useEffect
        from 'react'
    import Head from 'next/head'
    import styles from '../styles/Home.module.css'
    const ToDo
        => 
            { 
                @ content
                @ isCompleted
                @ onChange
                @ onDelete
            const cards
                [ 
                    @ 'card'
                    @ 'card2'
                    @ 'card3'
                    @ 'card4'
                    @ 'card5'
            return 
                div 
                    @ className {styles[cards[Math.floor(Math.random() * cards.length)]]}
                    div 
                        @ className {styles.text}
                        @ style
                            { 
                                @ textDecoration
                                    iif isCompleted
                                        then 'line-through'
                                        else ''
                        + {content}
                    div 
                        @ className {styles.reverseWrapper}
                        input 
                            @ type "checkbox"
                            @ className {styles.check}
                            @ checked {isCompleted}
                            @ onChange {onChange}
                        button 
                            @ className {styles.delBtn}
                            @ onClick {onDelete}
                            + ✕
    export-default 
        function Home
            const [newContent, setNewContent] = useState('')
            const [toDos, setToDos] = useState([])
            const getToDos
                async=> 
                    const resp
                        await 
                            _ fetch('api/todos')
                    const toDos
                        await 
                            _ resp.json()
                    _ setToDos(toDos)
            const createToDo
                async=> 
                    await 
                        _ fetch
                            @ 'api/todos'
                            { 
                                @ method 'post'
                                @ body
                                    _ JSON.stringify
                                        { 
                                            @ content newContent
                    await 
                        _ getToDos()
            const updateToDo
                async=> 
                    param todo
                    let newBody
                        { 
                            @ ...todo
                            @ isCompleted !todo.isCompleted
                    await 
                        _ fetch
                            `lit 
                                + api/todos/
                                @ todo.key
                                + 
                            { 
                                @ method 'put'
                                @ body JSON.stringify(newBody)
                    await 
                        _ getToDos()
            const deleteToDo
                async=> 
                    param tid
                    await 
                        _ fetch
                            `lit 
                                + api/todos/
                                @ tid
                                + 
                            { 
                                @ method 'delete'
                    _ setTimeout(getToDos, 300)
            _ useEffect
                => 
                    _ getToDos()
                [ 
            const completed
                _ toDos.filter
                    => 
                        param todo
                        +
                            @expr todo.isCompleted
            const notCompleted
                _ toDos.filter
                    => 
                        param todo
                        + !todo.isCompleted
            return 
                div 
                    @ className {styles.container}
                    < Head 
                        < title 
                            + deta + next.js
                        link 
                            @ rel "icon"
                            @ href "/favicon.ico"
                    header 
                        @ className {styles.header}
                        h2 
                            a 
                                @ href "https://www.deta.sh"
                                + deta base
                            + +
                            + {' '}
                            a 
                                @ href "https://nextjs.org"
                                + next.js
                            + to dos
                    main 
                        @ className {styles.main}
                        div 
                            @ className {styles.incomplete}
                            div 
                                @ className {styles.firstRow}
                                div 
                                    @ className {styles.title}
                                    + to dos
                                div 
                                    @ className {styles.reverseWrapper}
                                    input 
                                        @ className {styles.inpt}
                                        @ onChange
                                            => 
                                                param e
                                                _ setNewContent(e.target.value)
                                    button 
                                        @ className {styles.addBtn}
                                        @ onClick {createToDo}
                                        + ✛
                            div 
                                @ className {styles.scrolly}
                                { 
                                    _ notCompleted.map
                                        => 
                                            param todo
                                            param index
                                            < ToDo 
                                                @ key {todo.key}
                                                @ content
                                                    `lit 
                                                        + 
                                                        @ index + 1
                                                        + .&nbsp;
                                                        @ todo.content
                                                        + 
                                                @ isCompleted {todo.isCompleted}
                                                @ onChange
                                                    => 
                                                        _ updateToDo(todo)
                                                @ onDelete
                                                    => 
                                                        _ deleteToDo(todo.key)
                        div 
                            @ className {styles.complete}
                            div 
                                @ className {styles.firstRow}
                                div 
                                    @ className {styles.title}
                                    + done
                            div 
                                @ className {styles.scrolly}
                                { 
                                    _ completed.map
                                        => 
                                            param todo
                                            param index
                                            < ToDo 
                                                @ key {todo.key}
                                                @ content
                                                    `lit 
                                                        + 
                                                        @ index + 1
                                                        + .&nbsp;
                                                        @ todo.content
                                                        + 
                                                @ isCompleted {todo.isCompleted}
                                                @ onChange
                                                    => 
                                                        _ updateToDo(todo)
                                                @ onDelete
                                                    => 
                                                        _ deleteToDo(todo.key)
                    footer 
                        @ className {styles.footer}
                        a 
                            @ href "https://deta.sh?ref=create-next-deta-app"
                            @ target "_blank"
                            @ rel "noopener noreferrer"
                            + powered by
                            img 
                                @ src "/deta.svg"
                                @ alt "Deta Logo"
                                @ className {styles.logo}
                            + deta & next.js
