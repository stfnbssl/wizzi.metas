module
    kind react
    import 
        @ Author
        @ contentTypes
        @ Post
        from '@/models'
    import 
        @ Author
            as ViewModelAuthor
        from '@/viewmodels/author'
    import 
        @ Post
            as ViewModelPost
        from '@/viewmodels/post'
    import 
        @ DeliveryClient
        from '@kontent-ai/delivery-sdk'
    import pkg from '../package.json'
    const sourceTrackingHeaderName = 'X-KC-SOURCE'
    const client
        new DeliveryClient
            { 
                @ projectId process.env.KONTENT_PROJECT_ID ?? ''
                @ previewApiKey process.env.KONTENT_PREVIEW_API_KEY
                @ globalHeaders
                    => 
                        param _queryConfig
                        [ 
                            { 
                                @ header sourceTrackingHeaderName
                                @ value
                                    `lit 
                                        + @vercel/next.js/example/
                                        @ pkg.name
                                        + ;
                                        @ pkg.version
                                        + 
    function parseAuthor
        param author
            :ref Author
        :return
            :ref ViewModelAuthor
        return 
            { 
                @ name author.elements.name.value
                @ picture author.elements.picture.value[0].url
    function parsePost
        param post
            :ref Post
        :return
            :ref ViewModelPost
        return 
            { 
                @ title post.elements.title.value
                @ slug post.elements.slug.value
                @ date post.elements.date.value
                @ content post.elements.content.value
                @ excerpt post.elements.excerpt.value
                @ coverImage post.elements.cover_image.value[0].url
                @ author parseAuthor(post.elements.author.linkedItems[0])
    export 
        async-function getAllPostSlugs
            return 
                await 
                    _ client.items
                        :param 
                            :ref Post
                        ._ type
                            @expr contentTypes.post.codename
                        ._ elementsParameter
                            [ 
                                @ 'slug'
                        ._ toPromise
                        ._ then
                            => 
                                param response
                                _ response.data.items.map
                                    => 
                                        param post
                                        +
                                            @expr post.elements.slug.value
    export 
        async-function getMorePostsForSlug
            param slug
                :string 
            param preview
                :boolean 
            return 
                _ client.items
                    :param 
                        :ref Post
                    ._ type
                        @expr contentTypes.post.codename
                    ._ queryConfig
                        { 
                            @ usePreviewMode !!preview
                    ._ orderByDescending
                        @ 'elements.date'
                    ._ notEqualsFilter
                        @ 'elements.slug'
                        @ slug
                    ._ limitParameter
                        @ 2
                    ._ toPromise
                    ._ then
                        => 
                            param response
                            _ response.data.items.map
                                => 
                                    param post
                                    _ parsePost(post)
    export 
        async-function getPostBySlug
            param slug
                :string 
            param preview
                :boolean 
            return 
                await 
                    _ client.items
                        :param 
                            :ref Post
                        ._ type
                            @expr contentTypes.post.codename
                        ._ queryConfig
                            { 
                                @ usePreviewMode !!preview
                        ._ equalsFilter
                            @ 'elements.slug'
                            @ slug
                        ._ toPromise
                        ._ then
                            => 
                                param response
                                _ parsePost(response.data.items[0])
    export 
        async-function getAllPosts
            param preview
                :boolean 
            return 
                await 
                    _ client.items
                        :param 
                            :ref Post
                        ._ type
                            @expr contentTypes.post.codename
                        ._ queryConfig
                            { 
                                @ usePreviewMode preview
                        ._ orderByDescending
                            @ 'elements.date'
                        ._ toPromise
                        ._ then
                            => 
                                param response
                                _ response.data.items.map
                                    => 
                                        param post
                                        _ parsePost(post)
