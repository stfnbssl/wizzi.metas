md
    hr 
    h2 
        + title: Next.js Pages
        + date: 2021/3/18
        + description: Learn more about Next.js pages.
        + tag: web development
        + author: You
    h1 
        + Next.js Pages
    p 
        + In Next.js, a
        b 
            + page
        + is a
        a 
            href https://react.dev/reference/react/Component
            title 
            + React Component
        + exported from a
        code .js
        + ,
        code .jsx
        + ,
        code .ts
        + , or
        code .tsx
        + file in the
        code pages
        + directory. Each page is associated with a route based on its file name.
    br 
    p 
        b 
            + Example
        + : If you create
        code pages/about.js
        + that exports a React component like below, it will be accessible at
        code /about
        + .
    br 
    code 
        + function About() {
        + return <div>About</div>
        + }
        + 
        + export default About
    br 
    h3 
        + Pages with Dynamic Routes
    p 
        + Next.js supports pages with dynamic routes. For example, if you create a file called
        code pages/posts/[id].js
        + , then it will be accessible at
        code posts/1
        + ,
        code posts/2
        + , etc.
    br 
    quote 
        p 
            + To learn more about dynamic routing, check the
            a 
                href /docs/routing/dynamic-routes.md
                title 
                + Dynamic Routing documentation
            + .
    h2 
        + Pre-rendering
    p 
        + By default, Next.js
        b 
            + pre-renders
        + every page. This means that Next.js generates HTML for each page in advance, instead of having it all done by client-side JavaScript. Pre-rendering can result in better performance and SEO.
    br 
    p 
        + Each generated HTML is associated with minimal JavaScript code necessary for that page. When a page is loaded by the browser, its JavaScript code runs and makes the page fully interactive. (This process is called
        em 
            + hydration
        + .)
    br 
    h3 
        + Two forms of Pre-rendering
    p 
        + Next.js has two forms of pre-rendering:
        b 
            + Static Generation
        + and
        b 
            + Server-side Rendering
        + . The difference is in
        b 
            + when
        + it generates the HTML for a page.
    br 
    ul 
        li 
            a 
                href #static-generation-recommended
                title 
                b 
                    + Static Generation (Recommended)
            + : The HTML is generated at
            b 
                + build time
            + and will be reused on each request.
        li 
            a 
                href #server-side-rendering
                title 
                b 
                    + Server-side Rendering
            + : The HTML is generated on
            b 
                + each request
            + .
    br 
    p 
        + Importantly, Next.js lets you
        b 
            + choose
        + which pre-rendering form you&#39;d like to use for each page. You can create a &quot;hybrid&quot; Next.js app by using Static Generation for most pages and using Server-side Rendering for others.
    br 
    p 
        + We
        b 
            + recommend
        + using
        b 
            + Static Generation
        + over Server-side Rendering for performance reasons. Statically generated pages can be cached by CDN with no extra configuration to boost performance. However, in some cases, Server-side Rendering might be the only option.
    br 
    p 
        + You can also use
        b 
            + Client-side Rendering
        + along with Static Generation or Server-side Rendering. That means some parts of a page can be rendered entirely by client side JavaScript. To learn more, take a look at the
        a 
            href /docs/basic-features/data-fetching/client-side.md
            title 
            + Data Fetching
        + documentation.
    br 
    h2 
        + Static Generation (Recommended)
    p 
        + If a page uses
        b 
            + Static Generation
        + , the page HTML is generated at
        b 
            + build time
        + . That means in production, the page HTML is generated when you run
        code next build
        + . This HTML will then be reused on each request. It can be cached by a CDN.
    br 
    p 
        + In Next.js, you can statically generate pages
        b 
            + with or without data
        + . Let&#39;s take a look at each case.
    br 
    h3 
        + Static Generation without data
    p 
        + By default, Next.js pre-renders pages using Static Generation without fetching data. Here&#39;s an example:
    br 
    code 
        + function About() {
        + return <div>About</div>
        + }
        + 
        + export default About
    br 
    p 
        + Note that this page does not need to fetch any external data to be pre-rendered. In cases like this, Next.js generates a single HTML file per page during build time.
    br 
    h3 
        + Static Generation with data
    p 
        + Some pages require fetching external data for pre-rendering. There are two scenarios, and one or both might apply. In each case, you can use a special function Next.js provides:
    br 
    ul 
        ordered 
        li 
            + Your page
            b 
                + content
            + depends on external data: Use
            code getStaticProps
            + .
        li 
            + Your page
            b 
                + paths
            + depend on external data: Use
            code getStaticPaths
            + (usually in addition to
            code getStaticProps
            + ).
    br 
    h4 
        + Scenario 1: Your page
        b 
            + content
        + depends on external data
    p 
        b 
            + Example
        + : Your blog page might need to fetch the list of blog posts from a CMS (content management system).
    br 
    code 
        + // TODO: Need to fetch `posts` (by calling some API endpoint)
        + //       before this page can be pre-rendered.
        + function Blog({ posts }) {
        + return (
        + <ul>
        + {posts.map((post) => (
        + <li>{post.title}</li>
        + ))}
        + </ul>
        + )
        + }
        + 
        + export default Blog
    br 
    p 
        + To fetch this data on pre-render, Next.js allows you to
        code export
        + an
        code async
        + function called
        code getStaticProps
        + from the same file. This function gets called at build time and lets you pass fetched data to the page&#39;s
        code props
        + on pre-render.
    br 
    code 
        + function Blog({ posts }) {
        + // Render posts...
        + }
        + 
        + // This function gets called at build time
        + export async function getStaticProps() {
        + // Call an external API endpoint to get posts
        + const res = await fetch('https://.../posts')
        + const posts = await res.json()
        + 
        + // By returning { props: { posts } }, the Blog component
        + // will receive `posts` as a prop at build time
        + return {
        + props: {
        + posts
        + }
        + }
        + }
        + 
        + export default Blog
    br 
    p 
        + To learn more about how
        code getStaticProps
        + works, check out the
        a 
            href /docs/basic-features/data-fetching/get-static-props.md
            title 
            + Data Fetching documentation
        + .
    br 
    h4 
        + Scenario 2: Your page paths depend on external data
    p 
        + Next.js allows you to create pages with
        b 
            + dynamic routes
        + . For example, you can create a file called
        code pages/posts/[id].js
        + to show a single blog post based on
        code id
        + . This will allow you to show a blog post with
        code id: 1
        + when you access
        code posts/1
        + .
    br 
    quote 
        p 
            + To learn more about dynamic routing, check the
            a 
                href /docs/routing/dynamic-routes.md
                title 
                + Dynamic Routing documentation
            + .
    p 
        + However, which
        code id
        + you want to pre-render at build time might depend on external data.
    br 
    p 
        b 
            + Example
        + : suppose that you&#39;ve only added one blog post (with
        code id: 1
        + ) to the database. In this case, you&#39;d only want to pre-render
        code posts/1
        + at build time.
    br 
    p 
        + Later, you might add the second post with
        code id: 2
        + . Then you&#39;d want to pre-render
        code posts/2
        + as well.
    br 
    p 
        + So your page
        b 
            + paths
        + that are pre-rendered depend on external data**.** To handle this, Next.js lets you
        code export
        + an
        code async
        + function called
        code getStaticPaths
        + from a dynamic page (
        code pages/posts/[id].js
        + in this case). This function gets called at build time and lets you specify which paths you want to pre-render.
    br 
    code 
        + // This function gets called at build time
        + export async function getStaticPaths() {
        + // Call an external API endpoint to get posts
        + const res = await fetch('https://.../posts')
        + const posts = await res.json()
        + 
        + // Get the paths we want to pre-render based on posts
        + const paths = posts.map((post) => ({
        + params: { id: post.id }
        + }))
        + 
        + // We'll pre-render only these paths at build time.
        + // { fallback: false } means other routes should 404.
        + return { paths, fallback: false }
        + }
    br 
    p 
        + Also in
        code pages/posts/[id].js
        + , you need to export
        code getStaticProps
        + so that you can fetch the data about the post with this
        code id
        + and use it to pre-render the page:
    br 
    code 
        + function Post({ post }) {
        + // Render post...
        + }
        + 
        + export async function getStaticPaths() {
        + // ...
        + }
        + 
        + // This also gets called at build time
        + export async function getStaticProps({ params }) {
        + // params contains the post `id`.
        + // If the route is like /posts/1, then params.id is 1
        + const res = await fetch(`https://.../posts/${params.id}`)
        + const post = await res.json()
        + 
        + // Pass post data to the page via props
        + return { props: { post } }
        + }
        + 
        + export default Post
    br 
    p 
        + To learn more about how
        code getStaticPaths
        + works, check out the
        a 
            href /docs/basic-features/data-fetching/get-static-paths.md
            title 
            + Data Fetching documentation
        + .
    br 
    h3 
        + When should I use Static Generation?
    p 
        + We recommend using
        b 
            + Static Generation
        + (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.
    br 
    p 
        + You can use Static Generation for many types of pages, including:
    br 
    ul 
        li 
            + Marketing pages
        li 
            + Blog posts
        li 
            + E-commerce product listings
        li 
            + Help and documentation
    br 
    p 
        + You should ask yourself: &quot;Can I pre-render this page
        b 
            + ahead
        + of a user&#39;s request?&quot; If the answer is yes, then you should choose Static Generation.
    br 
    p 
        + On the other hand, Static Generation is
        b 
            + not
        + a good idea if you cannot pre-render a page ahead of a user&#39;s request. Maybe your page shows frequently updated data, and the page content changes on every request.
    br 
    p 
        + In cases like this, you can do one of the following:
    br 
    ul 
        li 
            + Use Static Generation with
            b 
                + Client-side Rendering:
            + You can skip pre-rendering some parts of a page and then use client-side JavaScript to populate them. To learn more about this approach, check out the
            a 
                href /docs/basic-features/data-fetching/client-side.md
                title 
                + Data Fetching documentation
            + .
        li 
            + Use
            b 
                + Server-Side Rendering:
            + Next.js pre-renders a page on each request. It will be slower because the page cannot be cached by a CDN, but the pre-rendered page will always be up-to-date. We&#39;ll talk about this approach below.
    br 
    h2 
        + Server-side Rendering
    quote 
        p 
            + Also referred to as &quot;SSR&quot; or &quot;Dynamic Rendering&quot;.
    p 
        + If a page uses
        b 
            + Server-side Rendering
        + , the page HTML is generated on
        b 
            + each request
        + .
    br 
    p 
        + To use Server-side Rendering for a page, you need to
        code export
        + an
        code async
        + function called
        code getServerSideProps
        + . This function will be called by the server on every request.
    br 
    p 
        + For example, suppose that your page needs to pre-render frequently updated data (fetched from an external API). You can write
        code getServerSideProps
        + which fetches this data and passes it to
        code Page
        + like below:
    br 
    code 
        + function Page({ data }) {
        + // Render data...
        + }
        + 
        + // This gets called on every request
        + export async function getServerSideProps() {
        + // Fetch data from external API
        + const res = await fetch(`https://.../data`)
        + const data = await res.json()
        + 
        + // Pass data to the page via props
        + return { props: { data } }
        + }
        + 
        + export default Page
    br 
    p 
        + As you can see,
        code getServerSideProps
        + is similar to
        code getStaticProps
        + , but the difference is that
        code getServerSideProps
        + is run on every request instead of on build time.
    br 
    p 
        + To learn more about how
        code getServerSideProps
        + works, check out our
        a 
            href /docs/basic-features/data-fetching/get-server-side-props.md
            title 
            + Data Fetching documentation
    br 
    h2 
        + Summary
    p 
        + We&#39;ve discussed two forms of pre-rendering for Next.js.
    br 
    ul 
        li 
            b 
                + Static Generation (Recommended):
            + The HTML is generated at
            b 
                + build time
            + and will be reused on each request. To make a page use Static Generation, either export the page component, or export
            code getStaticProps
            + (and
            code getStaticPaths
            + if necessary). It&#39;s great for pages that can be pre-rendered ahead of a user&#39;s request. You can also use it with Client-side Rendering to bring in additional data.
        li 
            b 
                + Server-side Rendering:
            + The HTML is generated on
            b 
                + each request
            + . To make a page use Server-side Rendering, export
            code getServerSideProps
            + . Because Server-side Rendering results in slower performance than Static Generation, use this only if absolutely necessary.
