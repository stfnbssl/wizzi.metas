module
    kind react
    import React from 'react'
    import styles from '../styles/Home.module.css'
    import 
        @ sendOTP
        from '../lib/otpUtils'
    import 
        @ useRouter
        from 'next/router'
        # Handles auto-tabbing to next passcode digit input.
        # Logic inspired from https://stackoverflow.com/questions/15595652/focus-next-input-once-reaching-maxlength-value.
    const autoTab
        => 
            param target
                :ref HTMLInputElement
            param key
                :string 
                :optional 
            if target.value.length >= target.maxLength
                let next = target
                while 
                    test
                        set next =
                            @expr next.nextElementSibling
                                :as 
                                    :ref HTMLInputElement
                    if next == null
                        break 
                    if next.tagName.toLowerCase() === 'input'
                        _ next?.focus?.()
                        break 
            else
                if target.value.length === 0
                    let previous = target
                    while 
                        test
                            set previous =
                                @expr previous.previousElementSibling
                                    :as 
                                        :ref HTMLInputElement
                        if previous == null
                            break 
                        if previous.tagName.toLowerCase() === 'input'
                            _ previous.focus()
                            break 
        # Handles auto-tabbing to next passcode digit input.
        # Logic inspired from https://stackoverflow.com/questions/15595652/focus-next-input-once-reaching-maxlength-value.
    :type Props
        :{ 
            :p methodId
                :string 
            :p phoneNumber
                :string 
    const VerifyOTPForm
        => 
            param props
                :ref Props
            const 
                { 
                    @ methodId
                    @ phoneNumber
                = props
            const [isDisabled, setIsDisabled] = React.useState(true)
            const [currentMethodId, setCurrentMethodId] = React.useState(methodId)
            const [isError, setIsError] = React.useState(false)
            const router = useRouter()
            const strippedNumber = phoneNumber.replace(/\D/g, '')
            const parsedPhoneNumber
                `lit 
                    + (
                    _ strippedNumber.slice(0, 3)
                    + )&nbsp;
                    _ strippedNumber.slice(3, 6)
                    + -
                    _ strippedNumber.slice(6, 10)
                    + 
            const isValidPasscode
                => 
                    const regex = /^[0-9]$/g
                    const inputs = document.getElementsByClassName(styles.passcodeInput)
                    for let i = 0; i < inputs.length; i++
                        if 
                            test
                                op! 
                                    _ 
                                        ( 
                                            @expr inputs[i]
                                                :as 
                                                    :ref HTMLInputElement
                                        . value
                                        ._ match
                                            @ regex
                            return false
                    return true
            const onPasscodeDigitChange
                => 
                    if isValidPasscode()
                        _ setIsDisabled(false)
                        _ setIsError(false)
                    else
                        _ setIsDisabled(true)
            const resetPasscode
                => 
                    const inputs = document.getElementsByClassName(styles.passcodeInput)
                    for let i = 0; i < inputs.length; i++
                        set =
                            @expr 
                                ( 
                                    @expr inputs[i]
                                        :as 
                                            :ref HTMLInputElement
                                . value
                            literal ''
                    _ document.getElementById('digit-0')?.focus?.()
                    _ setIsDisabled(true)
            const resendCode
                async=> 
                    const methodId
                        await 
                            _ sendOTP(phoneNumber)
                    _ setCurrentMethodId(methodId)
                    _ resetPasscode()
                    _ setIsError(false)
            const onSubmit
                async=> 
                    param e
                        :ref React.FormEvent
                    _ e.preventDefault()
                    if isValidPasscode()
                        let otpInput = ''
                        const inputs = document.getElementsByClassName(styles.passcodeInput)
                        for let i = 0; i < inputs.length; i++
                            set otpInput +=
                                @expr 
                                    ( 
                                        @expr inputs[i]
                                            :as 
                                                :ref HTMLInputElement
                                    . value
                        const resp
                            await 
                                _ fetch
                                    @ '/api/authenticate_otp'
                                    { 
                                        @ method 'POST'
                                        @ body
                                            _ JSON.stringify
                                                { 
                                                    @ otpInput
                                                    @ methodId currentMethodId
                        if resp.status === 200
                            _ router.push('/profile')
                        else
                            _ setIsError(true)
                            _ resetPasscode()
            const renderPasscodeInputs
                => 
                    const inputs = []
                    for let i = 0; i < 6;
                        _ inputs.push
                            input 
                                @ autoFocus {i === 0}
                                @ className {styles.passcodeInput}
                                @ id
                                    `lit 
                                        + digit-
                                        @ i
                                        + 
                                @ key {i}
                                @ maxLength {1}
                                @ onChange {onPasscodeDigitChange}
                                @ onKeyUp
                                    => 
                                        param e
                                        _ autoTab
                                            @expr e.target
                                                :as 
                                                    :ref HTMLInputElement
                                            @expr e.key
                                @ placeholder "0"
                                @ size {1}
                                @ type "text"
                    return inputs
            return 
                div 
                    h2 
                        + Enter passcode
                    p 
                        @ className {styles.smsInstructions}
                        + A 6-digit passcode was sent to you at
                        + {' '}
                        strong 
                            + {parsedPhoneNumber}
                        + .
                    form 
                        @ onSubmit {onSubmit}
                        div 
                            @ className {styles.passcodeContainer}
                            p 
                                @ className {styles.errorText}
                                { 
                                    iif isError
                                        then 'Invalid code. Please try again.'
                                        else ''
                            div 
                                @ className {styles.passcodeInputContainer}
                                + {renderPasscodeInputs()}
                        div 
                            @ className {styles.resendCodeContainer}
                            p 
                                @ className {styles.resendCodeText}
                                + Didnâ€™t get it?
                            button 
                                @ className
                                    `lit 
                                        + 
                                        @ styles.resendCodeButton
                                        + &nbsp;
                                        @ styles.resendCodeText
                                        + 
                                @ onClick {resendCode}
                                @ type "button"
                                + Resend code
                        input 
                            @ className {styles.primaryButton}
                            @ disabled {isDisabled}
                            @ id "button"
                            @ type "submit"
                            @ value "Continue"
    export-default VerifyOTPForm
