module
    kind react
    import crypto from 'crypto'
    import 
        @ v4
            as uuidv4
        from 'uuid'
        #
            # *
            # * User methods. The example doesn't contain a DB, but for real applications you must use a
            # * db here, such as MongoDB, Fauna, SQL, etc.
            # 
    const users = []
        #
            # *
            # * User methods. The example doesn't contain a DB, but for real applications you must use a
            # * db here, such as MongoDB, Fauna, SQL, etc.
            # 
    export 
        async-function createUser
            { 
                @ username
                @ password
            const salt = crypto.randomBytes(16).toString('hex')
                # Here you should create the user and save the salt and hashed password (some dbs may have
                # authentication methods that will do it for you so you don't have to worry about it):
            const hash = crypto.pbkdf2Sync(password, salt, 1000, 64, 'sha512').toString('hex')
            const user
                { 
                    @ id uuidv4()
                    @ createdAt Date.now()
                    @ username
                    @ hash
                    @ salt
                # This is an in memory store for users, there is no data persistence without a proper DB
            _ users.push(user)
                # This is an in memory store for users, there is no data persistence without a proper DB
            return 
                { 
                    @ username
                    @ createdAt Date.now()
        # Here you should lookup for the user in your DB
    export 
        async-function findUser
            { 
                @ username
            return 
                _ users.find
                    => 
                        param user
                        set user.username === username
                # This is an in memory store for users, there is no data persistence without a proper DB
        # Here you should lookup for the user in your DB
        # Compare the password of an already fetched user (using `findUser`) and compare the
        # password for a potential match
    export 
        function validatePassword
            param user
            param inputPassword
            const inputHash = crypto.pbkdf2Sync(inputPassword, user.salt, 1000, 64, 'sha512').toString('hex')
            const passwordsMatch = user.hash === inputHash
            return passwordsMatch
        # Compare the password of an already fetched user (using `findUser`) and compare the
        # password for a potential match
