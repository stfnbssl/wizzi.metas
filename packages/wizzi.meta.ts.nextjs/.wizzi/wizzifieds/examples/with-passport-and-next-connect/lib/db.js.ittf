module
    kind react
    import crypto from 'crypto'
    import 
        @ v4
            as uuidv4
        from 'uuid'
    export 
        function getAllUsers
            param req
            return req.session.users
                # For demo purpose only. You are not likely to have to return all users.
    export 
        function createUser
            param req
            { 
                @ username
                @ password
                @ name
            const salt = crypto.randomBytes(16).toString('hex')
                # Here you should create the user and save the salt and hashed password (some dbs may have
                # authentication methods that will do it for you so you don't have to worry about it):
            const hash = crypto.pbkdf2Sync(password, salt, 1000, 64, 'sha512').toString('hex')
            const user
                { 
                    @ id uuidv4()
                    @ createdAt Date.now()
                    @ username
                    @ name
                    @ hash
                    @ salt
                # Here you should insert the user into the database
                # await db.createUser(user)
            _ req.session.users.push(user)
                # Here you should insert the user into the database
                # await db.createUser(user)
    export 
        function findUserByUsername
            param req
            param username
            return 
                _ req.session.users.find
                    => 
                        param user
                        set user.username === username
                # Here you find the user based on id/username in the database
                # const user = await db.findUserById(id)
    export 
        function updateUserByUsername
            param req
            param username
            param update
            const user
                _ req.session.users.find
                    => 
                        param u
                        set u.username === username
                # Here you update the user based on id/username in the database
                # const user = await db.updateUserById(id, update)
            _ Object.assign(user, update)
            return user
    export 
        function deleteUser
            param req
            param username
            set req.session.users =
                _ req.session.users.filter
                    => 
                        param user
                        set user.username !== req.user.username
                # Here you should delete the user in the database
                # await db.deleteUser(req.user)
        # Compare the password of an already fetched user (using `findUserByUsername`) and compare the
        # password for a potential match
    export 
        function validatePassword
            param user
            param inputPassword
            const inputHash = crypto.pbkdf2Sync(inputPassword, user.salt, 1000, 64, 'sha512').toString('hex')
            const passwordsMatch = user.hash === inputHash
            return passwordsMatch
        # Compare the password of an already fetched user (using `findUserByUsername`) and compare the
        # password for a potential match
