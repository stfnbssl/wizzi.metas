module
    kind react
    import 
        @ parse
        @ serialize
        from 'cookie'
    import 
        @ createLoginSession
        @ getLoginSession
        from './auth'
    function parseCookies
        param req
        if req.cookies
            return req.cookies
        const cookie = req.headers?.cookie
            # For pages we do need to parse the cookies.
        return parse(cookie || '')
    export-default 
        function session
            { 
                @ name
                @ secret
                @ cookie cookieOpts
            return 
                async=> 
                    param req
                    param res
                    param next
                    const cookies = parseCookies(req)
                    const token = cookies[name]
                    let unsealed
                        { 
                    if token
                        try 
                            set unsealed =
                                await 
                                    _ getLoginSession(token, secret)
                                # the cookie needs to be unsealed using the password `secret`
                        catch e
                    set req.session = unsealed
                        # We are proxying res.end to commit the session cookie
                    const oldEnd = res.end
                        # We are proxying res.end to commit the session cookie
                    set res.end =
                        async-function resEndProxy
                            param ...args
                            if res.finished || res.writableEnded || res.headersSent
                                return 
                            if cookieOpts.maxAge
                                set req.session.maxAge = cookieOpts.maxAge
                            const token
                                await 
                                    _ createLoginSession(req.session, secret)
                            _ res.setHeader('Set-Cookie', serialize(name, token, cookieOpts))
                            _ oldEnd.apply(this, args)
                    _ next()
