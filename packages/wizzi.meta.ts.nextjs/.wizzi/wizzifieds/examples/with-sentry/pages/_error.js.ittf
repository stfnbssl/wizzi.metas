module
    kind react
    import 
        as Sentry
        from '@sentry/nextjs'
        #
            # *
            # * This page is loaded by Nextjs:
            # *  - on the server, when data-fetching methods throw or reject
            # *  - on the client, when `getInitialProps` throws or rejects
            # *  - on the client, when a React lifecycle method throws or rejects, and it's
            # *    caught by the built-in Nextjs error boundary
            # *
            # * See:
            # *  - https://nextjs.org/docs/basic-features/data-fetching/overview
            # *  - https://nextjs.org/docs/api-reference/data-fetching/get-initial-props
            # *  - https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary
            # 
    import NextErrorComponent from 'next/error'
    const CustomErrorComponent
        => 
            param props
            < NextErrorComponent 
                @ statusCode {props.statusCode}
    set CustomErrorComponent.getInitialProps =
        async=> 
            param contextData
            await 
                _ Sentry.captureUnderscoreErrorException(contextData)
                # In case this is running in a serverless function, await this in order to give Sentry
                # time to send the error before the lambda exits
                # This will contain the status code of the response
            return NextErrorComponent.getInitialProps(contextData)
                # This will contain the status code of the response
    export-default CustomErrorComponent
