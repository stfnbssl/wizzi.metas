module
    kind react
    import 
        as types
        from './graphql'
        #
            # eslint-disable
    import 
        @ TypedDocumentNode
            as DocumentNode
        from '@graphql-typed-document-node/core'
    const documents
        { 
            @ '\n  query GetAllPosts($first: Int!) {\n    postCollection(first: $first) {\n      edges {\n        node {\n          id\n          title\n          slug\n        }\n      }\n    }\n  }\n' types.GetAllPostsDocument
            @ '\n  query GetPostBySlug($slug: String!) {\n    post(by: { slug: $slug }) {\n      id\n      title\n      slug\n    }\n  }\n' types.GetPostBySlugDocument
    export 
        :function graphql
            param source
                :literal '\n  query GetAllPosts($first: Int!) {\n    postCollection(first: $first) {\n      edges {\n        node {\n          id\n          title\n          slug\n        }\n      }\n    }\n  }\n'
            :return
                :[] 
                    :typeof documents
                    :literal '\n  query GetAllPosts($first: Int!) {\n    postCollection(first: $first) {\n      edges {\n        node {\n          id\n          title\n          slug\n        }\n      }\n    }\n  }\n'
    export 
        :function graphql
            param source
                :literal '\n  query GetPostBySlug($slug: String!) {\n    post(by: { slug: $slug }) {\n      id\n      title\n      slug\n    }\n  }\n'
            :return
                :[] 
                    :typeof documents
                    :literal '\n  query GetPostBySlug($slug: String!) {\n    post(by: { slug: $slug }) {\n      id\n      title\n      slug\n    }\n  }\n'
    export 
        :function graphql
            param source
                :string 
            :return
                :unknown 
    export 
        function graphql
            param source
                :string 
            return 
                ?? 
                    @expr 
                        ( 
                            + documents
                                :as 
                                    :any 
                        .[ source
                    { 
    export 
        :type DocumentType
            :< TDocumentNode
                :ref DocumentNode
                    :param any
                    :param any
            :iif 
                :check 
                    :ref TDocumentNode
                :extends 
                    :ref DocumentNode
                        :param 
                            :infer 
                                :< TType
                        :param any
                :then 
                    :ref TType
                :else 
                    :never 
