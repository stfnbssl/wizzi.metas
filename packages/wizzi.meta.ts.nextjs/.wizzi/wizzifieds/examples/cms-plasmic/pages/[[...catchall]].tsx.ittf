module
    kind react
    import 
        @ PlasmicComponent
        @ ComponentRenderData
        @ PlasmicRootProvider
        @ extractPlasmicQueryData
        from '@plasmicapp/loader-nextjs'
    :import-type 
        @ GetStaticPaths
        @ GetStaticProps
        from 'next'
    import Error from 'next/error'
    import 
        @ PLASMIC
        @ PREVIEW_PLASMIC
        from '../plasmic-init'
        #
            # *
            # * Use fetchPages() to fetch list of pages that have been created in Plasmic
            # 
    export 
        const getStaticPaths
            :ref GetStaticPaths
            =
                async=> 
                    const pages
                        await 
                            _ PLASMIC.fetchPages()
                    return 
                        { 
                            @ paths
                                _ pages.map
                                    => 
                                        param page
                                        (
                                            { 
                                                { params
                                                    @ catchall page.path.substring(1).split('/')
                            @ fallback 'blocking'
        #
            # *
            # * Use fetchPages() to fetch list of pages that have been created in Plasmic
            # 
        #
            # *
            # * For each page, pre-fetch the data we need to render it
            # 
    export 
        const getStaticProps
            :ref GetStaticProps
            =
                async=> 
                    param context
                    const 
                        { 
                            @ catchall
                        =
                            ?? 
                                + context.params
                                { 
                        # Convert the catchall param into a path string
                    const plasmicPath
                        iif typeof catchall === 'string'
                            then catchall
                            else
                                iif Array.isArray(catchall)
                                    then
                                        `lit 
                                            + /
                                            _ catchall.join('/')
                                            + 
                                    else '/'
                        # Convert the catchall param into a path string
                    const plasmicData
                        await 
                            _ PLASMIC.maybeFetchComponentData(plasmicPath)
                    if !plasmicData
                        return 
                            { 
                                { props
                            # This is some non-Plasmic catch-all page
                    const queryCache
                        await 
                            _ extractPlasmicQueryData
                                < PlasmicRootProvider 
                                    @ loader {PLASMIC}
                                    @ prefetchedData {plasmicData}
                                    < PlasmicComponent 
                                        @ component {plasmicData.entryCompMetas[0].displayName}
                        # This is a path that Plasmic knows about.
                        # Cache the necessary data fetched for the page.
                        # Pass the data in as props.
                    return 
                        { 
                            { props
                                @ plasmicData
                                @ queryCache
                                @ preview context.preview ?? null
                            @ revalidate 300
                                # Using incremental static regeneration, will invalidate this page
                                # after 300s (no deploy webhooks needed)
                        # Pass the data in as props.
        #
            # *
            # * For each page, pre-fetch the data we need to render it
            # 
        #
            # *
            # * Actually render the page!
            # 
    export-default 
        function CatchallPage
            param props
                :{ 
                    :p plasmicData
                        :optional 
                        :ref ComponentRenderData
                    :p queryCache
                        :optional 
                        :ref Record
                            :param string
                            :param any
                    :p preview
                        :optional 
                        :boolean 
            const 
                { 
                    @ plasmicData
                    @ queryCache
                    @ preview
                = props
            if !plasmicData || plasmicData.entryCompMetas.length === 0
                return 
                    < Error 
                        @ statusCode {404}
            const pageMeta = plasmicData.entryCompMetas[0]
            return 
                < PlasmicRootProvider 
                    @ loader
                        iif preview
                            then PREVIEW_PLASMIC
                            else PLASMIC
                    @ prefetchedData
                        iif preview
                            then undefined
                            else plasmicData
                    @ prefetchedQueryData
                        iif preview
                            then undefined
                            else queryCache
                    { 
                    < PlasmicComponent 
                        @ component {pageMeta.displayName}
                    # Pass in the data fetched in getStaticProps as prefetchedData
        #
            # *
            # * Actually render the page!
            # 
