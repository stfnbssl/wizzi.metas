module
    kind react
    import 
        @ query
            as q
        from 'faunadb'
    import 
        @ serverClient
        @ serializeFaunaCookie
        from '../../utils/fauna-auth'
    export-default 
        async-function signup
            param req
            param res
            const 
                { 
                    @ email
                    @ password
                =
                    await 
                        @expr req.body
            try 
                if !email || !password
                    throw new Error('Email and password must be provided.')
                _ console.log
                    `lit 
                        + email:&nbsp;
                        @ email
                        + &nbsp;trying to create user.
                let user
                try 
                    set user =
                        await 
                            _ serverClient.query
                                _ q.Create
                                    _ q.Collection('User')
                                    { 
                                        { credentials
                                            @ password
                                        { data
                                            @ email
                catch error
                    _ console.error('Fauna create user error:', error)
                    throw new Error('User already exists.')
                if !user.ref
                    throw new Error('No ref present in create query response.')
                const loginRes
                    await 
                        _ serverClient.query
                            _ q.Login
                                @expr user.ref
                                { 
                                    @ password
                if !loginRes.secret
                    throw new Error('No secret present in login query response.')
                const cookieSerialized = serializeFaunaCookie(loginRes.secret)
                _ res.setHeader('Set-Cookie', cookieSerialized)
                _ res.status(200).end()
            catch error
                _ res.status(400).send(error.message)
