module
    kind react
    async-function fetchAPI
        param query
        param 
            @ variables
            @ preview
            = 
        const res
            await 
                _ fetch
                    @ 'https://graphql.umbraco.io'
                    { 
                        @ method 'POST'
                        { headers
                            @ 'Content-Type' 'application/json'
                            @ 'Api-Key' process.env.UMBRACO_API_KEY
                            @ 'Umb-Project-Alias' process.env.UMBRACO_PROJECT_ALIAS
                        @ body
                            _ JSON.stringify
                                { 
                                    @ query
                                    @ variables
        const json
            await 
                _ res.json()
        if json.errors
            _ console.error(json.errors)
            throw new Error('Failed to fetch API')
        return json.data
    export 
        async-function getPreviewPostBySlug
            param slug
            const data
                await 
                    _ fetchAPI
                        `lit 
                            + &lf;
                            + &nbsp;   query PostBySlug($slug: String!) {&lf;
                            + &nbsp;     post(url: $slug, preview: true) {&lf;
                            + &nbsp;       slug:url&lf;
                            + &nbsp;     }&lf;
                            + &nbsp;   }
                        { 
                            @ preview true
                            { variables
                                @ slug
            return data.post
    export 
        async-function getAllPostsWithSlug
            const data
                await 
                    _ fetchAPI
                        `lit 
                            + &lf;
                            + &nbsp;   {&lf;
                            + &nbsp;     allPost {&lf;
                            + &nbsp;       edges {&lf;
                            + &nbsp;         node {&lf;
                            + &nbsp;           slug:url&lf;
                            + &nbsp;         }&lf;
                            + &nbsp;       }&lf;
                            + &nbsp;     }&lf;
                            + &nbsp;   }&lf;
                            + &nbsp;&nbsp;
            return 
                _ data.allPost.edges.map
                    => 
                        param x
                        +
                            @expr x.node
    export 
        async-function getAllPostsForHome
            param preview
            const data
                await 
                    _ fetchAPI
                        `lit 
                            + &lf;
                            + &nbsp;   query ($preview: Boolean) {&lf;
                            + &nbsp;     allPost(first: 20, orderBy: [date_DESC], preview: $preview) {&lf;
                            + &nbsp;       edges {&lf;
                            + &nbsp;         node {&lf;
                            + &nbsp;           title:name&lf;
                            + &nbsp;           slug:url&lf;
                            + &nbsp;           excerpt&lf;
                            + &nbsp;           date&lf;
                            + &nbsp;           coverImage {&lf;
                            + &nbsp;             url(width: 2000, height: 1000, cropMode: CROP, upscale: true)&lf;
                            + &nbsp;           }&lf;
                            + &nbsp;           author {&lf;
                            + &nbsp;             ...on Author {&lf;
                            + &nbsp;               name&lf;
                            + &nbsp;               picture {&lf;
                            + &nbsp;                 url(width: 100, height: 100, cropMode: CROP, upscale: true)&lf;
                            + &nbsp;               }&lf;
                            + &nbsp;             }&lf;
                            + &nbsp;           }&lf;
                            + &nbsp;         }&lf;
                            + &nbsp;       }&lf;
                            + &nbsp;     }&lf;
                            + &nbsp;   }&lf;
                            + &nbsp;&nbsp;
                        { 
                            @ preview
                            { variables
                                @ preview
            return 
                _ data.allPost.edges.map
                    => 
                        param e
                        +
                            @expr e.node
    export 
        async-function getPostAndMorePosts
            param slug
            param preview
            const data
                await 
                    _ fetchAPI
                        `lit 
                            + &lf;
                            + &nbsp;   query PostBySlug($slug: String!, $preview: Boolean!) {&lf;
                            + &nbsp;     post(url: $slug, preview: $preview) {&lf;
                            + &nbsp;       title:name&lf;
                            + &nbsp;       slug:url&lf;
                            + &nbsp;       content:bodyText&lf;
                            + &nbsp;       date&lf;
                            + &nbsp;       ogImage: coverImage {&lf;
                            + &nbsp;           url(width: 2000, height: 1000, cropMode: CROP, upscale: true)&lf;
                            + &nbsp;       }&lf;
                            + &nbsp;       coverImage {&lf;
                            + &nbsp;           url(width: 2000, height: 1000, cropMode: CROP, upscale: true)&lf;
                            + &nbsp;       }&lf;
                            + &nbsp;       author {&lf;
                            + &nbsp;         ...on Author {&lf;
                            + &nbsp;           name&lf;
                            + &nbsp;           picture {&lf;
                            + &nbsp;             url(width: 100, height: 100, cropMode: CROP, upscale: true)&lf;
                            + &nbsp;           }&lf;
                            + &nbsp;         }&lf;
                            + &nbsp;       }&lf;
                            + &nbsp;     }&lf;
                            + &nbsp;     morePosts: allPost(first: 2, where: { NOT: { url: $slug } }, orderBy: [date_DESC], preview: $preview) {&lf;
                            + &nbsp;       edges {&lf;
                            + &nbsp;         node {&lf;
                            + &nbsp;           title:name&lf;
                            + &nbsp;           slug:url&lf;
                            + &nbsp;           excerpt&lf;
                            + &nbsp;           date&lf;
                            + &nbsp;           coverImage {&lf;
                            + &nbsp;             url(width: 2000, height: 1000, cropMode: CROP, upscale: true)&lf;
                            + &nbsp;           }&lf;
                            + &nbsp;           author {&lf;
                            + &nbsp;             ...on Author {&lf;
                            + &nbsp;               name&lf;
                            + &nbsp;               picture {&lf;
                            + &nbsp;                 url(width: 100, height: 100, cropMode: CROP, upscale: true)&lf;
                            + &nbsp;               }&lf;
                            + &nbsp;             }&lf;
                            + &nbsp;           }&lf;
                            + &nbsp;         }&lf;
                            + &nbsp;       }&lf;
                            + &nbsp;     }&lf;
                            + &nbsp;   }&lf;
                            + &nbsp;&nbsp;
                        { 
                            @ preview
                            { variables
                                @ preview
                                @ slug
                                    `lit 
                                        + /
                                        _ slug.join('/')
                                        + /
            return 
                { 
                    @ post data.post
                    @ morePosts
                        _ data.morePosts.edges.map
                            => 
                                param e
                                +
                                    @expr e.node
