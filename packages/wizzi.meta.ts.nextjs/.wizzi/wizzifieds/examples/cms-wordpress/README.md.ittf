md
    h1 
        + An Incremental Static Regeneration Blog Example Using Next.js and WordPress
    p 
        + This example showcases Next.js&#39;s
        a 
            href https://nextjs.org/docs/basic-features/data-fetching/incremental-static-regeneration
            title 
            + Incremental Static Regeneration
        + feature using
        a 
            href https://wordpress.org
            title 
            + WordPress
        + as the data source.
    br 
    h2 
        + Demo
    h3 
        a 
            href https://next-blog-wordpress.vercel.app
            title 
            + https://next-blog-wordpress.vercel.app
    h2 
        + Deploy your own
    p 
        + Once you have access to
        a 
            href #step-3-set-up-environment-variables
            title 
            + the environment variables you&#39;ll need
        + , deploy the example using
        a 
            href https://vercel.com?utm_source=github&utm_medium=readme&utm_campaign=next-example
            title 
            + Vercel
        + :
    br 
    p 
        a 
            href https://vercel.com/new/clone?repository-url=https://github.com/vercel/next.js/tree/canary/examples/cms-wordpress&project-name=cms-wordpress&repository-name=cms-wordpress&env=WORDPRESS_API_URL&envDescription=Required%20to%20connect%20the%20app%20with%20WordPress&envLink=https://vercel.link/cms-wordpress-env
            title 
            img 
                href https://vercel.com/button
                title 
    br 
    h3 
        + Related examples
    ul 
        li 
            a 
                href /examples/cms-datocms
                title 
                + DatoCMS
        li 
            a 
                href /examples/cms-sanity
                title 
                + Sanity
        li 
            a 
                href /examples/cms-takeshape
                title 
                + TakeShape
        li 
            a 
                href /examples/cms-prismic
                title 
                + Prismic
        li 
            a 
                href /examples/cms-contentful
                title 
                + Contentful
        li 
            a 
                href /examples/cms-strapi
                title 
                + Strapi
        li 
            a 
                href /examples/cms-agilitycms
                title 
                + Agility CMS
        li 
            a 
                href /examples/cms-cosmic
                title 
                + Cosmic
        li 
            a 
                href /examples/cms-buttercms
                title 
                + ButterCMS
        li 
            a 
                href /examples/cms-storyblok
                title 
                + Storyblok
        li 
            a 
                href /examples/cms-graphcms
                title 
                + GraphCMS
        li 
            a 
                href /examples/cms-kontent
                title 
                + Kontent
        li 
            a 
                href /examples/cms-ghost
                title 
                + Ghost
        li 
            a 
                href /examples/blog-starter
                title 
                + Blog Starter
        li 
            a 
                href /examples/cms-builder-io
                title 
                + Builder.io
        li 
            a 
                href /examples/cms-dotcms
                title 
                + DotCMS
    br 
    h2 
        + How to use
    p 
        + Execute
        a 
            href https://github.com/vercel/next.js/tree/canary/packages/create-next-app
            title 
            code create-next-app
        + with
        a 
            href https://docs.npmjs.com/cli/init
            title 
            + npm
        + ,
        a 
            href https://yarnpkg.com/lang/en/docs/cli/create/
            title 
            + Yarn
        + , or
        a 
            href https://pnpm.io
            title 
            + pnpm
        + to bootstrap the example:
    br 
    code 
        lang bash
        + npx create-next-app --example cms-wordpress cms-wordpress-app
    br 
    code 
        lang bash
        + yarn create next-app --example cms-wordpress cms-wordpress-app
    br 
    code 
        lang bash
        + pnpm create next-app --example cms-wordpress cms-wordpress-app
    br 
    h2 
        + Configuration
    h3 
        + Step 1. Prepare your WordPress site
    p 
        + First, you need a WordPress site. There are many solutions for WordPress hosting, such as
        a 
            href https://wpengine.com/
            title 
            + WP Engine
        + and
        a 
            href https://wordpress.com/
            title 
            + WordPress.com
        + .
    br 
    p 
        + Once the site is ready, you&#39;ll need to install the
        a 
            href https://www.wpgraphql.com/
            title 
            + WPGraphQL
        + plugin. It will add GraphQL API to your WordPress site, which we&#39;ll use to query the posts. Follow these steps to install it:
    br 
    ul 
        li 
            + Download the
            a 
                href https://github.com/wp-graphql/wp-graphql
                title 
                + WPGraphQL repo
            + as a ZIP archive.
        li 
            + Inside your WordPress admin, go to
            b 
                + Plugins
            + and then click
            b 
                + Add New
            + .
    br 
    p 
        img 
            href ./docs/plugins-add-new.png
            title 
    br 
    ul 
        li 
            + Click the
            b 
                + Upload Plugin
            + button at the top of the page and upload the WPGraphQL plugin.
    br 
    p 
        img 
            href ./docs/plugins-upload-new.png
            title 
    br 
    ul 
        li 
            + Once the plugin has been added, activate it from either the
            b 
                + Activate Plugin
            + button displayed after uploading or from the
            b 
                + Plugins
            + page.
    br 
    p 
        img 
            href ./docs/plugin-installed.png
            title 
    br 
    h4 
        + GraphiQL
    p 
        + The
        a 
            href https://www.wpgraphql.com/
            title 
            + WPGraphQL
        + plugin also gives you access to a GraphQL IDE directly from your WordPress Admin, allowing you to inspect and play around with the GraphQL API.
    br 
    p 
        img 
            href ./docs/wp-graphiql.png
            title 
    br 
    h3 
        + Step 2. Populate Content
    p 
        + Inside your WordPress admin, go to
        b 
            + Posts
        + and start adding new posts:
    br 
    ul 
        li 
            + We recommend creating at least
            b 
                + 2 posts
        li 
            + Use dummy data for the content
        li 
            + Pick an author from your WordPress users
        li 
            + Add a
            b 
                + Featured Image
            + . You can download one from
            a 
                href https://unsplash.com/
                title 
                + Unsplash
        li 
            + Fill the
            b 
                + Excerpt
            + field
    br 
    p 
        img 
            href ./docs/new-post.png
            title 
    br 
    p 
        + When youâ€™re done, make sure to
        b 
            + Publish
        + the posts.
    br 
    quote 
        p 
            b 
                + Note:
            + Only
            b 
                + published
            + posts and public fields will be rendered by the app unless
            a 
                href https://nextjs.org/docs/advanced-features/preview-mode
                title 
                + Preview Mode
            + is enabled.
    h3 
        + Step 3. Set up environment variables
    p 
        + Copy the
        code .env.local.example
        + file in this directory to
        code .env.local
        + (which will be ignored by Git):
    br 
    code 
        lang bash
        + cp .env.local.example .env.local
    br 
    p 
        + Then open
        code .env.local
        + and set
        code WORDPRESS_API_URL
        + to be the URL to your GraphQL endpoint in WordPress. For example:
        code https://myapp.wpengine.com/graphql
        + .
    br 
    p 
        + Your
        code .env.local
        + file should look like this:
    br 
    code 
        lang bash
        + WORDPRESS_API_URL=...
        + 
        + # Only required if you want to enable preview mode
        + # WORDPRESS_AUTH_REFRESH_TOKEN=
        + # WORDPRESS_PREVIEW_SECRET=
    br 
    h3 
        + Step 4. Run Next.js in development mode
    code 
        lang bash
        + npm install
        + npm run dev
        + 
        + # or
        + 
        + yarn install
        + yarn dev
    br 
    p 
        + Your blog should be up and running on
        a 
            href http://localhost:3000
            title 
            + http://localhost:3000
        + ! If it doesn&#39;t work, post on
        a 
            href https://github.com/vercel/next.js/discussions
            title 
            + GitHub discussions
        + .
    br 
    h3 
        + Step 5. Add authentication for Preview Mode (Optional)
    p 
        b 
            + This step is optional.
        + By default, the blog will work with public posts from your WordPress site. Private content such as unpublished posts and private fields cannot be retrieved. To have access to unpublished posts you&#39;ll need to set up authentication.
    br 
    p 
        + To add
        a 
            href https://docs.wpgraphql.com/guides/authentication-and-authorization/
            title 
            + authentication to WPGraphQL
        + , first you need to add the
        a 
            href https://github.com/wp-graphql/wp-graphql-jwt-authentication
            title 
            + WPGraphQL JWT plugin
        + to your WordPress Admin following the same process you used to add the WPGraphQL plugin.
    br 
    quote 
        p 
            + Adding the WPGraphQL JWT plugin will disable your GraphQL API until you add a JWT secret (
            a 
                href https://github.com/wp-graphql/wp-graphql-jwt-authentication/issues/91
                title 
                + GitHub issue
            + ).
    p 
        + Once that&#39;s done, you&#39;ll need to access the WordPress filesystem to add the secret required to validate JWT tokens. We recommend using SFTP â€” the instructions vary depending on your hosting provider. For example:
    br 
    ul 
        li 
            a 
                href https://wpengine.com/support/sftp/
                title 
                + SFTP guide for WP Engine
        li 
            a 
                href https://wordpress.com/support/sftp/
                title 
                + SFTP guide for WordPress.com
    br 
    p 
        + Once you have SFTP access, open
        code wp-config.php
        + and add a secret for your JWT:
    br 
    code 
        lang php
        + define( 'GRAPHQL_JWT_AUTH_SECRET_KEY', 'YOUR_STRONG_SECRET' );
    br 
    quote 
        p 
            + You can read more about this in the documentation for
            a 
                href https://docs.wpgraphql.com/extensions/wpgraphql-jwt-authentication/
                title 
                + WPGraphQL JWT Authentication
            + .
    p 
        + Now, you need to get a
        b 
            + refresh token
        + to make authenticated requests with GraphQL. Make the following GraphQL mutation to your WordPress site from the GraphQL IDE (See notes about WPGraphiQL from earlier). Replace
        code your_username
        + with the
        b 
            + username
        + of a user with the
        code Administrator
        + role, and
        code your_password
        + with the user&#39;s password.
    br 
    code 
        lang graphql
        + mutation Login {
        + login(
        + input: {
        + clientMutationId: "uniqueId"
        + password: "your_password"
        + username: "your_username"
        + }
        + ) {
        + refreshToken
        + }
        + }
    br 
    p 
        + Copy the
        code refreshToken
        + returned by the mutation, then open
        code .env.local
        + , and make the following changes:
    br 
    ul 
        li 
            + Uncomment
            code WORDPRESS_AUTH_REFRESH_TOKEN
            + and set it to be the
            code refreshToken
            + you just received.
        li 
            + Uncomment
            code WORDPRESS_PREVIEW_SECRET
            + and set it to be any random string (ideally URL friendly).
    br 
    p 
        + Your
        code .env.local
        + file should look like this:
    br 
    code 
        lang bash
        + WORDPRESS_API_URL=...
        + 
        + # Only required if you want to enable preview mode
        + WORDPRESS_AUTH_REFRESH_TOKEN=...
        + WORDPRESS_PREVIEW_SECRET=...
    br 
    p 
        b 
            + Important:
        + Restart your Next.js server to update the environment variables.
    br 
    h3 
        + Step 6. Try preview mode
    p 
        + On your WordPress admin, create a new post like before, but
        b 
            + do not publish
        + it.
    br 
    p 
        + Now, if you go to
        code http://localhost:3000
        + , you wonâ€™t see the post. However, if you enable
        b 
            + Preview Mode
        + , you&#39;ll be able to see the change (
        a 
            href https://nextjs.org/docs/advanced-features/preview-mode
            title 
            + Documentation
        + ).
    br 
    p 
        + To enable Preview Mode, go to this URL:
    br 
    code 
        + http://localhost:3000/api/preview?secret=<secret>&id=<id>
    br 
    ul 
        li 
            code &lt;secret&gt;
            + should be the string you entered for
            code WORDPRESS_PREVIEW_SECRET
            + .
        li 
            code &lt;id&gt;
            + should be the post&#39;s
            code databaseId
            + field, which is the integer that you usually see in the URL (
            code ?post=18
            + â†’ 18).
        li 
            + Alternatively, you can use
            code &lt;slug&gt;
            + instead of
            code &lt;id&gt;
            + .
            code &lt;slug&gt;
            + is generated based on the title.
    br 
    p 
        + You should now be able to see this post. To exit Preview Mode, you can click on
        b 
            + Click here to exit preview mode
        + at the top.
    br 
    h3 
        + Step 7. Deploy on Vercel
    p 
        + You can deploy this app to the cloud with
        a 
            href https://vercel.com?utm_source=github&utm_medium=readme&utm_campaign=next-example
            title 
            + Vercel
        + (
        a 
            href https://nextjs.org/docs/deployment
            title 
            + Documentation
        + ).
    br 
    h4 
        + Deploy Your Local Project
    p 
        + To deploy your local project to Vercel, push it to GitHub/GitLab/Bitbucket and
        a 
            href https://vercel.com/new?utm_source=github&utm_medium=readme&utm_campaign=next-example
            title 
            + import to Vercel
        + .
    br 
    p 
        b 
            + Important
        + : When you import your project on Vercel, make sure to click on
        b 
            + Environment Variables
        + and set them to match your
        code .env.local
        + file.
    br 
    h4 
        + Deploy from Our Template
    p 
        + Alternatively, you can deploy using our template by clicking on the Deploy button below.
    br 
    p 
        a 
            href https://vercel.com/new/clone?repository-url=https://github.com/vercel/next.js/tree/canary/examples/cms-wordpress&project-name=cms-wordpress&repository-name=cms-wordpress&env=WORDPRESS_API_URL&envDescription=Required%20to%20connect%20the%20app%20with%20WordPress&envLink=https://vercel.link/cms-wordpress-env
            title 
            img 
                href https://vercel.com/button
                title 
