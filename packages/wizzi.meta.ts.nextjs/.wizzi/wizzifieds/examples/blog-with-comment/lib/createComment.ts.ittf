module
    kind react
    :import-type 
        @ NextApiRequest
        @ NextApiResponse
        from 'next'
    :import-type 
        @ Comment
        from '../interfaces'
    import redis from './redis'
    import 
        @ nanoid
        from 'nanoid'
    import getUser from './getUser'
    import clearUrl from './clearUrl'
    export-default 
        async-function createComments
            param req
                :ref NextApiRequest
            param res
                :ref NextApiResponse
            const url = clearUrl(req.headers.referer)
            const 
                { 
                    @ text
                = req.body
            const 
                { 
                    @ authorization
                = req.headers
            if !text || !authorization
                return 
                    _ res.status(400).json
                        { 
                            @ message 'Missing parameter.'
            if !redis
                return 
                    _ res.status(400).json
                        { 
                            @ message 'Failed to connect to redis client.'
            try 
                const user
                    await 
                        _ getUser(authorization)
                    # verify user token
                if !user
                    return 
                        _ res.status(400).json
                            { 
                                @ message 'Need authorization.'
                const 
                    { 
                        @ name
                        @ picture
                        @ sub
                        @ email
                    = user
                const comment
                    :ref Comment
                    =
                        { 
                            @ id nanoid()
                            @ created_at Date.now()
                            @ url
                            @ text
                            { user
                                @ name
                                @ picture
                                @ sub
                                @ email
                    # write data
                await 
                    _ redis.lpush(url, JSON.stringify(comment))
                    # write data
                return res.status(200).json(comment)
            catch _
                return 
                    _ res.status(400).json
                        { 
                            @ message 'Unexpected error occurred.'
