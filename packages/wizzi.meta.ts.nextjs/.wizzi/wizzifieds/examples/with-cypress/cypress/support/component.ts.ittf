module
    kind react
    import './commands'
        #
            # eslint-disable @typescript-eslint/no-namespace
        # ***********************************************************
        # This example support/component.ts is processed and
        # loaded automatically before your test files.
        # 
        # This is a great place to put global configuration and
        # behavior that modifies Cypress.
        # 
        # You can change the location of this file or turn off
        # automatically serving support files with the
        # 'supportFile' configuration option.
        # 
        # You can read more here:
        # https://on.cypress.io/configuration
        # ***********************************************************
        # Import commands.js using ES2015 syntax:
        # Alternatively you can use CommonJS syntax:
        # require('./commands')
    import 
        @ mount
        from 'cypress/react18'
        # Alternatively you can use CommonJS syntax:
        # require('./commands')
        # Augment the Cypress namespace to include type definitions for
        # your custom command.
        # Alternatively, can be defined in cypress/support/component.d.ts
        # with a <reference path="./component" /> at the top of your spec.
    :declare 
        :module global
            :module Cypress
                :interface Chainable
                    :p mount
                        :typeof mount
        # Augment the Cypress namespace to include type definitions for
        # your custom command.
        # Alternatively, can be defined in cypress/support/component.d.ts
        # with a <reference path="./component" /> at the top of your spec.
    _ Cypress.Commands.add('mount', mount)
        # Example use:
        # cy.mount(<MyComponent />)
