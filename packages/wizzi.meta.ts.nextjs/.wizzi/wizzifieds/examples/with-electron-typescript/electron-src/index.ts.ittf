module
    kind react
    import 
        @ join
        from 'path'
        # Native
    import 
        @ format
        from 'url'
        # Packages
    import 
        @ BrowserWindow
        @ app
        @ ipcMain
        @ IpcMainEvent
        from 'electron'
        # Packages
    import isDev from 'electron-is-dev'
    import prepareNext from 'electron-next'
        # Prepare the renderer once the app is ready
    _ app.on
        @ 'ready'
        async=> 
            await 
                _ prepareNext('./renderer')
            const mainWindow
                new BrowserWindow
                    { 
                        @ width 800
                        @ height 600
                        { webPreferences
                            @ nodeIntegration false
                            @ contextIsolation false
                            @ preload join(__dirname, 'preload.js')
            const url
                iif isDev
                    then 'http://localhost:8000/'
                    else
                        _ format
                            { 
                                @ pathname join(__dirname, '../renderer/out/index.html')
                                @ protocol 'file:'
                                @ slashes true
            _ mainWindow.loadURL(url)
        # Prepare the renderer once the app is ready
        # Quit the app once all windows are closed
    _ app.on('window-all-closed', app.quit)
        # Quit the app once all windows are closed
        # listen the channel `message` and resend the received message to the renderer process
    _ ipcMain.on
        @ 'message'
        => 
            param event
                :ref IpcMainEvent
            param message
                :any 
            _ console.log(message)
            _ setTimeout
                => 
                    _ event.sender.send('message', 'hi from electron')
                @ 500
        # listen the channel `message` and resend the received message to the renderer process
