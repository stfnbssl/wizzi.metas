module
    kind react
    import Head from 'next/head'
    import 
        @ useState
        from 'react'
    import cn from 'classnames'
    import formatDate from 'date-fns/format'
    import useSWR
        @ mutate
        @ SWRConfig
        from 'swr'
    import 'tailwindcss/tailwind.css'
    import 
        @ listGuestbookEntries
        from '@/lib/fauna'
    import SuccessMessage from '@/components/SuccessMessage'
    import ErrorMessage from '@/components/ErrorMessage'
    import LoadingSpinner from '@/components/LoadingSpinner'
    const fetcher
        => 
            param url
            _ fetch(url).then
                => 
                    param res
                    _ res.json()
    const putEntry
        => 
            param payload
            _ fetch
                @ '/api/entries'
                { 
                    @ method 'POST'
                    @ body JSON.stringify(payload)
                    { headers
                        @ 'Content-Type' 'application/json'
                ._ then
                    => 
                        param res
                        ( 
                            iif res.ok
                                then res.json()
                                else Promise.reject(res)
    const useEntriesFlow
        => 
            { 
                @ fallback
            const 
                { 
                    @ data entries
                =
                    _ useSWR
                        @ '/api/entries'
                        @ fetcher
                        { 
                            @ fallbackData fallback.entries
            const onSubmit
                async=> 
                    param payload
                    await 
                        _ putEntry(payload)
                    await 
                        _ mutate('/api/entries')
            return 
                { 
                    @ entries
                    @ onSubmit
    const AppHead
        => 
            < Head 
                meta 
                    @ charSet "utf-8"
                meta 
                    @ name "viewport"
                    @ content "width=device-width, initial-scale=1"
                link 
                    @ rel "shortcut icon"
                    @ type "image/x-icon"
                    @ href "/static/favicon.png"
    const EntryItem
        => 
            { 
                @ entry
            div 
                @ className "flex flex-col space-y-2"
                div 
                    @ className "prose dark:prose-dark w-full"
                    + {entry.message}
                div 
                    @ className "flex items-center space-x-3"
                    p 
                        @ className "text-sm text-gray-500"
                        + {entry.name}
                    span 
                        @ className "text-gray-200 dark:text-gray-800"
                        + /
                    p 
                        @ className "text-sm text-gray-400 dark:text-gray-600"
                        + {formatDate(Date(entry.createdAt), "d MMM yyyy 'at' h:mm bb")}
    const EntryForm
        => 
            { 
                @ onSubmit onSubmitProp
            const initial
                { 
                    @ name ''
                    @ message ''
            const [values, setValues] = useState(initial)
            const [formState, setFormState] = useState('initial')
            const isSubmitting = formState === 'submitting'
            const onSubmit
                => 
                    param ev
                    _ ev.preventDefault()
                    _ setFormState('submitting')
                    _ onSubmitProp(values).then
                        => 
                            _ setValues(initial)
                            _ setFormState('submitted')
                        ._ catch
                            => 
                                _ setFormState('failed')
            const makeOnChange
                => 
                    param fieldName
                    => 
                        { 
                            { target
                                @ value
                        _ setValues
                            { 
                                @ ...values
                                @ [fieldName] value
            const inputClasses = cn('block py-2 bg-white dark:bg-gray-800', 'rounded-md border-gray-300 focus:ring-blue-500', 'focus:border-blue-500 text-gray-900 dark:text-gray-100')
            return 
                < React.Fragment
                    form 
                        @ className "flex relative my-4"
                        @ onSubmit {onSubmit}
                        input 
                            @ required
                            @ className {cn(inputClasses, 'w-1/3 mr-2 px-4')}
                            @ aria-label "Your name"
                            @ placeholder "Your name..."
                            @ value {values.name}
                            @ onChange {makeOnChange('name')}
                        input 
                            @ required
                            @ className {cn(inputClasses, 'pl-4 pr-32 flex-grow')}
                            @ aria-label "Your message"
                            @ placeholder "Your message..."
                            @ value {values.message}
                            @ onChange {makeOnChange('message')}
                        button 
                            @ className {cn('flex items-center justify-center', 'absolute right-1 top-1 px-4 font-bold h-8', 'bg-gray-100 dark:bg-gray-700 text-gray-900', 'dark:text-gray-100 rounded w-28')}
                            @ type "submit"
                            @ disabled {isSubmitting}
                            { 
                                iif isSubmitting
                                    then
                                        < LoadingSpinner 
                                    else 'Sign'
                    { 
                        { 
                            @ failed
                                => 
                                    < ErrorMessage 
                                        + Something went wrong. :(
                            @ submitted
                                => 
                                    < SuccessMessage 
                                        + Thanks for signing the guestbook.
                            .[ formState
    const Guestbook
        => 
            { 
                @ fallback
            const 
                { 
                    @ entries
                    @ onSubmit
                =
                    _ useEntriesFlow
                        { 
                            @ fallback
            return 
                < SWRConfig 
                    @ value
                        { 
                            @ fallback
                    main 
                        @ className "max-w-4xl mx-auto p-4"
                        < AppHead 
                        div 
                            @ className {cn('border border-blue-200 rounded p-6', 'my-4 w-full dark:border-gray-800 bg-blue-50', 'dark:bg-blue-opaque')}
                            h5 
                                @ className {cn('text-lg md:text-xl font-bold', 'text-gray-900')}
                                + Sign the Guestbook
                            p 
                                @ className "my-1 text-gray-800"
                                + Share a message for a future visitor.
                            < EntryForm 
                                @ onSubmit {onSubmit}
                        div 
                            @ className "mt-4 space-y-8 px-2"
                            { 
                                _ entries?.map?.
                                    => 
                                        param entry
                                        < EntryItem 
                                            @ key {entry._id}
                                            @ entry {entry}
    export 
        async-function getStaticProps
            const entries
                await 
                    _ listGuestbookEntries()
            return 
                { 
                    { props
                        { fallback
                            @ entries
    export-default Guestbook
