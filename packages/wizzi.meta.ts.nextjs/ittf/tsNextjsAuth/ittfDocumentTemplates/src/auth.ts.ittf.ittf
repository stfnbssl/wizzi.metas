$group

    ${'$'}include set-ctx-functions
    ${'$'}
        setCtxDep ('next-auth', 'beta');
        $if metaCtx.tsNextjsAuth.useDatabase
            $if metaCtx.tsNextjsAuth.database.useUnstorage
                setCtxDep ('unstorage', '^1.10.1');
                setCtxDep ('@auth/unstorage-adapter', '^2.0.0');
            $if metaCtx.tsNextjsAuth.database.usePrisma
                setCtxDep ('@auth/prisma-adapter', '^2.1.0');

    import NextAuth from "next-auth"
    import "next-auth/jwt"
    $if metaCtx.tsNextjsAuth.useProvider
        $if metaCtx.tsNextjsAuth.provider.useApple
            import Apple from "next-auth/providers/apple"
        $if metaCtx.tsNextjsAuth.provider.useGitHub
            import GitHub from "next-auth/providers/github"
        $if metaCtx.tsNextjsAuth.provider.useGoogle
            import Google from "next-auth/providers/google"
        $if metaCtx.tsNextjsAuth.provider.useTwitter
            import Twitter from "next-auth/providers/twitter"
        $if TODO
            import Auth0 from "next-auth/providers/auth0"
            import AzureB2C from "next-auth/providers/azure-ad-b2c"
            import BoxyHQSAML from "next-auth/providers/boxyhq-saml"
            import Cognito from "next-auth/providers/cognito"
            import Coinbase from "next-auth/providers/coinbase"
            import Discord from "next-auth/providers/discord"
            import Dropbox from "next-auth/providers/dropbox"
            import Facebook from "next-auth/providers/facebook"
            import GitLab from "next-auth/providers/gitlab"
            import Hubspot from "next-auth/providers/hubspot"
            import Keycloak from "next-auth/providers/keycloak"
            import LinkedIn from "next-auth/providers/linkedin"
            import Netlify from "next-auth/providers/netlify"
            import Okta from "next-auth/providers/okta"
            import Passage from "next-auth/providers/passage"
            import Passkey from "next-auth/providers/passkey"
            import Pinterest from "next-auth/providers/pinterest"
            import Reddit from "next-auth/providers/reddit"
            import Slack from "next-auth/providers/slack"
            import Spotify from "next-auth/providers/spotify"
            import Twitch from "next-auth/providers/twitch"
            import WorkOS from "next-auth/providers/workos"
            import Zoom from "next-auth/providers/zoom"
    
    $if metaCtx.tsNextjsAuth.useDatabase
        $if metaCtx.tsNextjsAuth.database.useUnstorage
            import
                @ createStorage
                from "unstorage"
            import memoryDriver from "unstorage/drivers/memory"
            import vercelKVDriver from "unstorage/drivers/vercel-kv"
            import
                @ UnstorageAdapter
                from "@auth/unstorage-adapter"
        $if metaCtx.tsNextjsAuth.database.usePrisma
            import
                @ PrismaAdapter
                from "@auth/prisma-adapter"
            import
                @ PrismaClient
                from "@prisma/client"
    :import-type
        @ NextAuthConfig
        from "next-auth"
        # import log from "...logging-service"

    $if metaCtx.tsNextjsAuth.useDatabase
        $if metaCtx.tsNextjsAuth.database.useUnstorage
            const storage
                _ createStorage
                    {
                        @ driver
                            iif process.env.VERCEL
                                then
                                    _ vercelKVDriver
                                        {
                                            @ url process.env.AUTH_KV_REST_API_URL
                                            @ token process.env.AUTH_KV_REST_API_TOKEN
                                            @ env false
                                else memoryDriver()

        $if metaCtx.tsNextjsAuth.database.usePrisma
            const prisma = new PrismaClient()

    const config
        satisfies
            {
                { theme
                    @ logo "https://authjs.dev/img/logo-sm.png"
                $if metaCtx.tsNextjsAuth.useDatabase
                    $if metaCtx.tsNextjsAuth.database.useUnstorage
                        @ adapter UnstorageAdapter(storage)
                    $if metaCtx.tsNextjsAuth.database.usePrisma
                        @ adapter PrismaAdapter(prisma)
                [ providers
                    $if metaCtx.tsNextjsAuth.useProvider
                        $if metaCtx.tsNextjsAuth.provider.useApple
                            @ Apple
                        $if metaCtx.tsNextjsAuth.provider.useGitHub
                            @ GitHub
                        $if metaCtx.tsNextjsAuth.provider.useGoogle
                            @ Google
                        $if metaCtx.tsNextjsAuth.provider.useTwitter
                            @ Twitter
                        $if TODO
                            @ Auth0
                            @ AzureB2C
                            @ BoxyHQSAML
                            @ Cognito
                            @ Coinbase
                            @ Discord
                            @ Dropbox
                            @ Facebook
                            @ GitLab
                            @ Hubspot
                            @ Keycloak
                            @ LinkedIn
                            @ Netlify
                            @ Okta
                            @ Passage
                            @ Passkey
                            @ Pinterest
                            @ Reddit
                            @ Slack
                            @ Spotify
                            @ Twitch
                            @ WorkOS
                            @ Zoom

                @ basePath "/auth"
                { callbacks
                    m authorized
                        {
                            @ request
                            @ auth
                        const
                            {
                                @ pathname
                            = request.nextUrl
                        if pathname === "/middleware-example"
                            return !!auth
                        return true
                    m jwt
                        {
                            @ token
                            @ trigger
                            @ session
                            @ account
                        if trigger === "update"
                            set token.name = session.user.name
                        if account?.provider === "keycloak"
                            return
                                {
                                    @ ...token
                                    @ accessToken account.access_token
                        return token
                    m session
                        async
                        {
                            @ session
                            @ token
                        if token?.accessToken
                            set session.accessToken = token.accessToken
                        return session
                { experimental
                    @ enableWebAuthn true
                @ debug
                    iif process.env.NODE_ENV !== "production"
                        then true
                        else false
            :ref NextAuthConfig
    
    export
        const
            {
                @ handlers
                @ auth
                @ signIn
                @ signOut
            = NextAuth(config)
    
    :declare
        :module "next-auth"
            :interface Session
                :p accessToken
                    :optional
                    :string
    
    :declare
        :module "next-auth/jwt"
            :interface JWT
                :p accessToken
                    :optional
                    :string