$group
    
    import
        @ config
            as appConfig
        from '../config'
    import bluebird from bluebird
    import redis from redis
    +
    const options
        { 
            @ url config.redisUrl
            @ enable_offline_queue true
            @ no_ready_check true
            @ retry_strategy
                => 
                    param options
                    if options.error && options.error.code === 'ECONNREFUSED'
                        return new Error('The server refused the connection')
                    if options.total_retry_time > 1000 * 60 * 60
                        return new Error('Retry time exhausted')
                    if options.attempt > 10
                        return undefined
                    return Math.min(options.attempt * 100, 3000)
                        # reconnect after
    if config.redisPassword !== ''
        set options.password = config.redisPassword
    if config.redisCa !== ''
        set options.tls =
            { 
                @ cert config.redisCa
                [ ca
                    @ config.redisCa
    +
    set redis.debug_mode = false
    +
    _ bluebird.promisifyAll
        @ redis.RedisClient.prototype
    +
    const RedisClient
        =>
            return 
                _ redis.createClient
                    @ config.redisUrl
                    @ options
    +
    export
        @ RedisClient

