$group
    ${'$'}params &tb

    ${'$'} 
        var db = tb.__db;
        var ctrl = {
            name: 'ApiV1' + tb.Name,
            path: '/api/v1/' + db.name + '/' + tb.name,
            apiSecured: wzCtx.App.isLocal == false,
            tb: tb,
        }
    +
    v08/ts/controller${'('}&ctrl)
            
        ${'$'}append imports
            import
                @ ValidateResult
                @ CRUDResult
                from '../../../common/types'
            import
                @ Get${'$'}{tb.Name}Model
                from '../models/${'$'}{tb.name}'
            +
            const myname = 'features/${'$'}{db.name}/controllers/apiv1${'$'}{tb.name}'

        v08/ts/route_api_secured${'('} get, /, this.getAll)
        v08/ts/route_api_secured${'('} get, /:id, this.getById)
        v08/ts/route_api_secured${'('} post, /, this.create)
        v08/ts/route_api_secured${'('} put, /:id, this.update)
        v08/ts/route_api_secured${'('} delete, /:id, this.delete)

        ${'$'}append handlers

            v08/ts/handler${'('} getAll )
                _ Get${'$'}{tb.Name}Model().findAll
                    ._ then
                        =>
                            param result
                                :any
                            $$ loog '${'$'}{tb.Name}.findAll.result', result
                            _ sendSuccess
                                @ response
                                @ result
                    v08/ts/catch_fail${'('}${'$'}{tb.Name}.getAll)

            v08/ts/handler${'('} getById )
                const id = request.params.id
                _ Get${'$'}{tb.Name}Model().findByPk(id)
                    ._ then
                        =>
                            param result
                                :any
                            $$ loog '${'$'}{tb.Name}.getById.result', result
                            if result
                                _ sendSuccess
                                    @ response
                                    @ result
                            else
                                _ sendSuccess
                                    @ response
                                    {
                                        @ oper 'get'
                                        @ ok false
                                        @ message '${'$'}{tb.Name} not found'
                    v08/ts/catch_fail${'('}${'$'}{tb.Name}.getById)

            v08/ts/handler${'('} create )
                if request.body.id
                    _ response.status(400).send
                        `lit 
                            + Bad request: ID should not be provided, since it is determined automatically by the database.
                _ Get${'$'}{tb.Name}Model().create(request.body)
                    ._ then
                        =>
                            param result
                                :any
                            $$ loog '${'$'}{tb.Name}.create.result', result
                            if result
                                _ sendSuccess
                                    @ response
                                    @ result
                            else
                                _ sendSuccess
                                    @ response
                                    {
                                        @ oper 'create'
                                        @ ok false
                                        @ message '${'$'}{tb.Name} creation failed'
                    v08/ts/catch_fail${'('}${'$'}{tb.Name}.create)

            v08/ts/handler${'('} update )
                const id = request.params.id
                _ Get${'$'}{tb.Name}Model().update
                    @ request.body
                    { 
                        { where
                            @ id
                    ._ then
                        =>
                            param result
                                :any
                            $$ loog '${'$'}{tb.Name}.update.result', result
                            if result
                                _ sendSuccess
                                    @ response
                                    @ result
                            else
                                _ sendSuccess
                                    @ response
                                    {
                                        @ oper 'update'
                                        @ ok false
                                        @ message '${'$'}{tb.Name} update failed'
                    v08/ts/catch_fail${'('}${'$'}{tb.Name}.update)

            v08/ts/handler${'('} delete )
                const id = request.params.id
                _ Get${'$'}{tb.Name}Model().delete
                    { 
                        { where
                            @ id
                    ._ then
                        =>
                            param result
                                :any
                            $$ loog 'delete.result', result
                            if result
                                _ sendSuccess
                                    @ response
                                    @ result
                            else
                                _ sendSuccess
                                    @ response
                                    {
                                        @ oper 'delete'
                                        @ ok false
                                        @ message '${'$'}{tb.Name} delete failed'
                    v08/ts/catch_fail${'('}${'$'}{tb.Name}.delete)