$group
    ${'$'}params &tb

    ${'$'} 
        var fields = tb.fields;
    +
    class ${'$'}{tb.Name} 
        super Model
        m associate
            static
            param models
            ${'$'}if tb.__db.relations
                ${'$'}foreach r in tb.__db.relations
                    ${'$'}if r.kind == "one-to-many"
                        ${'$'}if r.ltable == tb.Name
                            _ ${'$'}{tb.Name}.hasMany
                                @ models.${'$'}{r.rtable}
                                { 
                                ${'$'}if r.foreignKey
                                    @ foreignKey "${'$'}{r.foreignKey}"
                        ${'$'}if r.rtable == tb.Name
                            _ ${'$'}{tb.Name}.belongsTo
                                @ models.${'$'}{r.ltable}
                                { 
                                ${'$'}if r.foreignKey
                                    @ foreignKey "${'$'}{r.foreignKey}"
                    ${'$'}if r.kind == "one-to-one"
                        ${'$'}if r.ltable == tb.Name
                            _ ${'$'}{tb.Name}.hasOne
                                @ models.${'$'}{r.rtable}
                                { 
                                ${'$'}if r.foreignKey
                                    { foreignKey
                                    ${'$'}if r.foreignKey.name
                                        @ name "${'$'}{r.foreignKey.name}"
                                    ${'$'}if r.foreignKey.allowNull == false
                                        @ allowNull false
            #
                # 
                # Helper method for defining associations.
                # This method is not a part of Sequelize lifecycle.
                # 
    _ ${'$'}{tb.Name}.init
        { 
            ./attributes${'('}&fields)
        { 
            @ sequelize
            @ modelName "${'$'}{tb.Name}"
            @ updatedAt "updated_at"
            @ createdAt "created_at"

